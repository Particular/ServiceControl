[assembly: System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.7.2", FrameworkDisplayName=".NET Framework 4.7.2")]
namespace ServiceControl.Transports
{
    public class EndpointToQueueMapping
    {
        public EndpointToQueueMapping(string endpointName, string inputQueue) { }
        public string EndpointName { get; set; }
        public string InputQueue { get; set; }
        public bool Equals(ServiceControl.Transports.EndpointToQueueMapping other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public interface IProvideQueueLength
    {
        void Initialize(string connectionString, System.Action<ServiceControl.Transports.QueueLengthEntry[], ServiceControl.Transports.EndpointToQueueMapping> store);
        System.Threading.Tasks.Task Start();
        System.Threading.Tasks.Task Stop();
        void TrackEndpointInputQueue(ServiceControl.Transports.EndpointToQueueMapping queueToTrack);
    }
    public interface IQueueIngestor
    {
        System.Threading.Tasks.Task Start();
        System.Threading.Tasks.Task Stop();
    }
    public class QueueLengthEntry
    {
        public QueueLengthEntry() { }
        public long DateTicks { get; set; }
        public long Value { get; set; }
    }
    public abstract class TransportCustomization
    {
        protected TransportCustomization() { }
        protected void ConfigureDefaultEndpointSettings(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings) { }
        public abstract ServiceControl.Transports.IProvideQueueLength CreateQueueLengthProvider();
        protected abstract void CustomizeForQueueIngestion(NServiceBus.Raw.RawEndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings);
        public abstract void CustomizeForReturnToSenderIngestion(NServiceBus.Raw.RawEndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings);
        public void CustomizeMonitoringEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings) { }
        protected abstract void CustomizeRawSendOnlyEndpoint(NServiceBus.Raw.RawEndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings);
        public void CustomizeSendOnlyEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings) { }
        public void CustomizeServiceControlEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings) { }
        protected abstract void CustomizeTransportSpecificMonitoringEndpointSettings(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings);
        protected abstract void CustomizeTransportSpecificSendOnlyEndpointSettings(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings);
        protected abstract void CustomizeTransportSpecificServiceControlEndpointSettings(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings);
        public System.Threading.Tasks.Task<NServiceBus.Transport.IDispatchMessages> InitializeDispatcher(string name, ServiceControl.Transports.TransportSettings transportSettings) { }
        public System.Threading.Tasks.Task<ServiceControl.Transports.IQueueIngestor> InitializeQueueIngestor(string queueName, ServiceControl.Transports.TransportSettings transportSettings, System.Func<NServiceBus.Transport.MessageContext, System.Threading.Tasks.Task> onMessage, System.Func<NServiceBus.Transport.ErrorContext, System.Threading.Tasks.Task<NServiceBus.Transport.ErrorHandleResult>> onError, System.Func<string, System.Exception, System.Threading.Tasks.Task> onCriticalError) { }
        public virtual System.Threading.Tasks.Task ProvisionQueues(string username, ServiceControl.Transports.TransportSettings transportSettings, System.Collections.Generic.IEnumerable<string> additionalQueues) { }
    }
    public class TransportManifest
    {
        public TransportManifest() { }
        public ServiceControl.Transports.TransportManifestDefinition[] Definitions { get; set; }
        public string Version { get; set; }
    }
    public class TransportManifestDefinition
    {
        public TransportManifestDefinition() { }
        public string[] Aliases { get; set; }
        public string DisplayName { get; set; }
        public string Name { get; set; }
        public string TypeName { get; set; }
    }
    public static class TransportManifestLibrary
    {
        public static System.Collections.Generic.List<ServiceControl.Transports.TransportManifest> TransportManifests { get; set; }
        public static string Find(string transportType) { }
        public static string GetTransportFolder(string transportType) { }
    }
    public class TransportSettings : NServiceBus.Settings.SettingsHolder
    {
        public TransportSettings() { }
        public string ConnectionString { get; set; }
        public string EndpointName { get; set; }
        public string ErrorQueue { get; set; }
        public int MaxConcurrency { get; set; }
        public bool RunCustomChecks { get; set; }
    }
}