[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace ServiceControl.Transports
{
    public abstract class AbstractQueueLengthProvider : Microsoft.Extensions.Hosting.BackgroundService, Microsoft.Extensions.Hosting.IHostedService, ServiceControl.Transports.IProvideQueueLength
    {
        protected AbstractQueueLengthProvider(ServiceControl.Transports.TransportSettings settings, System.Action<ServiceControl.Transports.QueueLengthEntry[], ServiceControl.Transports.EndpointToQueueMapping> store) { }
        protected string ConnectionString { get; }
        protected System.Action<ServiceControl.Transports.QueueLengthEntry[], ServiceControl.Transports.EndpointToQueueMapping> Store { get; }
        public override System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken cancellationToken) { }
        public abstract void TrackEndpointInputQueue(ServiceControl.Transports.EndpointToQueueMapping queueToTrack);
    }
    public class EndpointToQueueMapping
    {
        public EndpointToQueueMapping(string endpointName, string inputQueue) { }
        public string EndpointName { get; set; }
        public string InputQueue { get; set; }
        public bool Equals(ServiceControl.Transports.EndpointToQueueMapping other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public interface IProvideQueueLength : Microsoft.Extensions.Hosting.IHostedService
    {
        void TrackEndpointInputQueue(ServiceControl.Transports.EndpointToQueueMapping queueToTrack);
    }
    public interface ITransportCustomization
    {
        void AddTransportForAudit(Microsoft.Extensions.DependencyInjection.IServiceCollection services, ServiceControl.Transports.TransportSettings transportSettings);
        void AddTransportForMonitoring(Microsoft.Extensions.DependencyInjection.IServiceCollection services, ServiceControl.Transports.TransportSettings transportSettings);
        void AddTransportForPrimary(Microsoft.Extensions.DependencyInjection.IServiceCollection services, ServiceControl.Transports.TransportSettings transportSettings);
        System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> CreateTransportInfrastructure(string name, ServiceControl.Transports.TransportSettings transportSettings, NServiceBus.Transport.OnMessage onMessage = null, NServiceBus.Transport.OnError onError = null, System.Func<string, System.Exception, System.Threading.Tasks.Task> onCriticalError = null, NServiceBus.TransportTransactionMode preferredTransactionMode = 1);
        void CustomizeAuditEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings);
        void CustomizeMonitoringEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings);
        void CustomizePrimaryEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings);
        System.Threading.Tasks.Task ProvisionQueues(ServiceControl.Transports.TransportSettings transportSettings, System.Collections.Generic.IEnumerable<string> additionalQueues);
    }
    public readonly struct KeyDescriptionPair
    {
        public KeyDescriptionPair(string key, string description) { }
        public string Description { get; }
        public string Key { get; }
    }
    public class QueueLengthEntry
    {
        public QueueLengthEntry() { }
        public long DateTicks { get; set; }
        public long Value { get; set; }
    }
    public class QueueThroughput
    {
        public QueueThroughput() { }
        public System.DateOnly DateUTC { get; set; }
        public long TotalThroughput { get; set; }
    }
    public abstract class TransportCustomization<TTransport> : ServiceControl.Transports.ITransportCustomization
        where TTransport : NServiceBus.Transport.TransportDefinition
    {
        protected TransportCustomization() { }
        public void AddTransportForAudit(Microsoft.Extensions.DependencyInjection.IServiceCollection services, ServiceControl.Transports.TransportSettings transportSettings) { }
        protected virtual void AddTransportForAuditCore(Microsoft.Extensions.DependencyInjection.IServiceCollection services, ServiceControl.Transports.TransportSettings transportSettings) { }
        public void AddTransportForMonitoring(Microsoft.Extensions.DependencyInjection.IServiceCollection services, ServiceControl.Transports.TransportSettings transportSettings) { }
        protected virtual void AddTransportForMonitoringCore(Microsoft.Extensions.DependencyInjection.IServiceCollection services, ServiceControl.Transports.TransportSettings transportSettings) { }
        public void AddTransportForPrimary(Microsoft.Extensions.DependencyInjection.IServiceCollection services, ServiceControl.Transports.TransportSettings transportSettings) { }
        protected virtual void AddTransportForPrimaryCore(Microsoft.Extensions.DependencyInjection.IServiceCollection services, ServiceControl.Transports.TransportSettings transportSettings) { }
        protected void ConfigureDefaultEndpointSettings(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings) { }
        protected abstract TTransport CreateTransport(ServiceControl.Transports.TransportSettings transportSettings, NServiceBus.TransportTransactionMode preferredTransactionMode = 1);
        public System.Threading.Tasks.Task<NServiceBus.Transport.TransportInfrastructure> CreateTransportInfrastructure(string name, ServiceControl.Transports.TransportSettings transportSettings, NServiceBus.Transport.OnMessage onMessage = null, NServiceBus.Transport.OnError onError = null, System.Func<string, System.Exception, System.Threading.Tasks.Task> onCriticalError = null, NServiceBus.TransportTransactionMode preferredTransactionMode = 1) { }
        public void CustomizeAuditEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings) { }
        public void CustomizeMonitoringEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings) { }
        public void CustomizePrimaryEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, ServiceControl.Transports.TransportSettings transportSettings) { }
        protected abstract void CustomizeTransportForAuditEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, TTransport transportDefinition, ServiceControl.Transports.TransportSettings transportSettings);
        protected abstract void CustomizeTransportForMonitoringEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, TTransport transportDefinition, ServiceControl.Transports.TransportSettings transportSettings);
        protected abstract void CustomizeTransportForPrimaryEndpoint(NServiceBus.EndpointConfiguration endpointConfiguration, TTransport transportDefinition, ServiceControl.Transports.TransportSettings transportSettings);
        public virtual System.Threading.Tasks.Task ProvisionQueues(ServiceControl.Transports.TransportSettings transportSettings, System.Collections.Generic.IEnumerable<string> additionalQueues) { }
    }
    public static class TransportFactory
    {
        public static ServiceControl.Transports.ITransportCustomization Create(ServiceControl.Transports.TransportSettings settings) { }
    }
    public class TransportManifest
    {
        public TransportManifest() { }
        public ServiceControl.Transports.TransportManifestDefinition[] Definitions { get; set; }
        public override string ToString() { }
    }
    public class TransportManifestDefinition
    {
        public TransportManifestDefinition() { }
        public string[] Aliases { get; set; }
        public string AssemblyName { get; set; }
        public string DisplayName { get; set; }
        public string Location { get; set; }
        public string Name { get; set; }
        public string TypeName { get; set; }
        public override string ToString() { }
    }
    public static class TransportManifestLibrary
    {
        public static System.Collections.Generic.List<ServiceControl.Transports.TransportManifest> TransportManifests { get; }
        public static ServiceControl.Transports.TransportManifestDefinition Find(string transportType) { }
    }
    public class TransportSettings : NServiceBus.Settings.SettingsHolder
    {
        public TransportSettings() { }
        public System.Func<string, System.Runtime.Loader.AssemblyLoadContext> AssemblyLoadContextResolver { get; set; }
        public string ConnectionString { get; set; }
        public string EndpointName { get; set; }
        public string ErrorQueue { get; set; }
        public int MaxConcurrency { get; set; }
        public bool RunCustomChecks { get; set; }
        public string TransportType { get; set; }
    }
}