<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- Must stay net6.0 to support PowerShell 7.2 LTS -->
    <TargetFramework>net6.0-windows</TargetFramework>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <LangVersion>10.0</LangVersion>
    <ModuleName>Particular.ServiceControl.Management</ModuleName>
    <ModuleArtifactsPath>$(ArtifactsPath)PowerShellModules\$(ModuleName)\</ModuleArtifactsPath>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\ServiceControlInstaller.Engine\ServiceControlInstaller.Engine.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="PowerShellStandard.Library" />
  </ItemGroup>

  <ItemGroup>
    <Artifact Include="$(OutputPath)" DestinationFolder="$(ModuleArtifactsPath)" />
    <Artifact Include="$(ModuleName).psd1" DestinationFolder="$(ModuleArtifactsPath)" />
    <Artifact Include="$(ModuleName).psm1" DestinationFolder="$(ModuleArtifactsPath)" />
    <Artifact Include="$(ModuleName).format.ps1xml" DestinationFolder="$(ModuleArtifactsPath)" />
    <Artifact Include="ServiceControl.Management.PowerShell.dll-help.xml" DestinationFolder="$(ModuleArtifactsPath)" />
  </ItemGroup>

  <UsingTask TaskName="FileUpdate" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Pattern ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
             RegexOptions options = RegexOptions.Multiline | RegexOptions.IgnoreCase;
             if (Files.Length > 0)
             {
                  ReplacementText ??= string.Empty;
                  if (Pattern == "{{Prerelease}}" && !string.IsNullOrEmpty(ReplacementText))
                  {
                      var parts = ReplacementText.Split('.');
                      var result = int.Parse(parts[1]);
                      ReplacementText = $"{parts[0]}{result:D4}";
                  }
                  for (int i = 0; i < Files.Length; i++)
                  {
                      var path = Files[i].GetMetadata("FullPath");
                      File.WriteAllText(path, Regex.Replace(File.ReadAllText(path), Pattern, ReplacementText, options));
                  }
              }
          ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="UpdateModuleManifestVersion" DependsOnTargets="MinVer" AfterTargets="CopyArtifacts">
    <ItemGroup>
      <ModuleFile Include="$(ModuleArtifactsPath)$(ModuleName).psd1" />
    </ItemGroup>
    <FileUpdate Files="@(ModuleFile)" Pattern="{{Version}}" ReplacementText="$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)" />
    <FileUpdate Files="@(ModuleFile)" Pattern="{{Prerelease}}" ReplacementText="$(MinVerPrerelease)" />
    <FileUpdate Files="@(ModuleFile)" Pattern="{{Date}}" ReplacementText="$([System.DateTime]::UtcNow.ToString(yyyy))" />
  </Target>

</Project>
