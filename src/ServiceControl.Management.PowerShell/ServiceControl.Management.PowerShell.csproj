<Project Sdk="Microsoft.NET.Sdk">

  <!--

  NOTE: No ProjectReferences or PackageReferences can be added to the project without first ensuring that they done in a way that
  doesn't break the dependency isolation required by the PowerShell module. All dependencies need to be loaded in the separated
  AssemblyLoadContext so that they don't conflict with the assemblies that ship as part of PowerShell itself or from other modules.
  Additionally, any type that lives in a dependency can mess up the module loading process if it's exposed as part of the public API
  of the PowerShell cmdlets. It's complex. Tread carefully.
  See: https://devblogs.microsoft.com/powershell/resolving-powershell-module-assembly-dependency-conflicts/

  -->

  <PropertyGroup>
    <!-- Must stay net8.0 to support PowerShell 7.4 LTS -->
    <TargetFramework>net8.0-windows</TargetFramework>

    <!--Ensures that all project references are explicitly defined in this file -->
    <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\ServiceControlInstaller.Engine\ServiceControlInstaller.Engine.csproj" Private="false" />
    <!--Even though we have this dependency, we are actually relying on the copy provided by ServiceControlInstaller.Engine at runtime -->
    <ProjectReference Include="..\ServiceControl.LicenseManagement\ServiceControl.LicenseManagement.csproj" Private="false" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.DependencyModel" GeneratePathProperty="true" />
    <PackageReference Include="System.Management.Automation" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Particular.Obsoletes" PrivateAssets="All" ExcludeAssets="runtime" />
  </ItemGroup>

  <ItemGroup>
    <Artifact Include="$(OutputPath)" DestinationFolder="$(PowerShellModuleArtifactsPath)" />
    <Artifact Include="$(PkgMicrosoft_Extensions_DependencyModel)\lib\netstandard2.0\Microsoft.Extensions.DependencyModel.dll" DestinationFolder="$(PowerShellModuleArtifactsPath)" />
    <Artifact Include="$(PowerShellModuleName).psd1" DestinationFolder="$(PowerShellModuleArtifactsPath)" />
    <Artifact Include="$(PowerShellModuleName).psm1" DestinationFolder="$(PowerShellModuleArtifactsPath)" />
    <Artifact Include="$(PowerShellModuleName).format.ps1xml" DestinationFolder="$(PowerShellModuleArtifactsPath)" />
    <Artifact Include="ServiceControl.Management.PowerShell.dll-help.xml" DestinationFolder="$(PowerShellModuleArtifactsPath)" />
  </ItemGroup>

  <UsingTask TaskName="FileUpdate" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Pattern ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
             RegexOptions options = RegexOptions.Multiline | RegexOptions.IgnoreCase;
             if (Files.Length > 0)
             {
                  ReplacementText ??= string.Empty;
                  if (Pattern == "{{Prerelease}}" && !string.IsNullOrEmpty(ReplacementText))
                  {
                      var parts = ReplacementText.Split('.');
                      var result = int.Parse(parts[1]);
                      ReplacementText = $"{parts[0]}{result:D4}";
                  }
                  for (int i = 0; i < Files.Length; i++)
                  {
                      var path = Files[i].GetMetadata("FullPath");
                      File.WriteAllText(path, Regex.Replace(File.ReadAllText(path), Pattern, ReplacementText, options));
                  }
              }
          ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="UpdateModuleManifestVersion" DependsOnTargets="MinVer" AfterTargets="CopyArtifacts">
    <ItemGroup>
      <ModuleFile Include="$(PowerShellModuleArtifactsPath)$(PowerShellModuleName).psd1" />
    </ItemGroup>
    <FileUpdate Files="@(ModuleFile)" Pattern="{{Version}}" ReplacementText="$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)" />
    <FileUpdate Files="@(ModuleFile)" Pattern="{{Prerelease}}" ReplacementText="$(MinVerPrerelease)" />
    <FileUpdate Files="@(ModuleFile)" Pattern="{{Date}}" ReplacementText="$([System.DateTime]::UtcNow.ToString(yyyy))" />
  </Target>

  <Target Name="WorkaroundForSqlClientWindowsFormsReference" BeforeTargets="AddTransitiveFrameworkReferences">
    <ItemGroup>
      <TransitiveFrameworkReference Remove="@(TransitiveFrameworkReference)" Condition="'%(TransitiveFrameworkReference.Identity)' == 'Microsoft.WindowsDesktop.App.WindowsForms'" />
    </ItemGroup>
  </Target>

</Project>
