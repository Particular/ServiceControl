GET / => ServiceControl.Infrastructure.WebApi.RootController:Urls()
GET /archive/groups/id/{groupId:required:minlength(1)} => ServiceControl.MessageFailures.Api.ArchiveMessagesController:GetGroup(String groupId, String status, String modified)
GET /configuration => ServiceControl.Infrastructure.WebApi.RootController:Config()
GET /configuration/remotes => ServiceControl.Infrastructure.WebApi.RootController:RemoteConfig()
GET /connection => ServiceControl.Connection.ConnectionController:GetConnectionDetails()
GET /conversations/{conversationid} => ServiceControl.CompositeViews.Messages.GetMessagesByConversationController:Messages(PagingInfo pagingInfo, SortInfo sortInfo, Boolean includeSystemMessages, String conversationId)
GET /customchecks => ServiceControl.CustomChecks.CustomCheckController:CustomChecks(PagingInfo pagingInfo, String status)
DELETE /customchecks/{id} => ServiceControl.CustomChecks.CustomCheckController:Delete(Guid id)
POST /edit/{failedMessageId:required:minlength(1)} => ServiceControl.MessageFailures.Api.EditFailedMessagesController:Edit(String failedMessageId, EditMessageModel edit)
GET /edit/config => ServiceControl.MessageFailures.Api.EditFailedMessagesController:Config()
GET /endpoints => ServiceControl.Monitoring.EndpointsMonitoringController:Endpoints()
OPTIONS /endpoints => ServiceControl.Monitoring.EndpointsMonitoringController:GetSupportedOperations()
GET /endpoints/{endpoint}/audit-count => ServiceControl.CompositeViews.Messages.GetMessagesController:GetEndpointAuditCounts(PagingInfo pagingInfo, String endpoint)
GET /endpoints/{endpoint}/messages => ServiceControl.CompositeViews.Messages.GetMessagesController:MessagesForEndpoint(PagingInfo pagingInfo, SortInfo sortInfo, Boolean includeSystemMessages, String endpoint)
GET /endpoints/{endpoint}/messages/search => ServiceControl.CompositeViews.Messages.GetMessagesController:Search(PagingInfo pagingInfo, SortInfo sortInfo, String endpoint, String q)
GET /endpoints/{endpoint}/messages/search/{keyword} => ServiceControl.CompositeViews.Messages.GetMessagesController:SearchByKeyword(PagingInfo pagingInfo, SortInfo sortInfo, String endpoint, String keyword)
DELETE /endpoints/{endpointId} => ServiceControl.Monitoring.EndpointsMonitoringController:DeleteEndpoint(Guid endpointId)
PATCH /endpoints/{endpointId} => ServiceControl.Monitoring.EndpointsMonitoringController:Monitoring(Guid endpointId, EndpointUpdateModel data)
GET /endpoints/{endpointname}/errors => ServiceControl.MessageFailures.Api.GetAllErrorsController:ErrorsByEndpointName(PagingInfo pagingInfo, SortInfo sortInfo, String status, String modified, String endpointName)
GET /endpoints/known => ServiceControl.Monitoring.EndpointsMonitoringController:KnownEndpoints(PagingInfo pagingInfo)
GET /errors => ServiceControl.MessageFailures.Api.GetAllErrorsController:ErrorsGet(PagingInfo pagingInfo, SortInfo sortInfo, String status, String modified, String queueAddress)
HEAD /errors => ServiceControl.MessageFailures.Api.GetAllErrorsController:ErrorsHead(String status, String modified, String queueAddress)
POST /errors/{endpointName:required:minlength(1)}/retry/all => ServiceControl.MessageFailures.Api.RetryMessagesController:RetryAllByEndpoint(String endpointName)
GET /errors/{failedMessageId:required:minlength(1)} => ServiceControl.MessageFailures.Api.GetErrorByIdController:ErrorBy(String failedMessageId)
POST /errors/{failedMessageId:required:minlength(1)}/retry => ServiceControl.MessageFailures.Api.RetryMessagesController:RetryMessageBy(String instanceId, String failedMessageId)
PATCH /errors/{from}...{to}/unarchive => ServiceControl.MessageFailures.Api.UnArchiveMessagesController:Unarchive(String from, String to)
PATCH/POST /errors/{messageId}/archive => ServiceControl.MessageFailures.Api.ArchiveMessagesController:Archive(String messageId)
PATCH/POST /errors/archive => ServiceControl.MessageFailures.Api.ArchiveMessagesController:ArchiveBatch(List<String> messageIds)
PATCH/POST /errors/archive => ServiceControl.MessageFailures.Api.ArchiveMessagesController:ArchiveBatch(String[] messageIds)
GET /errors/groups/{classifier?} => ServiceControl.MessageFailures.Api.ArchiveMessagesController:GetArchiveMessageGroups(String classifier)
GET /errors/last/{failedMessageId:required:minlength(1)} => ServiceControl.MessageFailures.Api.GetErrorByIdController:ErrorLastBy(String failedMessageId)
POST /errors/queues/{queueAddress:required:minlength(1)}/retry => ServiceControl.MessageFailures.Api.RetryMessagesController:RetryAllBy(String queueAddress)
GET /errors/queues/addresses => ServiceControl.MessageFailures.Api.QueueAddressController:GetAddresses(PagingInfo pagingInfo)
GET /errors/queues/addresses/search/{search} => ServiceControl.MessageFailures.Api.QueueAddressController:GetAddressesBySearchTerm(PagingInfo pagingInfo, String search)
POST /errors/retry => ServiceControl.MessageFailures.Api.RetryMessagesController:RetryAllBy(List<String> messageIds)
POST /errors/retry/all => ServiceControl.MessageFailures.Api.RetryMessagesController:RetryAll()
GET /errors/summary => ServiceControl.MessageFailures.Api.GetAllErrorsController:ErrorsSummary()
PATCH /errors/unarchive => ServiceControl.MessageFailures.Api.UnArchiveMessagesController:Unarchive(List<String> ids)
GET /eventlogitems => ServiceControl.EventLog.EventLogApiController:Items(PagingInfo pagingInfo)
GET /heartbeats/stats => ServiceControl.Monitoring.EndpointsMonitoringController:HeartbeatStats()
GET /instance-info => ServiceControl.Infrastructure.WebApi.RootController:Config()
GET /license => ServiceControl.Licensing.LicenseController:License(Boolean refresh)
GET /messages => ServiceControl.CompositeViews.Messages.GetMessagesController:Messages(PagingInfo pagingInfo, SortInfo sortInfo, Boolean includeSystemMessages)
GET /messages/{*catchAll} => ServiceControl.CompositeViews.Messages.GetMessagesController:CatchAll(String catchAll, String instanceId)
GET /messages/{id}/body => ServiceControl.CompositeViews.Messages.GetMessagesController:Get(String id, String instanceId)
GET /messages/search => ServiceControl.CompositeViews.Messages.GetMessagesController:Search(PagingInfo pagingInfo, SortInfo sortInfo, String q)
GET /messages/search/{keyword} => ServiceControl.CompositeViews.Messages.GetMessagesController:SearchByKeyWord(PagingInfo pagingInfo, SortInfo sortInfo, String keyword)
GET /notifications/email => ServiceControl.Notifications.Api.NotificationsController:GetEmailNotificationsSettings()
POST /notifications/email => ServiceControl.Notifications.Api.NotificationsController:UpdateSettings(UpdateEmailNotificationsSettingsRequest request)
POST /notifications/email/test => ServiceControl.Notifications.Api.NotificationsController:SendTestEmail()
POST /notifications/email/toggle => ServiceControl.Notifications.Api.NotificationsController:ToggleEmailNotifications(ToggleEmailNotifications request)
PATCH /pendingretries/queues/resolve => ServiceControl.MessageFailures.Api.ResolveMessagesController:ResolveBy(QueueModel queueModel)
POST /pendingretries/queues/retry => ServiceControl.MessageFailures.Api.PendingRetryMessagesController:RetryBy(PendingRetryRequest request)
PATCH /pendingretries/resolve => ServiceControl.MessageFailures.Api.ResolveMessagesController:ResolveBy(UniqueMessageIdsModel request)
POST /pendingretries/retry => ServiceControl.MessageFailures.Api.PendingRetryMessagesController:RetryBy(String[] ids)
GET /recoverability/classifiers => ServiceControl.Recoverability.API.FailureGroupsController:GetSupportedClassifiers()
GET /recoverability/groups/{classifier?} => ServiceControl.Recoverability.API.FailureGroupsController:GetAllGroups(String classifier, String classifierFilter)
DELETE /recoverability/groups/{groupId:required:minlength(1)}/comment => ServiceControl.Recoverability.API.FailureGroupsController:DeleteComment(String groupId)
POST /recoverability/groups/{groupId:required:minlength(1)}/comment => ServiceControl.Recoverability.API.FailureGroupsController:EditComment(String groupId, String comment)
GET /recoverability/groups/{groupId:required:minlength(1)}/errors => ServiceControl.Recoverability.API.FailureGroupsController:GetGroupErrors(String groupId, SortInfo sortInfo, PagingInfo pagingInfo, String status, String modified)
HEAD /recoverability/groups/{groupId:required:minlength(1)}/errors => ServiceControl.Recoverability.API.FailureGroupsController:GetGroupErrorsCount(String groupId, String status, String modified)
POST /recoverability/groups/{groupId:required:minlength(1)}/errors/archive => ServiceControl.Recoverability.API.FailureGroupsArchiveController:ArchiveGroupErrors(String groupId)
POST /recoverability/groups/{groupId:required:minlength(1)}/errors/retry => ServiceControl.Recoverability.API.FailureGroupsRetryController:ArchiveGroupErrors(String groupId)
POST /recoverability/groups/{groupId:required:minlength(1)}/errors/unarchive => ServiceControl.Recoverability.API.FailureGroupsUnarchiveController:UnarchiveGroupErrors(String groupId)
GET /recoverability/groups/id/{groupId:required:minlength(1)} => ServiceControl.Recoverability.API.FailureGroupsController:GetGroup(String groupId, String status, String modified)
GET /recoverability/history => ServiceControl.Recoverability.API.FailureGroupsController:GetRetryHistory()
DELETE /recoverability/unacknowledgedgroups/{groupId:required:minlength(1)} => ServiceControl.Recoverability.API.UnacknowledgedGroupsController:AcknowledgeOperation(String groupId)
HEAD /redirect => ServiceControl.MessageRedirects.Api.MessageRedirectsController:CountRedirects()
GET /redirects => ServiceControl.MessageRedirects.Api.MessageRedirectsController:Redirects(String sort, String direction, PagingInfo pagingInfo)
POST /redirects => ServiceControl.MessageRedirects.Api.MessageRedirectsController:NewRedirects(MessageRedirectRequest request)
DELETE /redirects/{messageredirectid:guid} => ServiceControl.MessageRedirects.Api.MessageRedirectsController:DeleteRedirect(Guid messageRedirectId)
PUT /redirects/{messageredirectid:guid} => ServiceControl.MessageRedirects.Api.MessageRedirectsController:UpdateRedirect(Guid messageRedirectId, MessageRedirectRequest request)
GET /sagas/{id} => ServiceControl.SagaAudit.SagasController:Sagas(PagingInfo pagingInfo, Guid id)
