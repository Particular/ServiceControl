public class static EtagHelper
{
    public static string CalculateEtag(System.Collections.Generic.IEnumerable<GroupOperation> groups) { }
}
public class GroupOperation
{
    public GroupOperation() { }
    public int Count { get; set; }
    public System.Nullable<System.DateTime> First { get; set; }
    public string Id { get; set; }
    public System.Nullable<System.DateTime> Last { get; set; }
    public bool NeedUserAcknowledgement { get; set; }
    public System.Nullable<System.DateTime> OperationCompletionTime { get; set; }
    public System.Nullable<bool> OperationFailed { get; set; }
    public System.Nullable<int> OperationMessagesCompletedCount { get; set; }
    public double OperationProgress { get; set; }
    public System.Nullable<int> OperationRemainingCount { get; set; }
    public System.Nullable<System.DateTime> OperationStartTime { get; set; }
    public string OperationStatus { get; set; }
    public string Title { get; set; }
    public string Type { get; set; }
}
namespace Particular.ServiceControl
{
    public class Bootstrapper
    {
        public System.IDisposable WebApp;
        public Bootstrapper(System.Action<NServiceBus.ICriticalErrorContext> onCriticalError, ServiceBus.Management.Infrastructure.Settings.Settings settings, NServiceBus.EndpointConfiguration configuration, ServiceBus.Management.Infrastructure.Settings.LoggingSettings loggingSettings) { }
        public System.Func<System.Net.Http.HttpClient> HttpClientFactory { get; set; }
        public ServiceBus.Management.Infrastructure.OWIN.Startup Startup { get; }
        public System.Threading.Tasks.Task<ServiceBus.Management.Infrastructure.BusInstance> Start(bool isRunningAcceptanceTests = False) { }
        public System.Threading.Tasks.Task Stop() { }
    }
    public class DatabaseMigrationsBootstrapper
    {
        public DatabaseMigrationsBootstrapper() { }
        public void Run(ServiceBus.Management.Infrastructure.Settings.Settings settings) { }
    }
    public class static LoggingConfigurator
    {
        public static void ConfigureLogging(ServiceBus.Management.Infrastructure.Settings.LoggingSettings loggingSettings) { }
    }
    public class MaintenanceBootstrapper
    {
        public MaintenanceBootstrapper() { }
        public void Run(Particular.ServiceControl.Hosting.HostArguments args) { }
    }
    public class Program
    {
        public Program() { }
    }
    public class SetupBootstrapper
    {
        public SetupBootstrapper(ServiceBus.Management.Infrastructure.Settings.Settings settings) { }
        public void Run(string username) { }
    }
}
namespace Particular.ServiceControl.DbMigrations
{
    public interface IMigration
    {
        string MigrationId { get; }
        string Apply(Raven.Client.IDocumentStore store);
    }
    public class Migrations
    {
        public const string DocumentId = "Settings/Migrations";
        public Migrations() { }
        public System.Collections.Generic.List<Particular.ServiceControl.DbMigrations.Migrations.Migration> AppliedMigrations { get; set; }
        public void Add(string migrationId, string report) { }
        public class Migration
        {
            public Migration() { }
            public System.DateTime DateApplied { get; set; }
            public string MigrationId { get; set; }
            public string Report { get; set; }
        }
    }
    public class MigrationsManager
    {
        public MigrationsManager(Raven.Client.IDocumentStore store, Particular.ServiceControl.DbMigrations.IMigration[] migrations) { }
        public void ApplyMigrations() { }
    }
    public class MigrationsModule : Autofac.Module
    {
        public MigrationsModule() { }
        protected override void Load(Autofac.ContainerBuilder builder) { }
    }
    public class RerunClassifiersMigration : Particular.ServiceControl.DbMigrations.IMigration
    {
        public RerunClassifiersMigration() { }
        public string MigrationId { get; }
        public string Apply(Raven.Client.IDocumentStore store) { }
    }
    public class RerunClassifiersMigration_1_41_3 : Particular.ServiceControl.DbMigrations.IMigration
    {
        public RerunClassifiersMigration_1_41_3(System.Collections.Generic.IEnumerable<ServiceControl.Recoverability.IFailureClassifier> classifiers) { }
        public string MigrationId { get; }
        public string Apply(Raven.Client.IDocumentStore store) { }
    }
    public class SplitFailedMessageDocumentsMigration : Particular.ServiceControl.DbMigrations.IMigration
    {
        public const string GroupPrefixFormat = "Issue 842 - {0} - ";
        public const string OriginalStatusHeader = "CollapsedSubscribers.OriginalStatus";
        public const int PageSize = 1024;
        public const string SplitFromUniqueMessageIdHeader = "CollapsedSubscribers.SplitFromUniqueMessageId";
        public SplitFailedMessageDocumentsMigration(ServiceControl.Recoverability.IFailureClassifier[] classifiers) { }
        public string MigrationId { get; }
        public string Apply(Raven.Client.IDocumentStore store) { }
    }
}
namespace Particular.ServiceControl.Hosting
{
    public class Host : System.ServiceProcess.ServiceBase
    {
        public Host() { }
        protected override void Dispose(bool disposing) { }
        protected override void OnStart(string[] args) { }
        protected override void OnStop() { }
        public void Run(bool interactive) { }
    }
    public class HostArguments
    {
        public HostArguments(string[] args) { }
        public System.Collections.Generic.List<System.Type> Commands { get; }
        public bool Help { get; set; }
        public bool Portable { get; set; }
        public string ServiceName { get; set; }
        public bool SkipQueueCreation { get; set; }
        public string Username { get; set; }
        public void PrintUsage() { }
    }
    public class MaintenanceHost : System.ServiceProcess.ServiceBase
    {
        public MaintenanceHost(ServiceBus.Management.Infrastructure.Settings.Settings settings, Raven.Client.Embedded.EmbeddableDocumentStore documentStore) { }
        protected override void Dispose(bool disposing) { }
        protected override void OnStart(string[] args) { }
        protected override void OnStop() { }
        public void Run() { }
    }
    public abstract class Option
    {
        protected Option(string prototype, string description) { }
        protected Option(string prototype, string description, int maxValueCount) { }
        public string Description { get; }
        public int MaxValueCount { get; }
        public Particular.ServiceControl.Hosting.OptionValueType OptionValueType { get; }
        public string Prototype { get; }
        public string[] GetNames() { }
        public string[] GetValueSeparators() { }
        public void Invoke(Particular.ServiceControl.Hosting.OptionContext c) { }
        protected abstract void OnParseComplete(Particular.ServiceControl.Hosting.OptionContext c);
        protected static T Parse<T>(string value, Particular.ServiceControl.Hosting.OptionContext c) { }
        public override string ToString() { }
    }
    public delegate void OptionAction<TKey, TValue>(TKey key, TValue value);
    public class OptionContext
    {
        public OptionContext(Particular.ServiceControl.Hosting.OptionSet set) { }
        public Particular.ServiceControl.Hosting.Option Option { get; set; }
        public int OptionIndex { get; set; }
        public string OptionName { get; set; }
        public Particular.ServiceControl.Hosting.OptionSet OptionSet { get; }
        public Particular.ServiceControl.Hosting.OptionValueCollection OptionValues { get; }
    }
    public class OptionException : System.Exception
    {
        public OptionException() { }
        public OptionException(string message, string optionName) { }
        public OptionException(string message, string optionName, System.Exception innerException) { }
        protected OptionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public string OptionName { get; }
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    public class OptionSet : System.Collections.ObjectModel.KeyedCollection<string, Particular.ServiceControl.Hosting.Option>
    {
        public OptionSet() { }
        public OptionSet(System.Converter<string, string> localizer) { }
        public System.Converter<string, string> MessageLocalizer { get; }
        public Particular.ServiceControl.Hosting.OptionSet Add(Particular.ServiceControl.Hosting.Option option) { }
        public Particular.ServiceControl.Hosting.OptionSet Add(string prototype, System.Action<string> action) { }
        public Particular.ServiceControl.Hosting.OptionSet Add(string prototype, string description, System.Action<string> action) { }
        public Particular.ServiceControl.Hosting.OptionSet Add(string prototype, Particular.ServiceControl.Hosting.OptionAction<string, string> action) { }
        public Particular.ServiceControl.Hosting.OptionSet Add(string prototype, string description, Particular.ServiceControl.Hosting.OptionAction<string, string> action) { }
        public Particular.ServiceControl.Hosting.OptionSet Add<T>(string prototype, System.Action<T> action) { }
        public Particular.ServiceControl.Hosting.OptionSet Add<T>(string prototype, string description, System.Action<T> action) { }
        public Particular.ServiceControl.Hosting.OptionSet Add<TKey, TValue>(string prototype, Particular.ServiceControl.Hosting.OptionAction<TKey, TValue> action) { }
        public Particular.ServiceControl.Hosting.OptionSet Add<TKey, TValue>(string prototype, string description, Particular.ServiceControl.Hosting.OptionAction<TKey, TValue> action) { }
        protected virtual Particular.ServiceControl.Hosting.OptionContext CreateOptionContext() { }
        protected override string GetKeyForItem(Particular.ServiceControl.Hosting.Option item) { }
        [System.ObsoleteAttribute("Use KeyedCollection.this[string]")]
        protected Particular.ServiceControl.Hosting.Option GetOptionForName(string option) { }
        protected bool GetOptionParts(string argument, out string flag, out string name, out string sep, out string value) { }
        protected override void InsertItem(int index, Particular.ServiceControl.Hosting.Option item) { }
        public System.Collections.Generic.List<string> Parse(System.Collections.Generic.IEnumerable<string> arguments) { }
        protected virtual bool Parse(string argument, Particular.ServiceControl.Hosting.OptionContext c) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, Particular.ServiceControl.Hosting.Option item) { }
        public void WriteOptionDescriptions(System.IO.TextWriter o) { }
    }
    public class OptionValueCollection : System.Collections.Generic.ICollection<string>, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IList<string>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public int Count { get; }
        public bool IsReadOnly { get; }
        public string this[int index] { get; set; }
        public void Add(string item) { }
        public void Clear() { }
        public bool Contains(string item) { }
        public void CopyTo(string[] array, int arrayIndex) { }
        public System.Collections.Generic.IEnumerator<string> GetEnumerator() { }
        public int IndexOf(string item) { }
        public void Insert(int index, string item) { }
        public bool Remove(string item) { }
        public void RemoveAt(int index) { }
        public string[] ToArray() { }
        public System.Collections.Generic.List<string> ToList() { }
        public override string ToString() { }
    }
    public enum OptionValueType
    {
        None = 0,
        Optional = 1,
        Required = 2,
    }
}
namespace Particular.ServiceControl.Licensing
{
    public class ActiveLicense
    {
        public ActiveLicense() { }
        public bool IsValid { get; set; }
        public void Refresh() { }
    }
}
namespace Particular.ServiceControl.Upgrade
{
    public class StaleIndexAfterUpgrade : NServiceBus.Features.Feature
    {
        public StaleIndexAfterUpgrade() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
        public class CheckerTask : NServiceBus.Features.FeatureStartupTask
        {
            public CheckerTask(Particular.ServiceControl.Upgrade.StaleIndexChecker staleIndexChecker, Particular.ServiceControl.Upgrade.StaleIndexInfoStore staleIndexInfoStore, ServiceBus.Management.Infrastructure.Settings.LoggingSettings loggingSettings) { }
            protected CheckerTask(Particular.ServiceControl.Upgrade.StaleIndexChecker staleIndexChecker, Particular.ServiceControl.Upgrade.StaleIndexInfoStore staleIndexInfoStore, ServiceBus.Management.Infrastructure.Settings.LoggingSettings loggingSettings, string baseDirectory) { }
            protected override System.Threading.Tasks.Task OnStart(NServiceBus.IMessageSession session) { }
            protected override System.Threading.Tasks.Task OnStop(NServiceBus.IMessageSession session) { }
        }
    }
    public class StaleIndexChecker
    {
        public StaleIndexChecker(Raven.Client.IDocumentStore store) { }
        public virtual System.Threading.Tasks.Task<bool> IsReindexingInComplete(System.DateTime cutOffTime, System.Threading.CancellationToken cancellationToken) { }
    }
    public struct StaleIndexInfo
    {
        public bool InProgress;
        public System.Nullable<System.DateTime> StartedAt;
    }
    public class StaleIndexInfoStore
    {
        public static readonly Particular.ServiceControl.Upgrade.StaleIndexInfo NotInProgress;
        public StaleIndexInfoStore() { }
        public Particular.ServiceControl.Upgrade.StaleIndexInfo Get() { }
        public void Store(Particular.ServiceControl.Upgrade.StaleIndexInfo info) { }
    }
    public class UpgradeModuleApi : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public UpgradeModuleApi() { }
        public Particular.ServiceControl.Upgrade.StaleIndexInfoStore InfoStore { get; set; }
    }
}
namespace ServiceBus.Management.Infrastructure
{
    public class BusInstance
    {
        public BusInstance(NServiceBus.IEndpointInstance bus, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents, ServiceControl.Operations.ImportFailedAudits importFailedAudits) { }
        public NServiceBus.IEndpointInstance Bus { get; }
        public ServiceControl.Infrastructure.DomainEvents.IDomainEvents DomainEvents { get; }
        public ServiceControl.Operations.ImportFailedAudits ImportFailedAudits { get; }
        public System.Threading.Tasks.Task Stop() { }
    }
    public class static NServiceBusFactory
    {
        public static System.Threading.Tasks.Task<NServiceBus.IStartableEndpoint> Create(ServiceBus.Management.Infrastructure.Settings.Settings settings, ServiceControl.Transports.TransportCustomization transportCustomization, ServiceControl.Transports.TransportSettings transportSettings, ServiceBus.Management.Infrastructure.Settings.LoggingSettings loggingSettings, Autofac.IContainer container, System.Action<NServiceBus.ICriticalErrorContext> onCriticalError, Raven.Client.IDocumentStore documentStore, NServiceBus.EndpointConfiguration configuration, bool isRunningAcceptanceTests) { }
        public static System.Threading.Tasks.Task<ServiceBus.Management.Infrastructure.BusInstance> CreateAndStart(ServiceBus.Management.Infrastructure.Settings.Settings settings, ServiceControl.Transports.TransportCustomization transportCustomization, ServiceControl.Transports.TransportSettings transportSettings, ServiceBus.Management.Infrastructure.Settings.LoggingSettings loggingSettings, Autofac.IContainer container, System.Action<NServiceBus.ICriticalErrorContext> onCriticalError, Raven.Client.IDocumentStore documentStore, NServiceBus.EndpointConfiguration configuration, bool isRunningAcceptanceTests) { }
    }
}
namespace ServiceBus.Management.Infrastructure.Extensions
{
    public class static NegotiatorExtensions
    {
        public static Nancy.Responses.Negotiation.Negotiator WithDeterministicEtag(this Nancy.Responses.Negotiation.Negotiator negotiator, string data) { }
        public static Nancy.Responses.Negotiation.Negotiator WithEtag(this Nancy.Responses.Negotiation.Negotiator negotiator, Raven.Client.RavenQueryStatistics stats) { }
        public static Nancy.Responses.Negotiation.Negotiator WithEtag(this Nancy.Responses.Negotiation.Negotiator negotiator, string etag) { }
        public static Nancy.Responses.Negotiation.Negotiator WithEtag(this Nancy.Responses.Negotiation.Negotiator negotiator, Raven.Abstractions.Data.Etag etag) { }
        public static Nancy.Responses.Negotiation.Negotiator WithPagingLinks(this Nancy.Responses.Negotiation.Negotiator negotiator, int totalResults, Nancy.Request request) { }
        public static Nancy.Responses.Negotiation.Negotiator WithPagingLinks(this Nancy.Responses.Negotiation.Negotiator negotiator, int totalResults, int highestTotalCountOfAllInstances, Nancy.Request request) { }
        public static Nancy.Responses.Negotiation.Negotiator WithPagingLinksAndTotalCount(this Nancy.Responses.Negotiation.Negotiator negotiator, Raven.Client.RavenQueryStatistics stats, Nancy.Request request) { }
        public static Nancy.Responses.Negotiation.Negotiator WithPagingLinksAndTotalCount(this Nancy.Responses.Negotiation.Negotiator negotiator, int totalCount, int highestTotalCountOfAllInstances, Nancy.Request request) { }
        public static Nancy.Responses.Negotiation.Negotiator WithPagingLinksAndTotalCount(this Nancy.Responses.Negotiation.Negotiator negotiator, int totalCount, Nancy.Request request) { }
        public static Nancy.Responses.Negotiation.Negotiator WithQueryResult(this Nancy.Responses.Negotiation.Negotiator negotiator, ServiceControl.CompositeViews.Messages.QueryResult queryResult, Nancy.Request request) { }
        public static Nancy.Responses.Negotiation.Negotiator WithTotalCount(this Nancy.Responses.Negotiation.Negotiator negotiator, int total) { }
    }
}
namespace ServiceBus.Management.Infrastructure.Installers
{
    public class AuditLoqQueue : NServiceBus.Features.Feature
    {
        public AuditLoqQueue() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class CreateEventSource : NServiceBus.Installation.INeedToInstallSomething
    {
        public const string SourceName = "ServiceControl";
        public CreateEventSource() { }
        public System.Threading.Tasks.Task Install(string identity) { }
    }
    public class ErrorLoqQueue : NServiceBus.Features.Feature
    {
        public ErrorLoqQueue() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
}
namespace ServiceBus.Management.Infrastructure.Nancy
{
    public class static ExtraHeaders
    {
        public static void Add(Nancy.NancyContext context) { }
    }
    public class JsonNetBodyDeserializer : Nancy.ModelBinding.IBodyDeserializer
    {
        public JsonNetBodyDeserializer() { }
        public JsonNetBodyDeserializer(Newtonsoft.Json.JsonSerializer serializer) { }
        public bool CanDeserialize(string contentType, Nancy.ModelBinding.BindingContext context) { }
        public object Deserialize(string contentType, System.IO.Stream bodyStream, Nancy.ModelBinding.BindingContext context) { }
    }
    public class JsonNetSerializer : Nancy.ISerializer
    {
        public JsonNetSerializer() { }
        public JsonNetSerializer(Newtonsoft.Json.JsonSerializer serializer) { }
        public System.Collections.Generic.IEnumerable<string> Extensions { get; }
        public bool CanSerialize(string contentType) { }
        public static Newtonsoft.Json.JsonSerializerSettings CreateDefault() { }
        public void Serialize<TModel>(string contentType, TModel model, System.IO.Stream outputStream) { }
    }
    public class static NancyCompressionExtension
    {
        public static void CheckForCompression(Nancy.NancyContext context) { }
    }
    public class NotFoundOverride : Nancy.ErrorHandling.IStatusCodeHandler
    {
        public NotFoundOverride() { }
        public void Handle(Nancy.HttpStatusCode statusCode, Nancy.NancyContext context) { }
        public bool HandlesStatusCode(Nancy.HttpStatusCode statusCode, Nancy.NancyContext context) { }
    }
    public class static NotModifiedStatusExtension
    {
        public static void Check(Nancy.NancyContext context) { }
    }
    public class NServiceBusContainerBootstrapper : Nancy.Bootstrappers.Autofac.AutofacNancyBootstrapper
    {
        public NServiceBusContainerBootstrapper(Autofac.IContainer container) { }
        protected override Nancy.Diagnostics.DiagnosticsConfiguration DiagnosticsConfiguration { get; }
        protected override Nancy.Bootstrapper.NancyInternalConfiguration InternalConfiguration { get; }
        protected override void ApplicationStartup(Autofac.ILifetimeScope container, Nancy.Bootstrapper.IPipelines pipelines) { }
        protected override Autofac.ILifetimeScope GetApplicationContainer() { }
        protected override Nancy.INancyModule GetModule(Autofac.ILifetimeScope container, System.Type moduleType) { }
        protected override void RegisterRequestContainerModules(Autofac.ILifetimeScope container, System.Collections.Generic.IEnumerable<Nancy.Bootstrapper.ModuleRegistration> moduleRegistrationTypes) { }
    }
    public class StringListBinder : Nancy.ModelBinding.IBinder, Nancy.ModelBinding.IModelBinder
    {
        public StringListBinder(System.Collections.Generic.IEnumerable<Nancy.ModelBinding.IBodyDeserializer> bodyDeserializers, Nancy.ModelBinding.IFieldNameConverter fieldNameConverter, Nancy.ModelBinding.BindingDefaults defaults, System.Collections.Generic.IEnumerable<Nancy.ModelBinding.ITypeConverter> typeConverters) { }
        public object Bind(Nancy.NancyContext context, System.Type modelType, object instance, Nancy.ModelBinding.BindingConfig configuration, params string[] blackList) { }
        public bool CanBind(System.Type modelType) { }
    }
    public class static VersionExtension
    {
        public static void Add(Nancy.NancyContext context) { }
    }
}
namespace ServiceBus.Management.Infrastructure.Nancy.Modules
{
    public abstract class BaseModule : Nancy.NancyModule
    {
        protected BaseModule() { }
        protected string BaseUrl { get; }
        public new Nancy.Responses.Negotiation.Negotiator Negotiate { get; }
        public ServiceBus.Management.Infrastructure.Settings.Settings Settings { get; set; }
        public Raven.Client.IDocumentStore Store { get; set; }
    }
    public class RootModule : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public RootModule() { }
        public Particular.ServiceControl.Licensing.ActiveLicense License { get; set; }
        public ServiceBus.Management.Infrastructure.Settings.LoggingSettings LoggingSettings { get; set; }
        public class RootUrls
        {
            public RootUrls() { }
            public string Configuration { get; set; }
            public string Description { get; set; }
            public string EndpointsErrorUrl { get; set; }
            public string EndpointsMessageSearchUrl { get; set; }
            public string EndpointsMessagesUrl { get; set; }
            public string EndpointsUrl { get; set; }
            public string ErrorsUrl { get; set; }
            public string KnownEndpointsUrl { get; set; }
            public string LicenseDetails { get; set; }
            public string LicenseStatus { get; set; }
            public string MessageSearchUrl { get; set; }
            public string Name { get; set; }
            public string SagasUrl { get; set; }
        }
    }
}
namespace ServiceBus.Management.Infrastructure.OWIN
{
    public class Startup
    {
        public Startup(Autofac.IContainer container) { }
        public void Configuration(Owin.IAppBuilder app) { }
    }
}
namespace ServiceBus.Management.Infrastructure.Settings
{
    public class static ConfigFileSettingsReader<T>
    {
        public static T Read(string name, T defaultValue = null) { }
        public static T Read(string root, string name, T defaultValue = null) { }
        public static bool TryRead(string root, string name, out T value) { }
    }
    public class LoggingSettings
    {
        public LoggingSettings(string serviceName, NLog.LogLevel defaultLevel = null, NLog.LogLevel defaultRavenDBLevel = null, string logPath = null) { }
        public NLog.LogLevel LoggingLevel { get; }
        public string LogPath { get; }
        public NLog.LogLevel RavenDBLogLevel { get; }
    }
    public class NullableSettingsReader<T>
        where T :  struct
    {
        public NullableSettingsReader() { }
        public static System.Nullable<T> Read(string name) { }
        public static System.Nullable<T> Read(string root, string name, System.Nullable<T> defaultValue) { }
    }
    public class RemoteInstanceSetting
    {
        public RemoteInstanceSetting() { }
        public string ApiUri { get; set; }
        public string QueueAddress { get; set; }
    }
    public class Settings
    {
        public const string DEFAULT_SERVICE_NAME = "Particular.ServiceControl";
        public const string Disabled = "!disable";
        public Settings(string serviceName = null) { }
        public string ApiUrl { get; }
        public string AuditLogQueue { get; set; }
        public string AuditQueue { get; set; }
        public System.TimeSpan AuditRetentionPeriod { get; }
        public int DatabaseMaintenancePort { get; set; }
        public string DatabaseMaintenanceUrl { get; }
        public string DbPath { get; set; }
        public bool DisableRavenDBPerformanceCounters { get; set; }
        public string ErrorLogQueue { get; set; }
        public string ErrorQueue { get; set; }
        public System.TimeSpan ErrorRetentionPeriod { get; }
        public System.TimeSpan EventsRetentionPeriod { get; }
        public int ExpirationProcessBatchSize { get; }
        public int ExpirationProcessTimerInSeconds { get; }
        public bool ExposeRavenDB { get; }
        public int ExternalIntegrationsDispatchingBatchSize { get; }
        public bool ForwardAuditMessages { get; set; }
        public bool ForwardErrorMessages { get; set; }
        public System.TimeSpan HeartbeatGracePeriod { get; }
        public string Hostname { get; }
        public int HttpDefaultConnectionLimit { get; set; }
        public bool IngestAuditMessages { get; set; }
        public bool IngestErrorMessages { get; set; }
        public int MaxBodySizeToStore { get; set; }
        public int MaximumConcurrencyLevel { get; set; }
        public System.Func<string, System.Collections.Generic.Dictionary<string, string>, byte[], System.Func<System.Threading.Tasks.Task>, System.Threading.Tasks.Task> OnMessage { get; set; }
        public int Port { get; set; }
        public System.TimeSpan ProcessRetryBatchesFrequency { get; set; }
        public ServiceBus.Management.Infrastructure.Settings.RemoteInstanceSetting[] RemoteInstances { get; set; }
        public int RetryHistoryDepth { get; set; }
        public string RootUrl { get; }
        public bool RunInMemory { get; set; }
        public string ServiceName { get; }
        public bool SkipQueueCreation { get; set; }
        public string StorageUrl { get; }
        public string TransportConnectionString { get; set; }
        public string TransportCustomizationType { get; set; }
        public bool ValidateConfiguration { get; }
        public string VirtualDirectory { get; }
        public ServiceControl.Transports.TransportCustomization LoadTransportCustomization() { }
    }
    public class SettingsReader<T>
    {
        public SettingsReader() { }
        public static T Read(string name, T defaultValue = null) { }
        public static T Read(string root, string name, T defaultValue = null) { }
    }
}
namespace ServiceControl.CompositeViews.Endpoints
{
    public class DisableEndpointMonitoring : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public DisableEndpointMonitoring() { }
        public System.Guid EndpointId { get; set; }
    }
    public class EnableEndpointMonitoring : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public EnableEndpointMonitoring() { }
        public System.Guid EndpointId { get; set; }
    }
    public class EndpointsView
    {
        public EndpointsView() { }
        public ServiceControl.CompositeViews.Endpoints.HeartbeatInformation HeartbeatInformation { get; set; }
        public string HostDisplayName { get; set; }
        public System.Guid Id { get; set; }
        public bool IsSendingHeartbeats { get; set; }
        public string LicenseStatus { get; set; }
        public bool Monitored { get; set; }
        public bool MonitorHeartbeat { get; set; }
        public string Name { get; set; }
    }
    public class GetKnownEndpointsApi : ServiceControl.CompositeViews.Messages.ScatterGatherApi<ServiceControl.CompositeViews.Messages.NoInput, System.Collections.Generic.List<ServiceControl.CompositeViews.Endpoints.KnownEndpointsView>>
    {
        public GetKnownEndpointsApi() { }
        public ServiceControl.Monitoring.EndpointInstanceMonitoring EndpointInstanceMonitoring { get; set; }
        protected override ServiceControl.CompositeViews.Messages.QueryStatsInfo AggregateStats(System.Collections.Generic.IEnumerable<ServiceControl.CompositeViews.Messages.QueryResult<System.Collections.Generic.List<ServiceControl.CompositeViews.Endpoints.KnownEndpointsView>>> results, System.Collections.Generic.List<ServiceControl.CompositeViews.Endpoints.KnownEndpointsView> processedResults) { }
        public override System.Threading.Tasks.Task<ServiceControl.CompositeViews.Messages.QueryResult<System.Collections.Generic.List<ServiceControl.CompositeViews.Endpoints.KnownEndpointsView>>> LocalQuery(Nancy.Request request, ServiceControl.CompositeViews.Messages.NoInput input) { }
        protected override System.Collections.Generic.List<ServiceControl.CompositeViews.Endpoints.KnownEndpointsView> ProcessResults(Nancy.Request request, ServiceControl.CompositeViews.Messages.QueryResult<>[] results) { }
    }
    public class HeartbeatInformation
    {
        public HeartbeatInformation() { }
        public System.DateTime LastReportAt { get; set; }
        public ServiceControl.HeartbeatMonitoring.Status ReportedStatus { get; set; }
    }
    public class KnownEndpointIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.EndpointControl.KnownEndpoint>
    {
        public KnownEndpointIndex() { }
    }
    public class KnownEndpointsView
    {
        public KnownEndpointsView() { }
        public ServiceControl.Contracts.Operations.EndpointDetails EndpointDetails { get; set; }
        public string HostDisplayName { get; set; }
        public System.Guid Id { get; set; }
    }
}
namespace ServiceControl.CompositeViews.Messages
{
    public class ApisModule : Autofac.Module
    {
        public ApisModule() { }
        protected override void Load(Autofac.ContainerBuilder builder) { }
    }
    public class GetAllMessagesApi : ServiceControl.CompositeViews.Messages.ScatterGatherApiMessageView<ServiceControl.CompositeViews.Messages.NoInput>
    {
        public GetAllMessagesApi() { }
        public override System.Threading.Tasks.Task<ServiceControl.CompositeViews.Messages.QueryResult<System.Collections.Generic.List<ServiceControl.CompositeViews.Messages.MessagesView>>> LocalQuery(Nancy.Request request, ServiceControl.CompositeViews.Messages.NoInput input) { }
    }
    public class GetAllMessagesForEndpointApi : ServiceControl.CompositeViews.Messages.ScatterGatherApiMessageView<string>
    {
        public GetAllMessagesForEndpointApi() { }
        public override System.Threading.Tasks.Task<ServiceControl.CompositeViews.Messages.QueryResult<System.Collections.Generic.List<ServiceControl.CompositeViews.Messages.MessagesView>>> LocalQuery(Nancy.Request request, string input) { }
    }
    public class GetMessages : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public GetMessages() { }
        public ServiceControl.CompositeViews.Messages.GetAllMessagesApi GetAllMessagesApi { get; set; }
        public ServiceControl.CompositeViews.Messages.GetAllMessagesForEndpointApi GetAllMessagesForEndpointApi { get; set; }
    }
    public class GetMessagesByConversation : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public GetMessagesByConversation() { }
        public ServiceControl.CompositeViews.Messages.MessagesByConversationApi MessagesByConversationApi { get; set; }
    }
    public class GetMessagesByQuery : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public GetMessagesByQuery() { }
        public ServiceControl.CompositeViews.Messages.SearchApi SearchApi { get; set; }
        public ServiceControl.CompositeViews.Messages.SearchEndpointApi SearchEndpointApi { get; set; }
    }
    public interface IApi { }
    public class MessagesBodyTransformer : Raven.Client.Indexes.AbstractTransformerCreationTask<ServiceControl.CompositeViews.Messages.MessagesViewTransformer.Result>
    {
        public MessagesBodyTransformer() { }
        public class Result
        {
            public Result() { }
            public string Body { get; set; }
            public bool BodyNotStored { get; set; }
            public int BodySize { get; set; }
            public string ContentType { get; set; }
            public string MessageId { get; set; }
        }
    }
    public class MessagesByConversationApi : ServiceControl.CompositeViews.Messages.ScatterGatherApiMessageView<string>
    {
        public MessagesByConversationApi() { }
        public override System.Threading.Tasks.Task<ServiceControl.CompositeViews.Messages.QueryResult<System.Collections.Generic.List<ServiceControl.CompositeViews.Messages.MessagesView>>> LocalQuery(Nancy.Request request, string input) { }
    }
    public class MessagesView
    {
        public MessagesView() { }
        public int BodySize { get; set; }
        public string BodyUrl { get; set; }
        public string ConversationId { get; set; }
        public System.TimeSpan CriticalTime { get; set; }
        public System.TimeSpan DeliveryTime { get; set; }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> Headers { get; set; }
        public string Id { get; set; }
        public string InstanceId { get; set; }
        public System.Collections.Generic.List<ServiceControl.SagaAudit.SagaInfo> InvokedSagas { get; set; }
        public bool IsSystemMessage { get; set; }
        public string MessageId { get; set; }
        public NServiceBus.MessageIntentEnum MessageIntent { get; set; }
        public string MessageType { get; set; }
        public ServiceControl.SagaAudit.SagaInfo OriginatesFromSaga { get; set; }
        public System.DateTime ProcessedAt { get; set; }
        public System.TimeSpan ProcessingTime { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails ReceivingEndpoint { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails SendingEndpoint { get; set; }
        public ServiceControl.Contracts.Operations.MessageStatus Status { get; set; }
        public System.Nullable<System.DateTime> TimeSent { get; set; }
    }
    public class MessagesViewIndex : Raven.Client.Indexes.AbstractMultiMapIndexCreationTask<ServiceControl.CompositeViews.Messages.MessagesViewIndex.SortAndFilterOptions>
    {
        public MessagesViewIndex() { }
        public class SortAndFilterOptions
        {
            public SortAndFilterOptions() { }
            public string ConversationId { get; set; }
            public System.Nullable<System.TimeSpan> CriticalTime { get; set; }
            public System.Nullable<System.TimeSpan> DeliveryTime { get; set; }
            public bool IsSystemMessage { get; set; }
            public string MessageId { get; set; }
            public string MessageType { get; set; }
            public System.DateTime ProcessedAt { get; set; }
            public System.Nullable<System.TimeSpan> ProcessingTime { get; set; }
            public string[] Query { get; set; }
            public string ReceivingEndpointName { get; set; }
            public ServiceControl.Contracts.Operations.MessageStatus Status { get; set; }
            public System.DateTime TimeSent { get; set; }
        }
    }
    public class MessagesViewTransformer : Raven.Client.Indexes.AbstractTransformerCreationTask<ServiceControl.CompositeViews.Messages.MessagesViewTransformer.Result>
    {
        public MessagesViewTransformer() { }
        public class Result
        {
            public Result() { }
            public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
            public string Id { get; set; }
            public System.Collections.Generic.Dictionary<string, object> MessageMetadata { get; set; }
            public System.DateTime ProcessedAt { get; set; }
            public System.Collections.Generic.List<ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt> ProcessingAttempts { get; set; }
            public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
            public string UniqueMessageId { get; set; }
        }
    }
    public class NoInput
    {
        public static readonly ServiceControl.CompositeViews.Messages.NoInput Instance;
    }
    public class static NoInputExtensions
    {
        [return: System.Runtime.CompilerServices.DynamicAttribute(new bool[] {
                false,
                true})]
        public static System.Threading.Tasks.Task<object> Execute<TOut>(this ServiceControl.CompositeViews.Messages.ScatterGatherApi<ServiceControl.CompositeViews.Messages.NoInput, TOut> api, ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule module)
            where TOut :  class { }
    }
    public class QueryResult
    {
        protected QueryResult(object results, ServiceControl.CompositeViews.Messages.QueryStatsInfo queryStatsInfo) { }
        public object DynamicResults { get; }
        public string InstanceId { get; set; }
        public ServiceControl.CompositeViews.Messages.QueryStatsInfo QueryStats { get; }
    }
    public class QueryResult<TOut> : ServiceControl.CompositeViews.Messages.QueryResult
        where TOut :  class
    {
        public QueryResult(TOut results, ServiceControl.CompositeViews.Messages.QueryStatsInfo queryStatsInfo) { }
        public TOut Results { get; }
        public static ServiceControl.CompositeViews.Messages.QueryResult<TOut> Empty() { }
    }
    public struct QueryStatsInfo
    {
        public readonly string ETag;
        public readonly int HighestTotalCountOfAllTheInstances;
        public readonly int TotalCount;
        public static readonly ServiceControl.CompositeViews.Messages.QueryStatsInfo Zero;
        public QueryStatsInfo(string eTag, int totalCount, System.Nullable<int> highestTotalCountOfAllTheInstances = null) { }
    }
    public class static RequestExtensions
    {
        public static System.Uri RedirectToRemoteUri(this Nancy.Request request, string remoteUri) { }
    }
    public abstract class RoutedApi<TIn> : ServiceControl.CompositeViews.Messages.IApi
    {
        protected RoutedApi() { }
        public System.Func<System.Net.Http.HttpClient> HttpClientFactory { get; set; }
        public ServiceBus.Management.Infrastructure.Settings.Settings Settings { get; set; }
        public System.Threading.Tasks.Task<Nancy.Response> Execute(ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule module, TIn input) { }
        protected virtual string GetInstance(Nancy.Request currentRequest, TIn input) { }
        protected abstract System.Threading.Tasks.Task<Nancy.Response> LocalQuery(Nancy.Request request, TIn input, string instanceId);
    }
    public abstract class ScatterGatherApi<TIn, TOut> : ServiceControl.CompositeViews.Messages.ScatterGatherApiBase, ServiceControl.CompositeViews.Messages.IApi
        where TOut :  class
    {
        protected ScatterGatherApi() { }
        public System.Func<System.Net.Http.HttpClient> HttpClientFactory { get; set; }
        public ServiceBus.Management.Infrastructure.Settings.Settings Settings { get; set; }
        public Raven.Client.IDocumentStore Store { get; set; }
        protected virtual ServiceControl.CompositeViews.Messages.QueryStatsInfo AggregateStats(System.Collections.Generic.IEnumerable<ServiceControl.CompositeViews.Messages.QueryResult<TOut>> results, TOut processedResults) { }
        [return: System.Runtime.CompilerServices.DynamicAttribute(new bool[] {
                false,
                true})]
        public System.Threading.Tasks.Task<object> Execute(ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule module, TIn input) { }
        public abstract System.Threading.Tasks.Task<ServiceControl.CompositeViews.Messages.QueryResult<TOut>> LocalQuery(Nancy.Request request, TIn input);
        protected abstract TOut ProcessResults(Nancy.Request request, ServiceControl.CompositeViews.Messages.QueryResult<>[] results);
    }
    public abstract class ScatterGatherApiBase
    {
        protected static Newtonsoft.Json.JsonSerializer jsonSerializer;
        protected ScatterGatherApiBase() { }
    }
    public abstract class ScatterGatherApiMessageView<TInput> : ServiceControl.CompositeViews.Messages.ScatterGatherApi<TInput, System.Collections.Generic.List<ServiceControl.CompositeViews.Messages.MessagesView>>
    {
        protected ScatterGatherApiMessageView() { }
        protected override System.Collections.Generic.List<ServiceControl.CompositeViews.Messages.MessagesView> ProcessResults(Nancy.Request request, ServiceControl.CompositeViews.Messages.QueryResult<>[] results) { }
    }
    public class SearchApi : ServiceControl.CompositeViews.Messages.ScatterGatherApiMessageView<string>
    {
        public SearchApi() { }
        public override System.Threading.Tasks.Task<ServiceControl.CompositeViews.Messages.QueryResult<System.Collections.Generic.List<ServiceControl.CompositeViews.Messages.MessagesView>>> LocalQuery(Nancy.Request request, string input) { }
    }
    public class SearchEndpointApi : ServiceControl.CompositeViews.Messages.ScatterGatherApiMessageView<ServiceControl.CompositeViews.Messages.SearchEndpointApi.Input>
    {
        public SearchEndpointApi() { }
        public override System.Threading.Tasks.Task<ServiceControl.CompositeViews.Messages.QueryResult<System.Collections.Generic.List<ServiceControl.CompositeViews.Messages.MessagesView>>> LocalQuery(Nancy.Request request, ServiceControl.CompositeViews.Messages.SearchEndpointApi.Input input) { }
        public class Input
        {
            public Input() { }
            public string Endpoint { get; set; }
            public string Keyword { get; set; }
        }
    }
}
namespace ServiceControl.Contracts.CustomChecks
{
    public class CustomCheckFailed : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public CustomCheckFailed() { }
        public string Category { get; set; }
        public string CustomCheckId { get; set; }
        public System.DateTime FailedAt { get; set; }
        public string FailureReason { get; set; }
        public System.Guid Id { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails OriginatingEndpoint { get; set; }
    }
    public class CustomCheckSucceeded : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public CustomCheckSucceeded() { }
        public string Category { get; set; }
        public string CustomCheckId { get; set; }
        public System.Guid Id { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails OriginatingEndpoint { get; set; }
        public System.DateTime SucceededAt { get; set; }
    }
}
namespace ServiceControl.Contracts.EndpointControl
{
    public class EndpointStarted : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public EndpointStarted() { }
        public ServiceControl.Contracts.Operations.EndpointDetails EndpointDetails { get; set; }
        public System.DateTime StartedAt { get; set; }
    }
    public class NewEndpointDetected : NServiceBus.IEvent, NServiceBus.IMessage, ServiceControl.Infrastructure.DomainEvents.IBusEvent, ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public NewEndpointDetected() { }
        public System.DateTime DetectedAt { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails Endpoint { get; set; }
    }
}
namespace ServiceControl.Contracts.EventLog
{
    public class EventLogItemAdded : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public EventLogItemAdded() { }
        public string Category { get; set; }
        public string Description { get; set; }
        public string Id { get; set; }
        public System.DateTime RaisedAt { get; set; }
        public System.Collections.Generic.ICollection<string> RelatedTo { get; set; }
        public ServiceControl.EventLog.Severity Severity { get; set; }
    }
}
namespace ServiceControl.Contracts.HeartbeatMonitoring
{
    public class EndpointFailedToHeartbeat : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public EndpointFailedToHeartbeat() { }
        public System.DateTime DetectedAt { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails Endpoint { get; set; }
        public System.DateTime LastReceivedAt { get; set; }
    }
    public class EndpointHeartbeatRestored : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public EndpointHeartbeatRestored() { }
        public ServiceControl.Contracts.Operations.EndpointDetails Endpoint { get; set; }
        public System.DateTime RestoredAt { get; set; }
    }
    public class HeartbeatingEndpointDetected : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public HeartbeatingEndpointDetected() { }
        public System.DateTime DetectedAt { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails Endpoint { get; set; }
    }
    public class HeartbeatMonitoringDisabled : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public HeartbeatMonitoringDisabled() { }
        public System.Guid EndpointInstanceId { get; set; }
    }
    public class HeartbeatMonitoringEnabled : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public HeartbeatMonitoringEnabled() { }
        public System.Guid EndpointInstanceId { get; set; }
    }
}
namespace ServiceControl.Contracts.MessageFailures
{
    public class FailedMessageArchived : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public FailedMessageArchived() { }
        public string FailedMessageId { get; set; }
    }
    public class FailedMessagesUnArchived : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public FailedMessagesUnArchived() { }
        public int MessagesCount { get; set; }
    }
    public class MessageFailed : NServiceBus.IMessage, ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public MessageFailed() { }
        public string EndpointId { get; set; }
        public string FailedMessageId { get; set; }
        public ServiceControl.Contracts.Operations.FailureDetails FailureDetails { get; set; }
        public bool RepeatedFailure { get; set; }
    }
    public class MessageFailedRepeatedly : NServiceBus.IEvent, NServiceBus.IMessage
    {
        public MessageFailedRepeatedly() { }
        public string EndpointId { get; set; }
        public string FailedMessageId { get; set; }
        public ServiceControl.Contracts.Operations.FailureDetails FailureDetails { get; set; }
        public bool RepeatedFailure { get; set; }
    }
    public class MessageFailureResolvedByRetry : NServiceBus.IEvent, NServiceBus.IMessage, ServiceControl.Infrastructure.DomainEvents.IBusEvent, ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public MessageFailureResolvedByRetry() { }
        public string[] AlternativeFailedMessageIds { get; set; }
        public string FailedMessageId { get; set; }
    }
    public class MessageFailureResolvedManually : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public MessageFailureResolvedManually() { }
        public string FailedMessageId { get; set; }
    }
    public class MessageFailuresUpdated : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public MessageFailuresUpdated() { }
        public int ArchivedTotal { get; set; }
        public System.DateTime RaisedAt { get; set; }
        public int Total { get; set; }
        public int UnresolvedTotal { get; set; }
    }
    public class MessageSubmittedForRetry : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public MessageSubmittedForRetry() { }
        public string FailedMessageId { get; set; }
    }
}
namespace ServiceControl.Contracts.MessageRedirects
{
    public class MessageRedirectChanged : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public MessageRedirectChanged() { }
        public string FromPhysicalAddress { get; set; }
        public System.Guid MessageRedirectId { get; set; }
        public string PreviousToPhysicalAddress { get; set; }
        public string ToPhysicalAddress { get; set; }
    }
    public class MessageRedirectCreated : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public MessageRedirectCreated() { }
        public string FromPhysicalAddress { get; set; }
        public System.Guid MessageRedirectId { get; set; }
        public string ToPhysicalAddress { get; set; }
    }
    public class MessageRedirectRemoved : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public MessageRedirectRemoved() { }
        public string FromPhysicalAddress { get; set; }
        public System.Guid MessageRedirectId { get; set; }
        public string ToPhysicalAddress { get; set; }
    }
}
namespace ServiceControl.Contracts.Operations
{
    public class DefaultEnrichers : NServiceBus.Features.Feature
    {
        public DefaultEnrichers() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class EndpointDetails
    {
        public EndpointDetails() { }
        public string Host { get; set; }
        public System.Guid HostId { get; set; }
        public string Name { get; set; }
    }
    public class EndpointDetailsParser
    {
        public EndpointDetailsParser() { }
        public static ServiceControl.Contracts.Operations.EndpointDetails ReceivingEndpoint(System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
        public static ServiceControl.Contracts.Operations.EndpointDetails SendingEndpoint(System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
    }
    public class EndpointHeartbeatReceived
    {
        public EndpointHeartbeatReceived() { }
        public string Endpoint { get; set; }
        public string Machine { get; set; }
        public System.DateTime SentAt { get; set; }
    }
    public class ExceptionDetails
    {
        public ExceptionDetails() { }
        public string ExceptionType { get; set; }
        public string Message { get; set; }
        public string Source { get; set; }
        public string StackTrace { get; set; }
    }
    public class FailureDetails
    {
        public FailureDetails() { }
        public string AddressOfFailingEndpoint { get; set; }
        public ServiceControl.Contracts.Operations.ExceptionDetails Exception { get; set; }
        public System.DateTime TimeOfFailure { get; set; }
    }
    public enum MessageStatus
    {
        Failed = 1,
        RepeatedFailure = 2,
        Successful = 3,
        ResolvedSuccessfully = 4,
        ArchivedFailure = 5,
    }
}
namespace ServiceControl.CustomChecks
{
    public class CustomCheck
    {
        public CustomCheck() { }
        public string Category { get; set; }
        public string CustomCheckId { get; set; }
        public string FailureReason { get; set; }
        public System.Guid Id { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails OriginatingEndpoint { get; set; }
        public System.DateTime ReportedAt { get; set; }
        public ServiceControl.CustomChecks.Status Status { get; set; }
    }
    public class CustomChecksIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.CustomChecks.CustomCheck>
    {
        public CustomChecksIndex() { }
    }
    public class CustomChecksModule : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public CustomChecksModule() { }
        public NServiceBus.IMessageSession Bus { get; set; }
    }
    public enum Status
    {
        Fail = 0,
        Pass = 1,
    }
}
namespace ServiceControl.EndpointControl.Contracts
{
    public class MonitoringDisabledForEndpoint : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public MonitoringDisabledForEndpoint() { }
        public ServiceControl.Contracts.Operations.EndpointDetails Endpoint { get; set; }
        public System.Guid EndpointInstanceId { get; set; }
    }
    public class MonitoringEnabledForEndpoint : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public MonitoringEnabledForEndpoint() { }
        public ServiceControl.Contracts.Operations.EndpointDetails Endpoint { get; set; }
        public System.Guid EndpointInstanceId { get; set; }
    }
}
namespace ServiceControl.EndpointControl.Handlers
{
    public class EndpointDetectionFeature : NServiceBus.Features.Feature
    {
        public EndpointDetectionFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
}
namespace ServiceControl.EndpointControl.InternalMessages
{
    public class RegisterEndpoint : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RegisterEndpoint() { }
        public System.DateTime DetectedAt { get; set; }
        public bool EnableMonitoring { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails Endpoint { get; set; }
        public System.Guid EndpointInstanceId { get; set; }
    }
}
namespace ServiceControl.EndpointControl
{
    public class KnownEndpoint
    {
        public KnownEndpoint() { }
        public ServiceControl.Contracts.Operations.EndpointDetails EndpointDetails { get; set; }
        public bool HasTemporaryId { get; set; }
        public string HostDisplayName { get; set; }
        public System.Guid Id { get; set; }
        public bool Monitored { get; set; }
    }
}
namespace ServiceControl
{
    public class EndpointInstanceId
    {
        public EndpointInstanceId(string endpointName, string instanceId) { }
        public EndpointInstanceId(string endpointName, string instanceId, string instanceName) { }
        public string EndpointName { get; }
        public string InstanceId { get; }
        public string InstanceName { get; }
        protected bool Equals(ServiceControl.EndpointInstanceId other) { }
        public override bool Equals(object obj) { }
        public static ServiceControl.EndpointInstanceId From(System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
        public override int GetHashCode() { }
    }
    public class static HeaderExtensions
    {
        public static string CorrelationId(this System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
        public static string MessageId(this System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
        public static NServiceBus.MessageIntentEnum MessageIntent(this System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
        public static string ProcessingEndpointName(this System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
        public static string ReplyToAddress(this System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
        public static string UniqueId(this System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
    }
    public class static TypeExtensions
    {
        public static System.Collections.Generic.IEnumerable<System.Type> Implementing<T>(this System.Collections.Generic.IEnumerable<System.Type> types) { }
    }
}
namespace ServiceControl.EventLog
{
    public class AuditEventLogWriter : ServiceControl.Infrastructure.DomainEvents.IDomainHandler<ServiceControl.Infrastructure.DomainEvents.IDomainEvent>
    {
        public AuditEventLogWriter(ServiceControl.Infrastructure.SignalR.GlobalEventHandler broadcaster, Raven.Client.IDocumentStore store, ServiceControl.EventLog.EventLogMappings mappings) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Infrastructure.DomainEvents.IDomainEvent message) { }
    }
    public class EventLogApiModule : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public EventLogApiModule() { }
    }
    public class EventLogItem
    {
        public EventLogItem() { }
        public string Category { get; set; }
        public string Description { get; set; }
        public string EventType { get; set; }
        public string Id { get; set; }
        public System.DateTime RaisedAt { get; set; }
        public System.Collections.Generic.List<string> RelatedTo { get; set; }
        public ServiceControl.EventLog.Severity Severity { get; set; }
    }
    public abstract class EventLogMappingDefinition<T> : ServiceControl.EventLog.IEventLogMappingDefinition
        where T : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        protected EventLogMappingDefinition() { }
        public virtual string Category { get; }
        public ServiceControl.EventLog.EventLogItem Apply(ServiceControl.Infrastructure.DomainEvents.IDomainEvent @event) { }
        protected void Description(System.Func<T, string> description) { }
        protected void RaisedAt(System.Func<T, System.DateTime> raisedAt) { }
        protected void RelatesToCustomCheck(System.Func<T, string> relatedTo) { }
        protected void RelatesToEndpoint(System.Func<T, string> relatedTo) { }
        protected void RelatesToGroup(System.Func<T, string> relatedTo) { }
        protected void RelatesToHost(System.Func<T, System.Guid> relatedTo) { }
        protected void RelatesToMachine(System.Func<T, string> relatedTo) { }
        protected void RelatesToMessage(System.Func<T, string> relatedTo) { }
        protected void RelatesToMessages(System.Func<T, System.Collections.Generic.IEnumerable<string>> relatedTo) { }
        protected void Severity(ServiceControl.EventLog.Severity severityToUse) { }
        protected void Severity(System.Func<T, ServiceControl.EventLog.Severity> severity) { }
        protected void TreatAsError() { }
    }
    public class EventLogMappings
    {
        public EventLogMappings(System.Collections.Generic.Dictionary<System.Type, System.Type> mappings) { }
        public ServiceControl.EventLog.EventLogItem ApplyMapping(ServiceControl.Infrastructure.DomainEvents.IDomainEvent @event) { }
        public bool HasMapping(ServiceControl.Infrastructure.DomainEvents.IDomainEvent message) { }
    }
    public class EventLogMappingsFeature : NServiceBus.Features.Feature
    {
        public EventLogMappingsFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public interface IEventLogMappingDefinition
    {
        ServiceControl.EventLog.EventLogItem Apply(ServiceControl.Infrastructure.DomainEvents.IDomainEvent @event);
    }
    public enum Severity
    {
        Critical = 0,
        Error = 1,
        Warning = 2,
        Info = 3,
    }
}
namespace ServiceControl.EventLog.Definitions
{
    public class CustomCheckFailedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.CustomChecks.CustomCheckFailed>
    {
        public CustomCheckFailedDefinition() { }
    }
    public class CustomCheckSucceededDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.CustomChecks.CustomCheckSucceeded>
    {
        public CustomCheckSucceededDefinition() { }
    }
    public class EndpointFailedToHeartbeatDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.HeartbeatMonitoring.EndpointFailedToHeartbeat>
    {
        public EndpointFailedToHeartbeatDefinition() { }
    }
    public class EndpointHeartbeatRestoredDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.HeartbeatMonitoring.EndpointHeartbeatRestored>
    {
        public EndpointHeartbeatRestoredDefinition() { }
    }
    public class EndpointStartedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.EndpointControl.EndpointStarted>
    {
        public EndpointStartedDefinition() { }
    }
    public class FailedMessageArchivedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.MessageFailures.FailedMessageArchived>
    {
        public FailedMessageArchivedDefinition() { }
    }
    public class FailedMessageGroupArchivedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Recoverability.FailedMessageGroupArchived>
    {
        public FailedMessageGroupArchivedDefinition() { }
    }
    public class FailedMessageUnArchivedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.MessageFailures.FailedMessagesUnArchived>
    {
        public FailedMessageUnArchivedDefinition() { }
    }
    public class HeartbeatingEndpointDetectedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.HeartbeatMonitoring.HeartbeatingEndpointDetected>
    {
        public HeartbeatingEndpointDetectedDefinition() { }
    }
    public class KnownEndpointUpdatedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.EndpointControl.Contracts.MonitoringEnabledForEndpoint>
    {
        public KnownEndpointUpdatedDefinition() { }
        public override string Category { get; }
    }
    public class MessageFailedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.MessageFailures.MessageFailed>
    {
        public MessageFailedDefinition() { }
    }
    public class MessageFailureResolvedByRetryDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.MessageFailures.MessageFailureResolvedByRetry>
    {
        public MessageFailureResolvedByRetryDefinition() { }
    }
    public class MessageFailureResolvedManuallyDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.MessageFailures.MessageFailureResolvedManually>
    {
        public MessageFailureResolvedManuallyDefinition() { }
    }
    public class MessageRedirectChangedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.MessageRedirects.MessageRedirectChanged>
    {
        public MessageRedirectChangedDefinition() { }
    }
    public class MessageRedirectCreatedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.MessageRedirects.MessageRedirectCreated>
    {
        public MessageRedirectCreatedDefinition() { }
    }
    public class MessageRedirectRemovedDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.MessageRedirects.MessageRedirectRemoved>
    {
        public MessageRedirectRemovedDefinition() { }
    }
    public class MessagesSubmittedForRetryDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Recoverability.MessagesSubmittedForRetry>
    {
        public MessagesSubmittedForRetryDefinition() { }
    }
    public class MessageSubmittedForRetryDefinition : ServiceControl.EventLog.EventLogMappingDefinition<ServiceControl.Contracts.MessageFailures.MessageSubmittedForRetry>
    {
        public MessageSubmittedForRetryDefinition() { }
    }
}
namespace ServiceControl.ExternalIntegrations
{
    public class CustomCheckFailedPublisher : ServiceControl.ExternalIntegrations.EventPublisher<ServiceControl.Contracts.CustomChecks.CustomCheckFailed, ServiceControl.ExternalIntegrations.CustomCheckFailedPublisher.DispatchContext>
    {
        public CustomCheckFailedPublisher() { }
        protected override ServiceControl.ExternalIntegrations.CustomCheckFailedPublisher.DispatchContext CreateDispatchRequest(ServiceControl.Contracts.CustomChecks.CustomCheckFailed @event) { }
        protected override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>> PublishEvents(System.Collections.Generic.IEnumerable<ServiceControl.ExternalIntegrations.CustomCheckFailedPublisher.DispatchContext> contexts, Raven.Client.IAsyncDocumentSession session) { }
        public class DispatchContext
        {
            public DispatchContext() { }
            public string Category { get; set; }
            public string CustomCheckId { get; set; }
            public string EndpointHost { get; set; }
            public System.Guid EndpointHostId { get; set; }
            public string EndpointName { get; set; }
            public System.DateTime FailedAt { get; set; }
            public string FailureReason { get; set; }
        }
    }
    public class CustomCheckSucceededPublisher : ServiceControl.ExternalIntegrations.EventPublisher<ServiceControl.Contracts.CustomChecks.CustomCheckSucceeded, ServiceControl.ExternalIntegrations.CustomCheckSucceededPublisher.DispatchContext>
    {
        public CustomCheckSucceededPublisher() { }
        protected override ServiceControl.ExternalIntegrations.CustomCheckSucceededPublisher.DispatchContext CreateDispatchRequest(ServiceControl.Contracts.CustomChecks.CustomCheckSucceeded @event) { }
        protected override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>> PublishEvents(System.Collections.Generic.IEnumerable<ServiceControl.ExternalIntegrations.CustomCheckSucceededPublisher.DispatchContext> contexts, Raven.Client.IAsyncDocumentSession session) { }
        public class DispatchContext
        {
            public DispatchContext() { }
            public string Category { get; set; }
            public string CustomCheckId { get; set; }
            public string EndpointHost { get; set; }
            public System.Guid EndpointHostId { get; set; }
            public string EndpointName { get; set; }
            public System.DateTime SucceededAt { get; set; }
        }
    }
    public class EventDispatcher : NServiceBus.Features.FeatureStartupTask
    {
        public EventDispatcher(Raven.Client.IDocumentStore store, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents, NServiceBus.CriticalError criticalError, ServiceBus.Management.Infrastructure.Settings.Settings settings, System.Collections.Generic.IEnumerable<ServiceControl.ExternalIntegrations.IEventPublisher> eventPublishers) { }
        protected override System.Threading.Tasks.Task OnStart(NServiceBus.IMessageSession session) { }
        protected override System.Threading.Tasks.Task OnStop(NServiceBus.IMessageSession session) { }
    }
    public abstract class EventPublisher<TEvent, TDispatchContext> : ServiceControl.ExternalIntegrations.IEventPublisher
        where TEvent : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        protected EventPublisher() { }
        public object CreateDispatchContext(ServiceControl.Infrastructure.DomainEvents.IDomainEvent @event) { }
        protected abstract TDispatchContext CreateDispatchRequest(TEvent @event);
        public bool Handles(ServiceControl.Infrastructure.DomainEvents.IDomainEvent @event) { }
        protected abstract System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>> PublishEvents(System.Collections.Generic.IEnumerable<TDispatchContext> contexts, Raven.Client.IAsyncDocumentSession session);
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>> PublishEventsForOwnContexts(System.Collections.Generic.IEnumerable<object> allContexts, Raven.Client.IAsyncDocumentSession session) { }
    }
    public class ExternalIntegrationDispatchRequest
    {
        public object DispatchContext;
        public ExternalIntegrationDispatchRequest() { }
        public string Id { get; set; }
    }
    public class ExternalIntegrationEventFailedToBePublished : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public ExternalIntegrationEventFailedToBePublished() { }
        public System.Type EventType { get; set; }
        public string Reason { get; set; }
    }
    public class HeartbeatRestoredPublisher : ServiceControl.ExternalIntegrations.EventPublisher<ServiceControl.Contracts.HeartbeatMonitoring.EndpointHeartbeatRestored, ServiceControl.ExternalIntegrations.HeartbeatRestoredPublisher.DispatchContext>
    {
        public HeartbeatRestoredPublisher() { }
        protected override ServiceControl.ExternalIntegrations.HeartbeatRestoredPublisher.DispatchContext CreateDispatchRequest(ServiceControl.Contracts.HeartbeatMonitoring.EndpointHeartbeatRestored @event) { }
        protected override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>> PublishEvents(System.Collections.Generic.IEnumerable<ServiceControl.ExternalIntegrations.HeartbeatRestoredPublisher.DispatchContext> contexts, Raven.Client.IAsyncDocumentSession session) { }
        public class DispatchContext
        {
            public DispatchContext() { }
            public string EndpointHost { get; set; }
            public System.Guid EndpointHostId { get; set; }
            public string EndpointName { get; set; }
            public System.DateTime RestoredAt { get; set; }
        }
    }
    public class HeartbeatStoppedPublisher : ServiceControl.ExternalIntegrations.EventPublisher<ServiceControl.Contracts.HeartbeatMonitoring.EndpointFailedToHeartbeat, ServiceControl.ExternalIntegrations.HeartbeatStoppedPublisher.DispatchContext>
    {
        public HeartbeatStoppedPublisher() { }
        protected override ServiceControl.ExternalIntegrations.HeartbeatStoppedPublisher.DispatchContext CreateDispatchRequest(ServiceControl.Contracts.HeartbeatMonitoring.EndpointFailedToHeartbeat @event) { }
        protected override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>> PublishEvents(System.Collections.Generic.IEnumerable<ServiceControl.ExternalIntegrations.HeartbeatStoppedPublisher.DispatchContext> contexts, Raven.Client.IAsyncDocumentSession session) { }
        public class DispatchContext
        {
            public DispatchContext() { }
            public System.DateTime DetectedAt { get; set; }
            public string EndpointHost { get; set; }
            public System.Guid EndpointHostId { get; set; }
            public string EndpointName { get; set; }
            public System.DateTime LastReceivedAt { get; set; }
        }
    }
    public interface IEventPublisher
    {
        object CreateDispatchContext(ServiceControl.Infrastructure.DomainEvents.IDomainEvent @event);
        bool Handles(ServiceControl.Infrastructure.DomainEvents.IDomainEvent @event);
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>> PublishEventsForOwnContexts(System.Collections.Generic.IEnumerable<object> allContexts, Raven.Client.IAsyncDocumentSession session);
    }
    public class IntegrationEventWriter : ServiceControl.Infrastructure.DomainEvents.IDomainHandler<ServiceControl.Infrastructure.DomainEvents.IDomainEvent>
    {
        public IntegrationEventWriter(Raven.Client.IDocumentStore store, System.Collections.Generic.IEnumerable<ServiceControl.ExternalIntegrations.IEventPublisher> eventPublishers) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Infrastructure.DomainEvents.IDomainEvent message) { }
    }
    public class static MessageFailedConverter
    {
        public static ServiceControl.Contracts.MessageFailed ToEvent(this ServiceControl.MessageFailures.FailedMessage message) { }
    }
    public class MessageFailedPublisher : ServiceControl.ExternalIntegrations.EventPublisher<ServiceControl.Contracts.MessageFailures.MessageFailed, ServiceControl.ExternalIntegrations.MessageFailedPublisher.DispatchContext>
    {
        public MessageFailedPublisher() { }
        protected override ServiceControl.ExternalIntegrations.MessageFailedPublisher.DispatchContext CreateDispatchRequest(ServiceControl.Contracts.MessageFailures.MessageFailed @event) { }
        protected override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>> PublishEvents(System.Collections.Generic.IEnumerable<ServiceControl.ExternalIntegrations.MessageFailedPublisher.DispatchContext> contexts, Raven.Client.IAsyncDocumentSession session) { }
        public class DispatchContext
        {
            public DispatchContext() { }
            public System.Guid FailedMessageId { get; set; }
        }
    }
}
namespace ServiceControl.HeartbeatMonitoring.InternalMessages
{
    public class RegisterPotentiallyMissingHeartbeats : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RegisterPotentiallyMissingHeartbeats() { }
        public System.DateTime DetectedAt { get; set; }
        public System.Guid EndpointInstanceId { get; set; }
        public System.DateTime LastHeartbeatAt { get; set; }
    }
}
namespace ServiceControl.HeartbeatMonitoring
{
    public enum Status
    {
        Beating = 0,
        Dead = 1,
    }
}
namespace ServiceControl.Infrastructure
{
    public class static DeterministicGuid
    {
        public static System.Guid MakeId(string data) { }
        public static System.Guid MakeId(string data1, string data2) { }
        public static System.Guid MakeId(string data1, string data2, string data3) { }
    }
    public class static DictionaryExtensions
    {
        public static void CheckIfKeyExists(string key, System.Collections.Generic.IReadOnlyDictionary<string, string> headers, System.Action<string> actionToInvokeWhenKeyIsFound) { }
    }
    public class MarkerFileService
    {
        public MarkerFileService(string rootPath) { }
        public System.IDisposable CreateMarker(string name) { }
    }
    public class ShutdownNotifier : System.IDisposable
    {
        public ShutdownNotifier() { }
        public void Dispose() { }
        public void Register(System.Action callback) { }
    }
    public class SubscriptionFeature : NServiceBus.Features.Feature
    {
        public SubscriptionFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class static TaskEx
    {
        public static void Ignore(this System.Threading.Tasks.Task task) { }
    }
    public class TimeKeeper : System.IDisposable
    {
        public TimeKeeper() { }
        public void Dispose() { }
        public System.Threading.Timer New(System.Action callback, System.TimeSpan dueTime, System.TimeSpan period) { }
        public System.Threading.Timer New(System.Func<System.Threading.Tasks.Task> callback, System.TimeSpan dueTime, System.TimeSpan period) { }
        public System.Threading.Timer NewTimer(System.Func<System.Threading.Tasks.Task<bool>> callback, System.TimeSpan dueTime, System.TimeSpan period) { }
        public System.Threading.Timer NewTimer(System.Func<bool> callback, System.TimeSpan dueTime, System.TimeSpan period) { }
        public void Release(System.Threading.Timer timer) { }
    }
}
namespace ServiceControl.Infrastructure.DomainEvents
{
    public class DomainEventBusPublisher : NServiceBus.Features.FeatureStartupTask, ServiceControl.Infrastructure.DomainEvents.IDomainHandler<ServiceControl.Infrastructure.DomainEvents.IDomainEvent>
    {
        public DomainEventBusPublisher() { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Infrastructure.DomainEvents.IDomainEvent domainEvent) { }
        protected override System.Threading.Tasks.Task OnStart(NServiceBus.IMessageSession session) { }
        protected override System.Threading.Tasks.Task OnStop(NServiceBus.IMessageSession session) { }
    }
    public class DomainEvents : ServiceControl.Infrastructure.DomainEvents.IDomainEvents
    {
        public DomainEvents() { }
        public System.Threading.Tasks.Task Raise<T>(T domainEvent)
            where T : ServiceControl.Infrastructure.DomainEvents.IDomainEvent { }
        public void SetContainer(Autofac.IContainer container) { }
    }
    public class DomainEventsFeature : NServiceBus.Features.Feature
    {
        public DomainEventsFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public interface IBusEvent : NServiceBus.IEvent, NServiceBus.IMessage { }
    public interface IDomainEvent { }
    public interface IDomainEvents
    {
        System.Threading.Tasks.Task Raise<T>(T domainEvent)
            where T : ServiceControl.Infrastructure.DomainEvents.IDomainEvent;
    }
    public interface IDomainHandler<in T>
        where in T : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        System.Threading.Tasks.Task Handle(T domainEvent);
    }
    public class ServicePulseNotifierFeature : NServiceBus.Features.Feature
    {
        public ServicePulseNotifierFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
}
namespace ServiceControl.Infrastructure.Extensions
{
    public class static QueryableExtensions
    {
        public static Raven.Client.IAsyncDocumentQuery<T> FilterByLastModifiedRange<T>(this Raven.Client.IAsyncDocumentQuery<T> source, Nancy.Request request) { }
        public static Raven.Client.IAsyncDocumentQuery<T> FilterByQueueAddress<T>(this Raven.Client.IAsyncDocumentQuery<T> source, Nancy.Request request) { }
        public static Raven.Client.IAsyncDocumentQuery<T> FilterByStatusWhere<T>(this Raven.Client.IAsyncDocumentQuery<T> source, Nancy.Request request) { }
        public static Raven.Client.Linq.IRavenQueryable<ServiceControl.CompositeViews.Messages.MessagesViewIndex.SortAndFilterOptions> IncludeSystemMessagesWhere(this Raven.Client.Linq.IRavenQueryable<ServiceControl.CompositeViews.Messages.MessagesViewIndex.SortAndFilterOptions> source, Nancy.Request request) { }
        public static Raven.Client.IAsyncDocumentQuery<TSource> Paging<TSource>(this Raven.Client.IAsyncDocumentQuery<TSource> source, Nancy.Request request) { }
        public static System.Linq.IOrderedQueryable<TSource> Paging<TSource>(this System.Linq.IOrderedQueryable<TSource> source, Nancy.Request request) { }
        public static Raven.Client.Linq.IRavenQueryable<TSource> Paging<TSource>(this Raven.Client.Linq.IRavenQueryable<TSource> source, Nancy.Request request) { }
        public static Raven.Client.IAsyncDocumentQuery<TSource> Sort<TSource>(this Raven.Client.IAsyncDocumentQuery<TSource> source, Nancy.Request request) { }
        public static Raven.Client.Linq.IRavenQueryable<TSource> Sort<TSource>(this Raven.Client.Linq.IRavenQueryable<TSource> source, Nancy.Request request, System.Linq.Expressions.Expression<System.Func<TSource, object>> defaultKeySelector = null, string defaultSortDirection = "desc")
            where TSource : ServiceControl.CompositeViews.Messages.MessagesViewIndex.SortAndFilterOptions { }
    }
}
namespace ServiceControl.Infrastructure.Plugins
{
    public class RegisterPluginMessagesFeature : NServiceBus.Features.Feature
    {
        public RegisterPluginMessagesFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
}
namespace ServiceControl.Infrastructure.RavenDB.Expiration
{
    public class static AuditMessageCleaner
    {
        public static void Clean(int deletionBatchSize, Raven.Database.DocumentDatabase database, System.DateTime expiryThreshold) { }
    }
    public class static Chunker
    {
        public static void ExecuteInChunks(int total, System.Action<int, int> action) { }
    }
    public class static ErrorMessageCleaner
    {
        public static void Clean(int deletionBatchSize, Raven.Database.DocumentDatabase database, System.DateTime expiryThreshold) { }
    }
    public class static EventLogItemsCleaner
    {
        public static void Clean(int deletionBatchSize, Raven.Database.DocumentDatabase database, System.DateTime expiryThreshold) { }
    }
    public class ExpiredDocumentsCleaner
    {
        public ExpiredDocumentsCleaner() { }
        public static void RunCleanup(int deletionBatchSize, Raven.Database.DocumentDatabase database, ServiceBus.Management.Infrastructure.Settings.Settings settings) { }
    }
    [System.ComponentModel.Composition.ExportMetadataAttribute("Bundle", "customDocumentExpiration")]
    [System.ComponentModel.Composition.InheritedExportAttribute(typeof(Raven.Database.Plugins.IStartupTask))]
    public class ExpiredDocumentsCleanerBundle : Raven.Database.Plugins.IStartupTask, System.IDisposable
    {
        public ExpiredDocumentsCleanerBundle() { }
        public void Dispose() { }
        public void Execute(Raven.Database.DocumentDatabase database) { }
    }
    public class ExpiryErrorMessageIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage>
    {
        public ExpiryErrorMessageIndex() { }
    }
    public class ExpiryEventLogItemsIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.EventLog.EventLogItem>
    {
        public ExpiryEventLogItemsIndex() { }
    }
    public class ExpiryProcessedMessageIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageAuditing.ProcessedMessage>
    {
        public ExpiryProcessedMessageIndex() { }
    }
    public class ExpirySagaAuditIndex : Raven.Client.Indexes.AbstractMultiMapIndexCreationTask
    {
        public ExpirySagaAuditIndex() { }
    }
    public class static SagaHistoryCleaner
    {
        public static void Clean(int deletionBatchSize, Raven.Database.DocumentDatabase database, System.DateTime expiryThreshold) { }
    }
}
namespace ServiceControl.Infrastructure.RavenDB
{
    public class static Extensions
    {
        public static void Query(this Raven.Database.DocumentDatabase db, string index, Raven.Abstractions.Data.IndexQuery query, System.Threading.CancellationToken externalCancellationToken, System.Action<Raven.Json.Linq.RavenJObject> onItem) { }
    }
    public class RavenBootstrapper : NServiceBus.INeedInitialization
    {
        public RavenBootstrapper() { }
        public static ServiceBus.Management.Infrastructure.Settings.Settings Settings { get; set; }
        public void Customize(NServiceBus.EndpointConfiguration configuration) { }
        public static string ReadLicense() { }
        public void StartRaven(Raven.Client.Embedded.EmbeddableDocumentStore documentStore, ServiceBus.Management.Infrastructure.Settings.Settings settings, ServiceControl.Infrastructure.MarkerFileService markerFileService, bool maintenanceMode) { }
    }
}
namespace ServiceControl.Infrastructure.RavenDB.Subscriptions
{
    public class CachedRavenDBPersistence : NServiceBus.Persistence.PersistenceDefinition
    {
        public CachedRavenDBPersistence() { }
    }
}
namespace ServiceControl.Infrastructure.Settings
{
    public class static InstanceIdGenerator
    {
        public static string FromApiUrl(string apiUrl) { }
        public static string ToApiUrl(string instanceId) { }
    }
}
namespace ServiceControl.Infrastructure.SignalR
{
    public class CustomSignalRContractResolverBecauseOfIssue500InSignalR : Newtonsoft.Json.Serialization.IContractResolver
    {
        public CustomSignalRContractResolverBecauseOfIssue500InSignalR() { }
        public Newtonsoft.Json.Serialization.JsonContract ResolveContract(System.Type type) { }
    }
    public class Envelope
    {
        public Envelope() { }
        public object Message { get; set; }
        public System.Collections.Generic.List<string> Types { get; set; }
    }
    public class GlobalEventHandler
    {
        public GlobalEventHandler() { }
        public System.Threading.Tasks.Task Broadcast(ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent @event) { }
    }
    public interface IUserInterfaceEvent { }
    public class MessageStreamerConnection : Microsoft.AspNet.SignalR.PersistentConnection
    {
        public MessageStreamerConnection(NServiceBus.Transport.IDispatchMessages sender, NServiceBus.Settings.ReadOnlySettings settings) { }
        protected override System.Threading.Tasks.Task OnReceived(Microsoft.AspNet.SignalR.IRequest request, string connectionId, string data) { }
    }
    public class static SerializationSettingsFactoryForSignalR
    {
        public static Newtonsoft.Json.JsonSerializerSettings CreateDefault() { }
    }
    public class ServicePulseNotifier : ServiceControl.Infrastructure.DomainEvents.IDomainHandler<ServiceControl.Infrastructure.DomainEvents.IDomainEvent>
    {
        public ServicePulseNotifier(ServiceControl.Infrastructure.SignalR.GlobalEventHandler broadcaster) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Infrastructure.DomainEvents.IDomainEvent domainEvent) { }
    }
    public class UnderscoreMappingResolver : Newtonsoft.Json.Serialization.DefaultContractResolver
    {
        public UnderscoreMappingResolver() { }
        protected override string ResolvePropertyName(string propertyName) { }
    }
}
namespace ServiceControl.Licensing
{
    public class LicenseModule : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public LicenseModule() { }
        public Particular.ServiceControl.Licensing.ActiveLicense ActiveLicense { get; set; }
    }
}
namespace ServiceControl.MessageAuditing
{
    public class ProcessedMessage
    {
        public ProcessedMessage() { }
        public ProcessedMessage(System.Collections.Generic.Dictionary<string, string> headers, System.Collections.Generic.Dictionary<string, object> metadata) { }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string Id { get; set; }
        public System.Collections.Generic.Dictionary<string, object> MessageMetadata { get; set; }
        public System.DateTime ProcessedAt { get; set; }
        public string UniqueMessageId { get; set; }
    }
    public class ProcessingStatistics : NServiceBus.Features.Feature
    {
        public ProcessingStatistics() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
}
namespace ServiceControl.MessageFailures.Api
{
    public class ArchiveMessages : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public ArchiveMessages() { }
        public NServiceBus.IMessageSession Bus { get; set; }
    }
    public class FailedMessageFacetsIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage>
    {
        public FailedMessageFacetsIndex() { }
    }
    public class FailedMessageView
    {
        public FailedMessageView() { }
        public ServiceControl.Contracts.Operations.ExceptionDetails Exception { get; set; }
        public string Id { get; set; }
        public bool IsSystemMessage { get; set; }
        public System.DateTime LastModified { get; set; }
        public string MessageId { get; set; }
        public string MessageType { get; set; }
        public int NumberOfProcessingAttempts { get; set; }
        public string QueueAddress { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails ReceivingEndpoint { get; set; }
        public ServiceControl.Contracts.Operations.EndpointDetails SendingEndpoint { get; set; }
        public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
        public System.DateTime TimeOfFailure { get; set; }
        public System.Nullable<System.DateTime> TimeSent { get; set; }
    }
    public class FailedMessageViewIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage>
    {
        public FailedMessageViewIndex() { }
        public class SortAndFilterOptions : ServiceControl.MessageFailures.IHaveStatus
        {
            public SortAndFilterOptions() { }
            public long LastModified { get; set; }
            public string MessageId { get; set; }
            public string MessageType { get; set; }
            public string QueueAddress { get; set; }
            public string ReceivingEndpointName { get; set; }
            public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
            public System.DateTime TimeOfFailure { get; set; }
            public System.DateTime TimeSent { get; set; }
        }
    }
    public class FailedMessageViewTransformer : Raven.Client.Indexes.AbstractTransformerCreationTask<ServiceControl.MessageFailures.FailedMessage>
    {
        public FailedMessageViewTransformer() { }
        public static string Name { get; }
    }
    public class GetAllErrors : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public GetAllErrors() { }
    }
    public class GetErrorById : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public GetErrorById() { }
    }
    public class PendingRetryMessages : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public PendingRetryMessages() { }
        public NServiceBus.IMessageSession Bus { get; set; }
    }
    public class QueueAddressIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage, ServiceControl.MessageFailures.QueueAddress>
    {
        public QueueAddressIndex() { }
    }
    public class QueueAddressModule : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public QueueAddressModule() { }
    }
    public class ResolveMessages : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public ResolveMessages() { }
        public NServiceBus.IMessageSession Bus { get; set; }
    }
    public class RetryMessages : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public RetryMessages() { }
        public NServiceBus.IMessageSession Bus { get; set; }
        public ServiceControl.MessageFailures.Api.RetryMessagesApi RetryMessagesApi { get; set; }
    }
    public class RetryMessagesApi : ServiceControl.CompositeViews.Messages.RoutedApi<string>
    {
        public RetryMessagesApi() { }
        public NServiceBus.IMessageSession Bus { get; set; }
        protected override System.Threading.Tasks.Task<Nancy.Response> LocalQuery(Nancy.Request request, string input, string instanceId) { }
    }
    public class UnArchiveMessages : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public UnArchiveMessages() { }
        public NServiceBus.IMessageSession MessageSession { get; set; }
    }
}
namespace ServiceControl.MessageFailures
{
    public class FailedMessage : ServiceControl.MessageFailures.IHaveStatus
    {
        public const string CollectionName = "FailedMessages";
        public FailedMessage() { }
        public System.Collections.Generic.List<ServiceControl.MessageFailures.FailedMessage.FailureGroup> FailureGroups { get; set; }
        public string Id { get; set; }
        public System.Collections.Generic.List<ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt> ProcessingAttempts { get; set; }
        public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
        public string UniqueMessageId { get; set; }
        public static string MakeDocumentId(string messageUniqueId) { }
        public class FailureGroup
        {
            public FailureGroup() { }
            public string Id { get; set; }
            public string Title { get; set; }
            public string Type { get; set; }
        }
        public class ProcessingAttempt
        {
            public ProcessingAttempt() { }
            public System.DateTime AttemptedAt { get; set; }
            public string CorrelationId { get; set; }
            public ServiceControl.Contracts.Operations.FailureDetails FailureDetails { get; set; }
            public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
            public string MessageId { get; set; }
            public NServiceBus.MessageIntentEnum MessageIntent { get; set; }
            public System.Collections.Generic.Dictionary<string, object> MessageMetadata { get; set; }
            public bool Recoverable { get; set; }
            public string ReplyToAddress { get; set; }
        }
    }
    public class FailedMessagesFeature : NServiceBus.Features.Feature
    {
        public FailedMessagesFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public enum FailedMessageStatus
    {
        Unresolved = 1,
        Resolved = 2,
        RetryIssued = 3,
        Archived = 4,
    }
    public interface IHaveStatus
    {
        ServiceControl.MessageFailures.FailedMessageStatus Status { get; }
    }
    public class QueueAddress
    {
        public QueueAddress() { }
        public int FailedMessageCount { get; set; }
        public string PhysicalAddress { get; set; }
    }
}
namespace ServiceControl.MessageFailures.Handlers
{
    public class ArchiveMessageHandler : NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.ArchiveMessage>
    {
        public ArchiveMessageHandler(Raven.Client.IDocumentStore store, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.ArchiveMessage message, NServiceBus.IMessageHandlerContext context) { }
    }
    public class MessageFailureResolvedHandler : NServiceBus.IHandleMessages<ServiceControl.Contracts.MessageFailures.MessageFailureResolvedByRetry>, NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.MarkPendingRetriesAsResolved>, NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.MarkPendingRetryAsResolved>
    {
        public MessageFailureResolvedHandler(Raven.Client.IDocumentStore store, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.MarkPendingRetriesAsResolved message, NServiceBus.IMessageHandlerContext context) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.MarkPendingRetryAsResolved message, NServiceBus.IMessageHandlerContext context) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Contracts.MessageFailures.MessageFailureResolvedByRetry message, NServiceBus.IMessageHandlerContext context) { }
    }
    public class UnArchiveMessagesByRangeHandler : NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.UnArchiveMessagesByRange>
    {
        public UnArchiveMessagesByRangeHandler(Raven.Client.IDocumentStore store, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.UnArchiveMessagesByRange message, NServiceBus.IMessageHandlerContext context) { }
    }
    public class UnArchiveMessagesHandler : NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.UnArchiveMessages>
    {
        public UnArchiveMessagesHandler(Raven.Client.IDocumentStore store, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.UnArchiveMessages messages, NServiceBus.IMessageHandlerContext context) { }
    }
}
namespace ServiceControl.MessageFailures.InternalMessages
{
    public class ArchiveMessage : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public ArchiveMessage() { }
        public string FailedMessageId { get; set; }
    }
    public class MarkPendingRetriesAsResolved : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public MarkPendingRetriesAsResolved() { }
        public System.DateTime PeriodFrom { get; set; }
        public System.DateTime PeriodTo { get; set; }
        public string QueueAddress { get; set; }
    }
    public class MarkPendingRetryAsResolved : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public MarkPendingRetryAsResolved() { }
        public string FailedMessageId { get; set; }
    }
    public class PerformRetry : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public PerformRetry() { }
        public string FailedMessageId { get; set; }
    }
    public class ReclassificationOfErrorMessageComplete : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public ReclassificationOfErrorMessageComplete() { }
        public int NumberofMessageReclassified { get; set; }
    }
    public class ReclassifyErrors : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public ReclassifyErrors() { }
        public bool Force { get; set; }
    }
    public class RegisterSuccessfulRetry : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RegisterSuccessfulRetry() { }
        public string FailedMessageId { get; set; }
        public System.Guid RetryId { get; set; }
    }
    public class RequestRetryAll : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RequestRetryAll() { }
        public string Endpoint { get; set; }
    }
    public class RetryMessage : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RetryMessage() { }
        public string FailedMessageId { get; set; }
    }
    public class RetryPendingMessages : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RetryPendingMessages() { }
        public System.DateTime PeriodFrom { get; set; }
        public System.DateTime PeriodTo { get; set; }
        public string QueueAddress { get; set; }
    }
    public class RetryPendingMessagesById : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RetryPendingMessagesById() { }
        public string[] MessageUniqueIds { get; set; }
    }
    public class UnArchiveMessages : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public UnArchiveMessages() { }
        public System.Collections.Generic.List<string> FailedMessageIds { get; set; }
    }
    public class UnArchiveMessagesByRange : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public UnArchiveMessagesByRange() { }
        public System.DateTime CutOff { get; set; }
        public System.DateTime From { get; set; }
        public System.DateTime To { get; set; }
    }
}
namespace ServiceControl.MessageRedirects.Api
{
    public class MessageRedirectsModule : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public MessageRedirectsModule() { }
        public NServiceBus.IMessageSession Bus { get; set; }
        public ServiceControl.Infrastructure.DomainEvents.IDomainEvents DomainEvents { get; set; }
    }
}
namespace ServiceControl.MessageRedirects
{
    public class MessageRedirect
    {
        public MessageRedirect() { }
        public string FromPhysicalAddress { get; set; }
        public long LastModifiedTicks { get; set; }
        public System.Guid MessageRedirectId { get; }
        public string ToPhysicalAddress { get; set; }
    }
    public class MessageRedirectsCollection
    {
        public MessageRedirectsCollection() { }
        public Raven.Abstractions.Data.Etag ETag { get; set; }
        public string Id { get; set; }
        public ServiceControl.MessageRedirects.MessageRedirect this[string from] { get; }
        public ServiceControl.MessageRedirects.MessageRedirect this[System.Guid id] { get; }
        public System.DateTime LastModified { get; set; }
        public System.Collections.Generic.List<ServiceControl.MessageRedirects.MessageRedirect> Redirects { get; set; }
        public static System.Threading.Tasks.Task<ServiceControl.MessageRedirects.MessageRedirectsCollection> GetOrCreate(Raven.Client.IAsyncDocumentSession session) { }
        public System.Threading.Tasks.Task Save(Raven.Client.IAsyncDocumentSession session) { }
    }
}
namespace ServiceControl.Monitoring
{
    public class ApiModule : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public ApiModule() { }
        public ServiceControl.CompositeViews.Endpoints.GetKnownEndpointsApi KnownEndpointsApi { get; set; }
        public ServiceControl.Monitoring.EndpointInstanceMonitoring Monitoring { get; set; }
    }
    public class static EndpointDetailsExtensions
    {
        public static ServiceControl.Monitoring.EndpointInstanceId ToInstanceId(this ServiceControl.Contracts.Operations.EndpointDetails endpointDetails) { }
    }
    public class EndpointInstanceId : System.IEquatable<ServiceControl.Monitoring.EndpointInstanceId>
    {
        public readonly System.Guid HostGuid;
        public readonly string HostName;
        public readonly string LogicalName;
        public EndpointInstanceId(string logicalName, string hostName, System.Guid hostGuid) { }
        public System.Guid UniqueId { get; }
        public bool Equals(ServiceControl.Monitoring.EndpointInstanceId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class EndpointInstanceMonitor
    {
        public EndpointInstanceMonitor(ServiceControl.Monitoring.EndpointInstanceId endpointInstanceId, bool monitored, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public ServiceControl.Monitoring.EndpointInstanceId Id { get; }
        public bool Monitored { get; }
        public void AddTo(ServiceControl.Monitoring.EndpointMonitoringStats stats) { }
        public System.Threading.Tasks.Task DisableMonitoring() { }
        public System.Threading.Tasks.Task EnableMonitoring() { }
        public ServiceControl.CompositeViews.Endpoints.KnownEndpointsView GetKnownView() { }
        public ServiceControl.CompositeViews.Endpoints.EndpointsView GetView() { }
        public System.Threading.Tasks.Task UpdateStatus(ServiceControl.Monitoring.HeartbeatStatus newStatus, System.Nullable<System.DateTime> latestTimestamp) { }
    }
    public class EndpointInstanceMonitoring
    {
        public EndpointInstanceMonitoring(ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public System.Threading.Tasks.Task CheckEndpoints(System.DateTime threshold) { }
        public System.Threading.Tasks.Task DetectEndpointFromHeartbeatStartup(ServiceControl.Contracts.Operations.EndpointDetails newEndpointDetails, System.DateTime startedAt) { }
        public System.Threading.Tasks.Task DetectEndpointFromLocalAudit(ServiceControl.Contracts.Operations.EndpointDetails newEndpointDetails) { }
        public void DetectEndpointFromPersistentStore(ServiceControl.Contracts.Operations.EndpointDetails endpointDetails, bool monitored) { }
        public void DetectEndpointFromRemoteAudit(ServiceControl.Contracts.Operations.EndpointDetails newEndpointDetails) { }
        public System.Threading.Tasks.Task DisableMonitoring(System.Guid id) { }
        public System.Threading.Tasks.Task EnableMonitoring(System.Guid id) { }
        public ServiceControl.CompositeViews.Endpoints.EndpointsView[] GetEndpoints() { }
        public System.Collections.Generic.List<ServiceControl.CompositeViews.Endpoints.KnownEndpointsView> GetKnownEndpoints() { }
        public ServiceControl.Monitoring.EndpointMonitoringStats GetStats() { }
        public bool IsMonitored(System.Guid id) { }
        public void RecordHeartbeat(ServiceControl.Monitoring.EndpointInstanceId endpointInstanceId, System.DateTime timestamp) { }
    }
    public class EndpointMonitoringStats
    {
        public EndpointMonitoringStats() { }
        public int Active { get; }
        public int Failing { get; }
        public void RecordActive() { }
        public void RecordFailing() { }
    }
    public class EndpointUpdateModel
    {
        public EndpointUpdateModel() { }
        public bool MonitorHeartbeat { get; set; }
    }
    public enum HeartbeatStatus
    {
        Unknown = 0,
        Alive = 1,
        Dead = 2,
    }
    public class MonitoringDataPersister : ServiceControl.Infrastructure.DomainEvents.IDomainHandler<ServiceControl.Contracts.HeartbeatMonitoring.HeartbeatingEndpointDetected>, ServiceControl.Infrastructure.DomainEvents.IDomainHandler<ServiceControl.EndpointControl.Contracts.MonitoringDisabledForEndpoint>, ServiceControl.Infrastructure.DomainEvents.IDomainHandler<ServiceControl.EndpointControl.Contracts.MonitoringEnabledForEndpoint>
    {
        public MonitoringDataPersister(Raven.Client.IDocumentStore store, ServiceControl.Monitoring.EndpointInstanceMonitoring monitoring) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Contracts.HeartbeatMonitoring.HeartbeatingEndpointDetected domainEvent) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.EndpointControl.Contracts.MonitoringDisabledForEndpoint domainEvent) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.EndpointControl.Contracts.MonitoringEnabledForEndpoint domainEvent) { }
        public System.Threading.Tasks.Task WarmupMonitoringFromPersistence() { }
    }
}
namespace ServiceControl.Monitoring.Handler
{
    public class NewEndpointDetectedHandler : NServiceBus.IHandleMessages<ServiceControl.Contracts.EndpointControl.NewEndpointDetected>
    {
        public NewEndpointDetectedHandler(ServiceControl.Monitoring.EndpointInstanceMonitoring endpointInstanceMonitoring) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Contracts.EndpointControl.NewEndpointDetected message, NServiceBus.IMessageHandlerContext context) { }
    }
}
namespace ServiceControl.Operations
{
    public class AuditImporter
    {
        public AuditImporter(NServiceBus.ObjectBuilder.IBuilder builder, ServiceControl.Operations.BodyStorage.BodyStorageFeature.BodyStorageEnricher bodyStorageEnricher) { }
        public System.Threading.Tasks.Task<ServiceControl.MessageAuditing.ProcessedMessage> ConvertToSaveMessage(NServiceBus.Transport.MessageContext message) { }
    }
    public class AuditImporterFeature : NServiceBus.Features.Feature
    {
        public AuditImporterFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class AuditIngestor
    {
        public AuditIngestor(ServiceControl.Operations.AuditImporter auditImporter, Raven.Client.IDocumentStore store, ServiceControl.Operations.IForwardMessages messageForwarder, ServiceBus.Management.Infrastructure.Settings.Settings settings) { }
        public System.Threading.Tasks.Task Ingest(NServiceBus.Transport.MessageContext context) { }
    }
    public class static ExceptionExtensions
    {
        public static string ToFriendlyString(this System.Exception exception) { }
    }
    public class FailedAuditImport
    {
        public FailedAuditImport() { }
        public System.Guid Id { get; set; }
        public ServiceControl.Operations.FailedTransportMessage Message { get; set; }
    }
    public class FailedAuditImporterFeature : NServiceBus.Features.Feature
    {
        public FailedAuditImporterFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class FailedErrorImport
    {
        public FailedErrorImport() { }
        public System.Guid Id { get; set; }
        public ServiceControl.Operations.FailedTransportMessage Message { get; set; }
    }
    public class FailedTransportMessage
    {
        public FailedTransportMessage() { }
        public byte[] Body { get; set; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string Id { get; set; }
    }
    public interface IForwardMessages
    {
        System.Threading.Tasks.Task Forward(NServiceBus.Transport.MessageContext messageContext, string forwardingAddress);
    }
    public abstract class ImportEnricher
    {
        protected ImportEnricher() { }
        public virtual bool EnrichAudits { get; }
        public virtual bool EnrichErrors { get; }
        public abstract System.Threading.Tasks.Task Enrich(System.Collections.Generic.IReadOnlyDictionary<string, string> headers, System.Collections.Generic.IDictionary<string, object> metadata);
    }
    public class ImportFailedAudits
    {
        public ImportFailedAudits(Raven.Client.IDocumentStore store, ServiceControl.Operations.AuditImporter auditImporter) { }
        public System.Threading.Tasks.Task Run(System.Threading.CancellationTokenSource tokenSource) { }
    }
    public class ImportFailureCircuitBreaker : System.IDisposable
    {
        public ImportFailureCircuitBreaker(NServiceBus.CriticalError criticalError) { }
        public void Dispose() { }
        public void Increment(System.Exception lastException) { }
    }
    public class LicenseReporter : NServiceBus.Features.Feature
    {
        public LicenseReporter() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
        public class UpdateLicenseEnricher : ServiceControl.Operations.ImportEnricher
        {
            public UpdateLicenseEnricher(ServiceControl.Operations.LicenseStatusKeeper licenseStatusKeeper) { }
            public override System.Threading.Tasks.Task Enrich(System.Collections.Generic.IReadOnlyDictionary<string, string> headers, System.Collections.Generic.IDictionary<string, object> metadata) { }
            public string GetLicenseStatus(System.Collections.Generic.IReadOnlyDictionary<string, string> headers) { }
        }
    }
    public class LicenseStatusKeeper
    {
        public LicenseStatusKeeper() { }
        public string Get(string key) { }
        public void Set(string key, string value) { }
    }
    public class MessageForwarder : ServiceControl.Operations.IForwardMessages
    {
        public MessageForwarder(NServiceBus.Transport.IDispatchMessages messageDispatcher) { }
        public System.Threading.Tasks.Task Forward(NServiceBus.Transport.MessageContext messageContext, string forwardingAddress) { }
    }
    public class static NServiceBusSettingsExtensions
    {
        public static string ToTransportAddress(this NServiceBus.Settings.ReadOnlySettings settings, string queueName) { }
    }
}
namespace ServiceControl.Operations.BodyStorage.Api
{
    public class GetBodyById : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public GetBodyById() { }
        public ServiceControl.Operations.BodyStorage.Api.GetBodyByIdApi GetBodyByIdApi { get; set; }
    }
    public class GetBodyByIdApi : ServiceControl.CompositeViews.Messages.RoutedApi<string>
    {
        public GetBodyByIdApi() { }
        public Raven.Client.IDocumentStore Store { get; set; }
        protected override System.Threading.Tasks.Task<Nancy.Response> LocalQuery(Nancy.Request request, string input, string instanceId) { }
    }
}
namespace ServiceControl.Operations.BodyStorage
{
    public class BodyStorageFeature : NServiceBus.Features.Feature
    {
        public BodyStorageFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
        public class BodyStorageEnricher
        {
            public BodyStorageEnricher(ServiceControl.Operations.BodyStorage.IBodyStorage bodyStorage, ServiceBus.Management.Infrastructure.Settings.Settings settings) { }
            public System.Threading.Tasks.Task StoreAuditMessageBody(byte[] body, System.Collections.Generic.IReadOnlyDictionary<string, string> headers, System.Collections.Generic.IDictionary<string, object> metadata) { }
            public System.Threading.Tasks.Task StoreErrorMessageBody(byte[] body, System.Collections.Generic.IReadOnlyDictionary<string, string> headers, System.Collections.Generic.IDictionary<string, object> metadata) { }
        }
    }
    public interface IBodyStorage
    {
        System.Threading.Tasks.Task<string> Store(string bodyId, string contentType, int bodySize, System.IO.Stream bodyStream);
        System.Threading.Tasks.Task<ServiceControl.Operations.BodyStorage.StreamResult> TryFetch(string bodyId);
    }
    public struct StreamResult
    {
        public bool HasResult;
        public System.IO.Stream Stream;
    }
}
namespace ServiceControl.Operations.BodyStorage.RavenAttachments
{
    public class RavenAttachmentsBodyStorage : ServiceControl.Operations.BodyStorage.IBodyStorage
    {
        public RavenAttachmentsBodyStorage() { }
        public Raven.Client.IDocumentStore DocumentStore { get; set; }
        public System.Threading.Tasks.Task<string> Store(string bodyId, string contentType, int bodySize, System.IO.Stream bodyStream) { }
        public System.Threading.Tasks.Task<ServiceControl.Operations.BodyStorage.StreamResult> TryFetch(string bodyId) { }
    }
}
namespace ServiceControl.Recoverability
{
    public class AddressOfFailingEndpointClassifier : ServiceControl.Recoverability.IFailureClassifier
    {
        public const string Id = "Endpoint Address";
        public AddressOfFailingEndpointClassifier() { }
        public string Name { get; }
        public string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failureDetails) { }
    }
    public class ArchiveAllInGroup : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public ArchiveAllInGroup() { }
        public string GroupId { get; set; }
    }
    public class ArchiveAllInGroupHandler : NServiceBus.IHandleMessages<ServiceControl.Recoverability.ArchiveAllInGroup>
    {
        public ArchiveAllInGroupHandler(Raven.Client.IDocumentStore store, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents, ServiceControl.Recoverability.ArchiveDocumentManager documentManager, ServiceControl.Recoverability.ArchivingManager archiveOperationManager, ServiceControl.Recoverability.RetryingManager retryingManager) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Recoverability.ArchiveAllInGroup message, NServiceBus.IMessageHandlerContext context) { }
    }
    public class ArchiveBatch
    {
        public ArchiveBatch() { }
        public System.Collections.Generic.List<string> DocumentIds { get; set; }
        public string Id { get; set; }
        public static string MakeId(string requestId, ServiceControl.Recoverability.ArchiveType archiveType, int batchNumber) { }
    }
    public class ArchiveDocumentManager
    {
        public ArchiveDocumentManager() { }
        public System.Threading.Tasks.Task ArchiveMessageGroupBatch(Raven.Client.IAsyncDocumentSession session, ServiceControl.Recoverability.ArchiveBatch batch) { }
        public System.Threading.Tasks.Task<ServiceControl.Recoverability.ArchiveOperation> CreateArchiveOperation(Raven.Client.IAsyncDocumentSession session, string groupId, ServiceControl.Recoverability.ArchiveType archiveType, int numberOfMessages, string groupName, int batchSize) { }
        public System.Threading.Tasks.Task<ServiceControl.Recoverability.ArchiveBatch> GetArchiveBatch(Raven.Client.IAsyncDocumentSession session, string archiveOperationId, int batchNumber) { }
        public System.Threading.Tasks.Task<ServiceControl.Recoverability.ArchiveDocumentManager.GroupDetails> GetGroupDetails(Raven.Client.IAsyncDocumentSession session, string groupId) { }
        public System.Threading.Tasks.Task<ServiceControl.Recoverability.ArchiveOperation> LoadArchiveOperation(Raven.Client.IAsyncDocumentSession session, string groupId, ServiceControl.Recoverability.ArchiveType archiveType) { }
        public System.Threading.Tasks.Task RemoveArchiveOperation(Raven.Client.IDocumentStore store, ServiceControl.Recoverability.ArchiveOperation archiveOperation) { }
        public System.Threading.Tasks.Task UpdateArchiveOperation(Raven.Client.IAsyncDocumentSession session, ServiceControl.Recoverability.ArchiveOperation archiveOperation) { }
        public System.Threading.Tasks.Task<bool> WaitForIndexUpdateOfArchiveOperation(Raven.Client.IDocumentStore store, string requestId, ServiceControl.Recoverability.ArchiveType archiveType, System.TimeSpan timeToWait) { }
        public class GroupDetails
        {
            public GroupDetails() { }
            public string GroupName { get; set; }
            public int NumberOfMessagesInGroup { get; set; }
        }
    }
    public class ArchiveOperation
    {
        public ArchiveOperation() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public int CurrentBatch { get; set; }
        public string GroupName { get; set; }
        public string Id { get; set; }
        public int NumberOfBatches { get; set; }
        public int NumberOfMessagesArchived { get; set; }
        public string RequestId { get; set; }
        public System.DateTime Started { get; set; }
        public int TotalNumberOfMessages { get; set; }
        public static string MakeId(string requestId, ServiceControl.Recoverability.ArchiveType archiveType) { }
    }
    public class ArchiveOperationBatchCompleted : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public ArchiveOperationBatchCompleted() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.DateTime Last { get; set; }
        public ServiceControl.Recoverability.ArchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class ArchiveOperationCompleted : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public ArchiveOperationCompleted() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.DateTime CompletionTime { get; set; }
        public string GroupName { get; set; }
        public System.DateTime Last { get; set; }
        public ServiceControl.Recoverability.ArchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class ArchiveOperationFinalizing : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public ArchiveOperationFinalizing() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.DateTime Last { get; set; }
        public ServiceControl.Recoverability.ArchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class ArchiveOperationStarting : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public ArchiveOperationStarting() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public ServiceControl.Recoverability.ArchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public struct ArchiveProgress
    {
        public ArchiveProgress(double roundedPercentage, int totalNumberOfMessages, int numberOfMessagesArchived, int remaining) { }
        public int MessagesRemaining { get; set; }
        public int NumberOfMessagesArchived { get; set; }
        public double Percentage { get; set; }
        public int TotalNumberOfMessages { get; set; }
    }
    public enum ArchiveState
    {
        ArchiveStarted = 0,
        ArchiveProgressing = 1,
        ArchiveFinalizing = 2,
        ArchiveCompleted = 3,
    }
    public enum ArchiveType
    {
        Unknown = 0,
        SingleMessage = 1,
        FailureGroup = 2,
        MultipleMessages = 3,
        AllForEndpoint = 4,
        All = 5,
        ByQueueAddress = 6,
    }
    public class ArchivingFeature : NServiceBus.Features.Feature
    {
        public ArchivingFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class ArchivingManager
    {
        public ArchivingManager(ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public System.Threading.Tasks.Task ArchiveOperationCompleted(string requestId, ServiceControl.Recoverability.ArchiveType archiveType) { }
        public System.Threading.Tasks.Task ArchiveOperationFinalizing(string requestId, ServiceControl.Recoverability.ArchiveType archiveType) { }
        public System.Threading.Tasks.Task BatchArchived(string requestId, ServiceControl.Recoverability.ArchiveType archiveType, int numberOfMessagesArchivedInBatch) { }
        public void DismissArchiveOperation(string requestId, ServiceControl.Recoverability.ArchiveType archiveType) { }
        public ServiceControl.Recoverability.InMemoryArchive GetStatusForArchiveOperation(string requestId, ServiceControl.Recoverability.ArchiveType archiveType) { }
        public bool IsArchiveInProgressFor(string requestId) { }
        public bool IsOperationInProgressFor(string requestId, ServiceControl.Recoverability.ArchiveType archiveType) { }
        public System.Threading.Tasks.Task StartArchiving(ServiceControl.Recoverability.ArchiveOperation archiveOperation) { }
        public System.Threading.Tasks.Task StartArchiving(string requestId, ServiceControl.Recoverability.ArchiveType archiveType) { }
    }
    public struct ClassifiableMessageDetails
    {
        public ClassifiableMessageDetails(ServiceControl.MessageFailures.FailedMessage message) { }
        public ClassifiableMessageDetails(string messageType, ServiceControl.Contracts.Operations.FailureDetails failureDetails, ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt processingAttempt) { }
        public ServiceControl.Contracts.Operations.FailureDetails Details { get; }
        public string MessageType { get; }
        public ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt ProcessingAttempt { get; }
    }
    public class EndpointInstanceClassifier : ServiceControl.Recoverability.IFailureClassifier
    {
        public const string Id = "Endpoint Instance";
        public EndpointInstanceClassifier() { }
        public string Name { get; }
        public string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failureDetails) { }
    }
    public class EndpointNameClassifier : ServiceControl.Recoverability.IFailureClassifier
    {
        public const string Id = "Endpoint Name";
        public EndpointNameClassifier() { }
        public string Name { get; }
        public string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failureDetails) { }
    }
    public class ExceptionTypeAndStackTraceFailureClassifier : ServiceControl.Recoverability.IFailureClassifier
    {
        public const string Id = "Exception Type and Stack Trace";
        public ExceptionTypeAndStackTraceFailureClassifier() { }
        public string Name { get; }
        public string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failure) { }
        public class StackFrame
        {
            public StackFrame() { }
            public string File { get; set; }
            public string Line { get; set; }
            public string Method { get; set; }
            public string Params { get; set; }
            public string Type { get; set; }
            public string ToMethodIdentifier() { }
        }
    }
    public class FailedMessageClassification : NServiceBus.Features.Feature
    {
        public FailedMessageClassification() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class FailedMessageGroupArchived : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public FailedMessageGroupArchived() { }
        public string GroupId { get; set; }
        public string GroupName { get; set; }
        public int MessagesCount { get; set; }
    }
    public class FailedMessageRetries : NServiceBus.Features.Feature
    {
        public FailedMessageRetries() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class FailedMessageRetries_ByBatch : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.Recoverability.FailedMessageRetry>
    {
        public FailedMessageRetries_ByBatch() { }
    }
    public class FailedMessageRetry
    {
        public const string CollectionName = "FailedMessageRetries";
        public FailedMessageRetry() { }
        public string FailedMessageId { get; set; }
        public string Id { get; set; }
        public string RetryBatchId { get; set; }
        public static string MakeDocumentId(string messageUniqueId) { }
    }
    public class FailedMessageRetryCleaner : ServiceControl.Infrastructure.DomainEvents.IDomainHandler<ServiceControl.Contracts.MessageFailures.MessageFailed>
    {
        public FailedMessageRetryCleaner() { }
        public ServiceControl.Recoverability.RetryDocumentManager RetryDocumentManager { get; set; }
        public System.Threading.Tasks.Task Handle(ServiceControl.Contracts.MessageFailures.MessageFailed message) { }
    }
    public class FailedMessages_ByGroup : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage, ServiceControl.Recoverability.FailureGroupMessageView>
    {
        public FailedMessages_ByGroup() { }
    }
    public class FailureGroupMessageView : ServiceControl.MessageFailures.IHaveStatus
    {
        public FailureGroupMessageView() { }
        public string FailureGroupId { get; set; }
        public string FailureGroupName { get; set; }
        public string Id { get; set; }
        public long LastModified { get; set; }
        public string MessageId { get; set; }
        public string MessageType { get; set; }
        public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
        public System.DateTime TimeOfFailure { get; set; }
        public System.DateTime TimeSent { get; set; }
    }
    public class FailureGroupsApi : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public FailureGroupsApi() { }
        public System.Lazy<NServiceBus.IEndpointInstance> Bus { get; set; }
        public System.Collections.Generic.IEnumerable<ServiceControl.Recoverability.IFailureClassifier> Classifiers { get; set; }
        public ServiceControl.Recoverability.GroupFetcher GroupFetcher { get; set; }
    }
    public class FailureGroupsArchiveApi : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public FailureGroupsArchiveApi() { }
        public ServiceControl.Recoverability.ArchivingManager ArchiveOperationManager { get; set; }
        public System.Lazy<NServiceBus.IEndpointInstance> Bus { get; set; }
    }
    public class FailureGroupsRetryApi : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public FailureGroupsRetryApi() { }
        public System.Lazy<NServiceBus.IEndpointInstance> Bus { get; set; }
        public ServiceControl.Recoverability.RetryingManager RetryOperationManager { get; set; }
    }
    public class FailureGroupsViewIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage, ServiceControl.Recoverability.FailureGroupView>
    {
        public FailureGroupsViewIndex() { }
    }
    public class FailureGroupView
    {
        public FailureGroupView() { }
        public int Count { get; set; }
        public System.DateTime First { get; set; }
        public string Id { get; set; }
        public System.DateTime Last { get; set; }
        public string Title { get; set; }
        public string Type { get; set; }
    }
    public class GroupFetcher
    {
        public GroupFetcher(ServiceControl.Recoverability.RetryingManager retryingManager, ServiceControl.Recoverability.ArchivingManager archivingManager) { }
        public System.Threading.Tasks.Task<GroupOperation[]> GetGroups(Raven.Client.IAsyncDocumentSession session, string classifier, string classifierFilter) { }
    }
    public class HistoricRetryOperation
    {
        public HistoricRetryOperation() { }
        public System.DateTime CompletionTime { get; set; }
        public bool Failed { get; set; }
        public int NumberOfMessagesProcessed { get; set; }
        public string Originator { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Recoverability.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public interface IFailedMessageEnricher
    {
        System.Collections.Generic.IEnumerable<ServiceControl.MessageFailures.FailedMessage.FailureGroup> Enrich(string messageType, ServiceControl.Contracts.Operations.FailureDetails failureDetails, ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt processingAttempt);
    }
    public interface IFailureClassifier
    {
        string Name { get; }
        string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failureDetails);
    }
    public class InMemoryArchive
    {
        public InMemoryArchive(string requestId, ServiceControl.Recoverability.ArchiveType archiveType, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public ServiceControl.Recoverability.ArchiveState ArchiveState { get; set; }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.Nullable<System.DateTime> CompletionTime { get; set; }
        public int CurrentBatch { get; set; }
        public string GroupName { get; set; }
        public System.Nullable<System.DateTime> Last { get; set; }
        public int NumberOfBatches { get; set; }
        public int NumberOfMessagesArchived { get; set; }
        public string RequestId { get; set; }
        public System.DateTime Started { get; set; }
        public int TotalNumberOfMessages { get; set; }
        public ServiceControl.Recoverability.ArchiveProgress GetProgress() { }
        public static string MakeId(string requestId, ServiceControl.Recoverability.ArchiveType archiveType) { }
    }
    public class InMemoryRetry
    {
        public InMemoryRetry(string requestId, ServiceControl.Recoverability.RetryType retryType, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public string Classifier { get; }
        public System.Nullable<System.DateTime> CompletionTime { get; }
        public bool Failed { get; }
        public System.Nullable<System.DateTime> Last { get; }
        public int NumberOfMessagesForwarded { get; }
        public int NumberOfMessagesPrepared { get; }
        public int NumberOfMessagesSkipped { get; set; }
        public string Originator { get; }
        public ServiceControl.Recoverability.RetryState RetryState { get; }
        public System.DateTime Started { get; }
        public int TotalNumberOfMessages { get; }
        public System.Threading.Tasks.Task BatchForwarded(int numberOfMessagesForwarded) { }
        public void Fail() { }
        public System.Threading.Tasks.Task Forwarding() { }
        public ServiceControl.Recoverability.RetryProgress GetProgress() { }
        public bool IsInProgress() { }
        public static string MakeOperationId(string requestId, ServiceControl.Recoverability.RetryType retryType) { }
        public bool NeedsAcknowledgement() { }
        public System.Threading.Tasks.Task Prepare(int totalNumberOfMessages) { }
        public System.Threading.Tasks.Task PrepareAdoptedBatch(int numberOfMessagesPrepared, string originator, string classifier, System.DateTime startTime, System.DateTime last) { }
        public System.Threading.Tasks.Task PrepareBatch(int numberOfMessagesPrepared) { }
        public System.Threading.Tasks.Task Skip(int numberOfMessagesSkipped) { }
        public System.Threading.Tasks.Task Wait(System.DateTime started, string originator = null, string classifier = null, System.Nullable<System.DateTime> last = null) { }
    }
    public class MessagesSubmittedForRetry : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public MessagesSubmittedForRetry() { }
        public string Context { get; set; }
        public string[] FailedMessageIds { get; set; }
        public int NumberOfFailedMessages { get; set; }
    }
    public class MessagesSubmittedForRetryFailed : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public MessagesSubmittedForRetryFailed() { }
        public string Destination { get; set; }
        public string FailedMessageId { get; set; }
        public string Reason { get; set; }
    }
    public class MessageTypeFailureClassifier : ServiceControl.Recoverability.IFailureClassifier
    {
        public const string Id = "Message Type";
        public MessageTypeFailureClassifier() { }
        public string Name { get; }
        public string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failureDetails) { }
    }
    public class static OperationProgressCalculator
    {
        public static double CalculateProgress(int totalNumberOfMessages, int numberOfMessagesPrepared, int numberOfMessagesForwarded, int numberOfMessagesSkipped, ServiceControl.Recoverability.RetryState state) { }
        public static double CalculateProgress(int totalNumberOfMessages, int numberOfMessagesArchived, ServiceControl.Recoverability.ArchiveState state) { }
    }
    public class PendingRetriesHandler : NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.RetryPendingMessages>, NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.RetryPendingMessagesById>
    {
        public PendingRetriesHandler(Raven.Client.IDocumentStore store, ServiceControl.Recoverability.RetryDocumentManager manager) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.RetryPendingMessages message, NServiceBus.IMessageHandlerContext context) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.RetryPendingMessagesById message, NServiceBus.IMessageHandlerContext context) { }
    }
    public class RawEndpointFactory
    {
        public RawEndpointFactory(ServiceBus.Management.Infrastructure.Settings.Settings settings, ServiceControl.Transports.TransportSettings transportSettings, ServiceControl.Transports.TransportCustomization transportCustomization) { }
        public NServiceBus.Raw.RawEndpointConfiguration CreateRawEndpointConfiguration(string name, System.Func<NServiceBus.Transport.MessageContext, NServiceBus.Transport.IDispatchMessages, System.Threading.Tasks.Task> onMessage, NServiceBus.Transport.TransportDefinition transportDefinition) { }
    }
    public class Reclassifier { }
    public class ReclassifyErrorSettings
    {
        public const string IdentifierCase = "ReclassifyErrorSettings/1";
        public ReclassifyErrorSettings() { }
        public string Id { get; set; }
        public bool ReclassificationDone { get; set; }
    }
    public class RetriesGateway
    {
        public RetriesGateway(Raven.Client.IDocumentStore store, ServiceControl.Recoverability.RetryDocumentManager documentManager) { }
        public ServiceControl.Recoverability.RetryingManager OperationManager { get; set; }
        public void StartRetryForIndex<TType, TIndex>(string requestId, ServiceControl.Recoverability.RetryType retryType, System.DateTime startTime, System.Linq.Expressions.Expression<System.Func<TType, bool>> filter = null, string originator = null, string classifier = null)
            where TType : ServiceControl.MessageFailures.IHaveStatus
            where TIndex : Raven.Client.Indexes.AbstractIndexCreationTask, new () { }
        public System.Threading.Tasks.Task StartRetryForMessageSelection(string[] uniqueMessageIds) { }
        public System.Threading.Tasks.Task StartRetryForSingleMessage(string uniqueMessageId) { }
    }
    public class RetriesHandler : NServiceBus.IHandleMessages<ServiceControl.Contracts.MessageFailures.MessageFailed>, NServiceBus.IHandleMessages<ServiceControl.Contracts.MessageFailures.MessageFailedRepeatedly>, NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.RequestRetryAll>, NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.RetryMessage>, NServiceBus.IHandleMessages<ServiceControl.Recoverability.RetryMessagesById>, NServiceBus.IHandleMessages<ServiceControl.Recoverability.RetryMessagesByQueueAddress>
    {
        public RetriesHandler() { }
        public ServiceControl.Recoverability.RetriesGateway Retries { get; set; }
        public ServiceControl.Recoverability.RetryDocumentManager RetryDocumentManager { get; set; }
        public System.Threading.Tasks.Task Handle(ServiceControl.Contracts.MessageFailures.MessageFailed message, NServiceBus.IMessageHandlerContext context) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Contracts.MessageFailures.MessageFailedRepeatedly message, NServiceBus.IMessageHandlerContext context) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.RequestRetryAll message, NServiceBus.IMessageHandlerContext context) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.RetryMessage message, NServiceBus.IMessageHandlerContext context) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Recoverability.RetryMessagesById message, NServiceBus.IMessageHandlerContext context) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Recoverability.RetryMessagesByQueueAddress message, NServiceBus.IMessageHandlerContext context) { }
    }
    public class RetryAllInGroup : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RetryAllInGroup() { }
        public string GroupId { get; set; }
        public System.Nullable<System.DateTime> Started { get; set; }
    }
    public class RetryAllInGroupHandler : NServiceBus.IHandleMessages<ServiceControl.Recoverability.RetryAllInGroup>
    {
        public RetryAllInGroupHandler() { }
        public ServiceControl.Recoverability.ArchivingManager ArchivingManager { get; set; }
        public ServiceControl.Recoverability.RetriesGateway Retries { get; set; }
        public ServiceControl.Recoverability.RetryingManager RetryingManager { get; set; }
        public Raven.Client.IDocumentStore Store { get; set; }
        public System.Threading.Tasks.Task Handle(ServiceControl.Recoverability.RetryAllInGroup message, NServiceBus.IMessageHandlerContext context) { }
    }
    public class RetryBatch
    {
        public RetryBatch() { }
        public string Classifier { get; set; }
        public string Context { get; set; }
        public System.Collections.Generic.IList<string> FailureRetries { get; set; }
        public string Id { get; set; }
        public int InitialBatchSize { get; set; }
        public System.Nullable<System.DateTime> Last { get; set; }
        public string Originator { get; set; }
        public string RequestId { get; set; }
        public string RetrySessionId { get; set; }
        public ServiceControl.Recoverability.RetryType RetryType { get; set; }
        public string StagingId { get; set; }
        public System.DateTime StartTime { get; set; }
        public ServiceControl.Recoverability.RetryBatchStatus Status { get; set; }
        public static string MakeDocumentId(string messageUniqueId) { }
    }
    public class RetryBatches_ByStatus_ReduceInitialBatchSize : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.Recoverability.RetryBatch, ServiceControl.Recoverability.RetryBatchGroup>
    {
        public RetryBatches_ByStatus_ReduceInitialBatchSize() { }
    }
    public class RetryBatches_ByStatusAndSession : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.Recoverability.RetryBatch>
    {
        public RetryBatches_ByStatusAndSession() { }
    }
    public class RetryBatchGroup
    {
        public RetryBatchGroup() { }
        public string Classifier { get; set; }
        public bool HasForwardingBatches { get; set; }
        public bool HasStagingBatches { get; set; }
        public int InitialBatchSize { get; set; }
        public System.DateTime Last { get; set; }
        public string Originator { get; set; }
        public string RequestId { get; set; }
        [Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute(NullValueHandling=Raven.Imports.Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceControl.Recoverability.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class RetryBatchNowForwarding
    {
        public const string Id = "RetryBatches/NowForwarding";
        public RetryBatchNowForwarding() { }
        public string RetryBatchId { get; set; }
    }
    public enum RetryBatchStatus
    {
        MarkingDocuments = 1,
        Staging = 2,
        Forwarding = 3,
    }
    public class RetryDocumentManager
    {
        protected static string RetrySessionId;
        public RetryDocumentManager(ServiceControl.Infrastructure.ShutdownNotifier notifier, Raven.Client.IDocumentStore store) { }
        public ServiceControl.Recoverability.RetryingManager OperationManager { get; set; }
        public System.Threading.Tasks.Task<string> CreateBatchDocument(string requestId, ServiceControl.Recoverability.RetryType retryType, string[] failedMessageRetryIds, string originator, System.DateTime startTime, System.Nullable<System.DateTime> last = null, string batchName = null, string classifier = null) { }
        public Raven.Abstractions.Commands.ICommandData CreateFailedMessageRetryDocument(string batchDocumentId, string messageId) { }
        public virtual System.Threading.Tasks.Task MoveBatchToStaging(string batchDocumentId) { }
        public System.Threading.Tasks.Task RemoveFailedMessageRetryDocument(string uniqueMessageId) { }
    }
    public class RetryHandlerForBackwardsCompatability : NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.PerformRetry>, NServiceBus.IHandleMessages<ServiceControl.MessageFailures.InternalMessages.RegisterSuccessfulRetry>
    {
        public RetryHandlerForBackwardsCompatability() { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.PerformRetry message, NServiceBus.IMessageHandlerContext context) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.MessageFailures.InternalMessages.RegisterSuccessfulRetry message, NServiceBus.IMessageHandlerContext context) { }
    }
    public class RetryHistory
    {
        public RetryHistory() { }
        public System.Collections.Generic.List<ServiceControl.Recoverability.HistoricRetryOperation> HistoricOperations { get; set; }
        public string Id { get; set; }
        public System.Collections.Generic.List<ServiceControl.Recoverability.UnacknowledgedRetryOperation> UnacknowledgedOperations { get; set; }
        public bool Acknowledge(string requestId, ServiceControl.Recoverability.RetryType type) { }
        public void AddToHistory(ServiceControl.Recoverability.HistoricRetryOperation historicOperation, int historyDepth) { }
        public void AddToUnacknowledged(ServiceControl.Recoverability.UnacknowledgedRetryOperation unacknowledgedRetryOperation) { }
        public static ServiceControl.Recoverability.RetryHistory CreateNew() { }
        public string GetHistoryOperationsUniqueIdentifier() { }
        public ServiceControl.Recoverability.UnacknowledgedRetryOperation[] GetUnacknowledgedByClassifier(string classifier) { }
        public static string MakeId() { }
    }
    public class RetryingFeature : NServiceBus.Features.Feature
    {
        public RetryingFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class RetryingManager
    {
        public RetryingManager(ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents) { }
        public void Fail(ServiceControl.Recoverability.RetryType retryType, string requestId) { }
        public System.Threading.Tasks.Task ForwardedBatch(string requestId, ServiceControl.Recoverability.RetryType retryType, int numberOfMessagesForwarded) { }
        public System.Threading.Tasks.Task Forwarding(string requestId, ServiceControl.Recoverability.RetryType retryType) { }
        public ServiceControl.Recoverability.InMemoryRetry GetStatusForRetryOperation(string requestId, ServiceControl.Recoverability.RetryType retryType) { }
        public bool IsOperationInProgressFor(string requestId, ServiceControl.Recoverability.RetryType retryType) { }
        public bool IsRetryInProgressFor(string requestId) { }
        public System.Threading.Tasks.Task Prepairing(string requestId, ServiceControl.Recoverability.RetryType retryType, int totalNumberOfMessages) { }
        public System.Threading.Tasks.Task PreparedAdoptedBatch(string requestId, ServiceControl.Recoverability.RetryType retryType, int numberOfMessagesPrepared, int totalNumberOfMessages, string originator, string classifier, System.DateTime startTime, System.DateTime last) { }
        public System.Threading.Tasks.Task PreparedBatch(string requestId, ServiceControl.Recoverability.RetryType retryType, int numberOfMessagesPrepared) { }
        public System.Threading.Tasks.Task Skip(string requestId, ServiceControl.Recoverability.RetryType retryType, int numberOfMessagesSkipped) { }
        public System.Threading.Tasks.Task Wait(string requestId, ServiceControl.Recoverability.RetryType retryType, System.DateTime started, string originator = null, string classifier = null, System.Nullable<System.DateTime> last = null) { }
    }
    public class RetryMessagesById : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RetryMessagesById() { }
        public string[] MessageUniqueIds { get; set; }
    }
    public class RetryMessagesByQueueAddress : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RetryMessagesByQueueAddress() { }
        public string QueueAddress { get; set; }
        public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
    }
    public class RetryMessagesForwarded : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryMessagesForwarded() { }
        public bool IsFailed { get; set; }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Recoverability.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
        public int TotalNumberOfMessages { get; set; }
    }
    public class RetryOperationCompleted : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryOperationCompleted() { }
        public string Classifier { get; set; }
        public System.DateTime CompletionTime { get; set; }
        public bool Failed { get; set; }
        public System.DateTime Last { get; set; }
        public int NumberOfMessagesProcessed { get; set; }
        public string Originator { get; set; }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Recoverability.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class RetryOperationForwarding : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryOperationForwarding() { }
        public bool IsFailed { get; set; }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Recoverability.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
        public int TotalNumberOfMessages { get; set; }
    }
    public class RetryOperationPreparing : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryOperationPreparing() { }
        public bool IsFailed { get; set; }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Recoverability.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
        public int TotalNumberOfMessages { get; set; }
    }
    public class RetryOperationWaiting : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryOperationWaiting() { }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Recoverability.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public struct RetryProgress
    {
        public RetryProgress(double percentage, int messagesPrepared, int messagesForwarded, int messagesSkipped, int messagesRemaining) { }
        public int MessagesForwarded { get; set; }
        public int MessagesPrepared { get; set; }
        public int MessagesRemaining { get; set; }
        public int MessagesSkipped { get; set; }
        public double Percentage { get; set; }
    }
    public enum RetryState
    {
        Waiting = 0,
        Preparing = 1,
        Forwarding = 2,
        Completed = 3,
    }
    public enum RetryType
    {
        Unknown = 0,
        SingleMessage = 1,
        FailureGroup = 2,
        MultipleMessages = 3,
        AllForEndpoint = 4,
        All = 5,
        ByQueueAddress = 6,
    }
    public class ReturnToSender
    {
        public ReturnToSender(ServiceControl.Operations.BodyStorage.IBodyStorage bodyStorage) { }
        public virtual System.Threading.Tasks.Task HandleMessage(NServiceBus.Transport.MessageContext message, NServiceBus.Transport.IDispatchMessages sender) { }
    }
    public class ReturnToSenderDequeuer
    {
        public ReturnToSenderDequeuer(NServiceBus.Transport.TransportDefinition transportDefinition, ServiceControl.Recoverability.ReturnToSender returnToSender, Raven.Client.IDocumentStore store, ServiceControl.Infrastructure.DomainEvents.IDomainEvents domainEvents, string endpointName, ServiceControl.Recoverability.RawEndpointFactory rawEndpointFactory) { }
        public string InputAddress { get; }
        public System.Threading.Tasks.Task CreateQueue() { }
        public virtual System.Threading.Tasks.Task Run(System.Predicate<NServiceBus.Transport.MessageContext> filter, System.Threading.CancellationToken cancellationToken, System.Nullable<int> expectedMessageCount = null) { }
        public System.Threading.Tasks.Task Stop() { }
    }
    public class ReturnToSenderDequeuerFeature : NServiceBus.Features.Feature
    {
        public ReturnToSenderDequeuerFeature() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class UnacknowledgedGroupsApi : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public UnacknowledgedGroupsApi() { }
        public ServiceControl.Recoverability.ArchivingManager ArchiveOperationManager { get; set; }
        public ServiceControl.Recoverability.RetryingManager RetryingOperationManager { get; set; }
    }
    public class UnacknowledgedRetryOperation
    {
        public UnacknowledgedRetryOperation() { }
        public string Classifier { get; set; }
        public System.DateTime CompletionTime { get; set; }
        public bool Failed { get; set; }
        public System.DateTime Last { get; set; }
        public int NumberOfMessagesProcessed { get; set; }
        public string Originator { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Recoverability.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
}
namespace ServiceControl.Recoverability.Retrying
{
    public class StoreHistoryHandler : ServiceControl.Infrastructure.DomainEvents.IDomainHandler<ServiceControl.Recoverability.RetryOperationCompleted>
    {
        public StoreHistoryHandler(Raven.Client.IDocumentStore store, ServiceBus.Management.Infrastructure.Settings.Settings settings) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Recoverability.RetryOperationCompleted message) { }
    }
}
namespace ServiceControl.SagaAudit
{
    public class ApiModule : ServiceBus.Management.Infrastructure.Nancy.Modules.BaseModule
    {
        public ApiModule() { }
        public ServiceControl.SagaAudit.GetSagaByIdApi GetSagaByIdApi { get; set; }
    }
    public class GetSagaByIdApi : ServiceControl.CompositeViews.Messages.ScatterGatherApi<System.Guid, ServiceControl.SagaAudit.SagaHistory>
    {
        public GetSagaByIdApi() { }
        public override System.Threading.Tasks.Task<ServiceControl.CompositeViews.Messages.QueryResult<ServiceControl.SagaAudit.SagaHistory>> LocalQuery(Nancy.Request request, System.Guid sagaId) { }
        protected override ServiceControl.SagaAudit.SagaHistory ProcessResults(Nancy.Request request, ServiceControl.CompositeViews.Messages.QueryResult<>[] results) { }
    }
    public class InitiatingMessage
    {
        public InitiatingMessage() { }
        public string Intent { get; set; }
        public bool IsSagaTimeoutMessage { get; set; }
        public string MessageId { get; set; }
        public string MessageType { get; set; }
        public string OriginatingEndpoint { get; set; }
        public string OriginatingMachine { get; set; }
        public System.DateTime TimeSent { get; set; }
    }
    public class ResultingMessage
    {
        public ResultingMessage() { }
        public System.Nullable<System.DateTime> DeliverAt { get; set; }
        public System.Nullable<System.TimeSpan> DeliveryDelay { get; set; }
        public string Destination { get; set; }
        public string Intent { get; set; }
        public string MessageId { get; set; }
        public string MessageType { get; set; }
        public System.DateTime TimeSent { get; set; }
    }
    public class SagaAuditing : NServiceBus.Features.Feature
    {
        public SagaAuditing() { }
        protected override void Setup(NServiceBus.Features.FeatureConfigurationContext context) { }
    }
    public class SagaDetailsIndex : Raven.Client.Indexes.AbstractMultiMapIndexCreationTask<ServiceControl.SagaAudit.SagaHistory>
    {
        public SagaDetailsIndex() { }
    }
    public class SagaHistory
    {
        public SagaHistory() { }
        public System.Collections.Generic.List<ServiceControl.SagaAudit.SagaStateChange> Changes { get; set; }
        public System.Guid Id { get; set; }
        public System.Guid SagaId { get; set; }
        public string SagaType { get; set; }
    }
    public class SagaInfo
    {
        public SagaInfo() { }
        public string ChangeStatus { get; set; }
        public System.Guid SagaId { get; set; }
        public string SagaType { get; set; }
    }
    public class SagaListIndex : Raven.Client.Indexes.AbstractMultiMapIndexCreationTask<ServiceControl.SagaAudit.SagaListIndex.Result>
    {
        public SagaListIndex() { }
        public class Result
        {
            public System.Guid Id;
            public string SagaType;
            public string Uri;
            public Result() { }
        }
    }
    public class SagaSnapshot
    {
        public SagaSnapshot() { }
        public string Endpoint { get; set; }
        public System.DateTime FinishTime { get; set; }
        public System.Guid Id { get; set; }
        public ServiceControl.SagaAudit.InitiatingMessage InitiatingMessage { get; set; }
        public System.Collections.Generic.List<ServiceControl.SagaAudit.ResultingMessage> OutgoingMessages { get; set; }
        public System.DateTime ProcessedAt { get; set; }
        public System.Guid SagaId { get; set; }
        public string SagaType { get; set; }
        public System.DateTime StartTime { get; set; }
        public string StateAfterChange { get; set; }
        public ServiceControl.SagaAudit.SagaStateChangeStatus Status { get; set; }
    }
    public class SagaStateChange
    {
        public SagaStateChange() { }
        public string Endpoint { get; set; }
        public System.DateTime FinishTime { get; set; }
        public ServiceControl.SagaAudit.InitiatingMessage InitiatingMessage { get; set; }
        public System.Collections.Generic.List<ServiceControl.SagaAudit.ResultingMessage> OutgoingMessages { get; set; }
        public System.DateTime StartTime { get; set; }
        public string StateAfterChange { get; set; }
        public ServiceControl.SagaAudit.SagaStateChangeStatus Status { get; set; }
    }
    public enum SagaStateChangeStatus
    {
        New = 0,
        Updated = 1,
        Completed = 2,
    }
}