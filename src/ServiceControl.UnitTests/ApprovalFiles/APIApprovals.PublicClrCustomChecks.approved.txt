[assembly: System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.7.2", FrameworkDisplayName=".NET Framework 4.7.2")]
namespace ServiceControl.Contracts.CustomChecks
{
    public class CustomCheckFailed : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public CustomCheckFailed() { }
        public string Category { get; set; }
        public string CustomCheckId { get; set; }
        public System.DateTime FailedAt { get; set; }
        public string FailureReason { get; set; }
        public System.Guid Id { get; set; }
        public ServiceControl.Contracts.CustomChecks.EndpointDetails OriginatingEndpoint { get; set; }
    }
    public class CustomCheckSucceeded : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public CustomCheckSucceeded() { }
        public string Category { get; set; }
        public string CustomCheckId { get; set; }
        public System.Guid Id { get; set; }
        public ServiceControl.Contracts.CustomChecks.EndpointDetails OriginatingEndpoint { get; set; }
        public System.DateTime SucceededAt { get; set; }
    }
    public class EndpointDetails
    {
        public EndpointDetails() { }
        public string Host { get; set; }
        public System.Guid HostId { get; set; }
        public string Name { get; set; }
    }
}
namespace ServiceControl.CustomChecks
{
    public class CustomCheck
    {
        public CustomCheck() { }
        public string Category { get; set; }
        public string CustomCheckId { get; set; }
        public string FailureReason { get; set; }
        public System.Guid Id { get; set; }
        public ServiceControl.Contracts.CustomChecks.EndpointDetails OriginatingEndpoint { get; set; }
        public System.DateTime ReportedAt { get; set; }
        public ServiceControl.CustomChecks.Status Status { get; set; }
    }
    public class CustomCheckController : System.Web.Http.ApiController
    {
        [System.Web.Http.HttpGet]
        [System.Web.Http.Route("customchecks")]
        public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CustomChecks(string status = null) { }
        [System.Web.Http.HttpDelete]
        [System.Web.Http.Route("customchecks/{id}")]
        public System.Threading.Tasks.Task<System.Web.Http.Results.StatusCodeResult> Delete(System.Guid id) { }
    }
    public class CustomCheckDeleted : ServiceControl.Infrastructure.DomainEvents.IDomainEvent
    {
        public CustomCheckDeleted() { }
        public System.Guid Id { get; set; }
    }
    public class CustomChecksIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.CustomChecks.CustomCheck>
    {
        public CustomChecksIndex() { }
    }
    public class CustomChecksUpdated : ServiceControl.Infrastructure.DomainEvents.IDomainEvent, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public CustomChecksUpdated() { }
        public int Failed { get; set; }
        public System.DateTime RaisedAt { get; set; }
    }
    public enum Status
    {
        Fail = 0,
        Pass = 1,
    }
}
namespace ServiceControl.CustomChecks.Internal
{
    public class CheckResult
    {
        public static ServiceControl.CustomChecks.Internal.CheckResult Pass;
        public CheckResult() { }
        public string FailureReason { get; set; }
        public bool HasFailed { get; set; }
        public static ServiceControl.CustomChecks.Internal.CheckResult Failed(string reason) { }
        public static System.Threading.Tasks.Task<ServiceControl.CustomChecks.Internal.CheckResult> op_Implicit(ServiceControl.CustomChecks.Internal.CheckResult result) { }
    }
    public abstract class CustomCheck : ServiceControl.CustomChecks.Internal.ICustomCheck
    {
        protected CustomCheck(string id, string category, System.TimeSpan? repeatAfter = default) { }
        public string Category { get; }
        public string Id { get; }
        public System.TimeSpan? Interval { get; }
        public abstract System.Threading.Tasks.Task<ServiceControl.CustomChecks.Internal.CheckResult> PerformCheck(System.Threading.CancellationToken cancellationToken = default);
    }
    public static class CustomChecksHostBuilderExtensions
    {
        public static Microsoft.Extensions.Hosting.IHostBuilder UseCustomChecks(this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, string serviceName, bool settingsDisableHealthChecks = false) { }
    }
    public interface ICustomCheck
    {
        string Category { get; }
        string Id { get; }
        System.TimeSpan? Interval { get; }
        System.Threading.Tasks.Task<ServiceControl.CustomChecks.Internal.CheckResult> PerformCheck(System.Threading.CancellationToken cancellationToken = default);
    }
    public static class InternalCustomChecksServiceCollectionExtensions
    {
        public static void AddCustomCheck<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)
            where T :  class, ServiceControl.CustomChecks.Internal.ICustomCheck { }
    }
}