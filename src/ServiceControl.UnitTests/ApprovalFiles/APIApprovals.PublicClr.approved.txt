[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.AcceptanceTesting")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.AcceptanceTests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.MultiInstance.AcceptanceTests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Persistence.InMemory")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Persistence.RavenDb")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Persistence.SqlServer")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.PersistenceTests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.UnitTests")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.7.2", FrameworkDisplayName=".NET Framework 4.7.2")]
public class GroupOperation
{
    public GroupOperation() { }
    public string Comment { get; set; }
    public int Count { get; set; }
    public System.DateTime? First { get; set; }
    public string Id { get; set; }
    public System.DateTime? Last { get; set; }
    public bool NeedUserAcknowledgement { get; set; }
    public System.DateTime? OperationCompletionTime { get; set; }
    public bool? OperationFailed { get; set; }
    public int? OperationMessagesCompletedCount { get; set; }
    public double OperationProgress { get; set; }
    public int? OperationRemainingCount { get; set; }
    public System.DateTime? OperationStartTime { get; set; }
    public string OperationStatus { get; set; }
    public string Title { get; set; }
    public string Type { get; set; }
}
namespace ServiceBus.Management.Infrastructure.Installers
{
    public static class EventSourceCreator
    {
        public const string SourceName = "ServiceControl";
        public static void Create() { }
    }
}
namespace ServiceBus.Management.Infrastructure.Settings
{
    public static class DataStoreConfig
    {
        public static string InMemoryPersistenceTypeFullyQualifiedName;
        public static string RavenDB35PersistenceTypeFullyQualifiedName;
        public static string SqlServerPersistenceTypeFullyQualifiedName;
    }
    public enum DataStoreType
    {
        InMemory = 1,
        RavenDB35 = 2,
        SqlDb = 3,
    }
    public class RemoteInstanceSetting
    {
        public RemoteInstanceSetting() { }
        [Newtonsoft.Json.JsonIgnore]
        public System.Uri ApiAsUri { get; }
        public string ApiUri { get; set; }
        [Newtonsoft.Json.JsonIgnore]
        public bool TemporarilyUnavailable { get; set; }
    }
    public class Settings
    {
        public const string DEFAULT_SERVICE_NAME = "Particular.ServiceControl";
        public const string Disabled = "!disable";
        public Settings(string serviceName = null) { }
        public bool AllowMessageEditing { get; set; }
        public string ApiUrl { get; }
        public System.TimeSpan? AuditRetentionPeriod { get; }
        public int DataSpaceRemainingThreshold { get; set; }
        public ServiceBus.Management.Infrastructure.Settings.DataStoreType DataStoreType { get; set; }
        public int DatabaseMaintenancePort { get; set; }
        public string DatabaseMaintenanceUrl { get; }
        public string DbPath { get; set; }
        public bool DisableExternalIntegrationsPublishing { get; set; }
        public bool DisableHealthChecks { get; set; }
        public string EmailDropFolder { get; set; }
        public bool EnableFullTextSearchOnBodies { get; set; }
        public string ErrorLogQueue { get; set; }
        public string ErrorQueue { get; set; }
        public System.TimeSpan ErrorRetentionPeriod { get; }
        public System.TimeSpan EventsRetentionPeriod { get; }
        public int ExpirationProcessBatchSize { get; }
        public int ExpirationProcessTimerInSeconds { get; }
        public bool ExposeApi { get; set; }
        public bool ExposeRavenDB { get; }
        public int ExternalIntegrationsDispatchingBatchSize { get; }
        public bool ForwardErrorMessages { get; set; }
        public System.TimeSpan HeartbeatGracePeriod { get; }
        public string Hostname { get; }
        public int HttpDefaultConnectionLimit { get; set; }
        public bool IngestErrorMessages { get; set; }
        public string LicenseFileText { get; set; }
        public int MaximumConcurrencyLevel { get; set; }
        public System.Func<NServiceBus.Transport.MessageContext, bool> MessageFilter { get; set; }
        public int MinimumStorageLeftRequiredForIngestion { get; set; }
        public string NotificationsFilter { get; set; }
        public int Port { get; set; }
        public bool PrintMetrics { get; }
        public System.TimeSpan ProcessRetryBatchesFrequency { get; set; }
        public ServiceBus.Management.Infrastructure.Settings.RemoteInstanceSetting[] RemoteInstances { get; set; }
        public int RetryHistoryDepth { get; set; }
        public string RootUrl { get; }
        public bool RunCleanupBundle { get; set; }
        public bool RunInMemory { get; set; }
        public bool RunRetryProcessor { get; set; }
        public string ServiceName { get; }
        public bool SkipQueueCreation { get; set; }
        public string StagingQueue { get; }
        public string StorageUrl { get; }
        public System.TimeSpan TimeToRestartErrorIngestionAfterFailure { get; set; }
        public string TransportConnectionString { get; set; }
        public string TransportType { get; set; }
        public bool ValidateConfiguration { get; }
        public string VirtualDirectory { get; }
        public string GetConnectionString() { }
        public ServiceControl.Transports.TransportCustomization LoadTransportCustomization() { }
    }
}
namespace ServiceControl.Audit.Monitoring
{
    public class DisableEndpointMonitoring : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public DisableEndpointMonitoring() { }
        public System.Guid EndpointId { get; set; }
    }
    public class EnableEndpointMonitoring : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public EnableEndpointMonitoring() { }
        public System.Guid EndpointId { get; set; }
    }
}
namespace ServiceControl.CompositeViews.MessageCounting
{
    public class AuditCount
    {
        public AuditCount() { }
        public long Count { get; set; }
        public System.DateTime UtcDate { get; set; }
    }
}
namespace ServiceControl.CompositeViews.Messages
{
    public class MessagesBodyTransformer : Raven.Client.Indexes.AbstractTransformerCreationTask<ServiceControl.CompositeViews.Messages.MessagesBodyTransformer.Input>
    {
        public MessagesBodyTransformer() { }
        public static string Name { get; }
        public class Input
        {
            public Input() { }
            public System.Collections.Generic.Dictionary<string, object> MessageMetadata { get; set; }
            public System.Collections.Generic.List<ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt> ProcessingAttempts { get; set; }
        }
        public class Result
        {
            public Result() { }
            public string Body { get; set; }
            public bool BodyNotStored { get; set; }
            public int BodySize { get; set; }
            public string ContentType { get; set; }
            public string MessageId { get; set; }
        }
    }
    public class MessagesView
    {
        public MessagesView() { }
        public int BodySize { get; set; }
        public string BodyUrl { get; set; }
        public string ConversationId { get; set; }
        public System.TimeSpan CriticalTime { get; set; }
        public System.TimeSpan DeliveryTime { get; set; }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> Headers { get; set; }
        public string Id { get; set; }
        public string InstanceId { get; set; }
        public System.Collections.Generic.List<ServiceControl.SagaAudit.SagaInfo> InvokedSagas { get; set; }
        public bool IsSystemMessage { get; set; }
        public string MessageId { get; set; }
        public NServiceBus.MessageIntentEnum MessageIntent { get; set; }
        public string MessageType { get; set; }
        public ServiceControl.SagaAudit.SagaInfo OriginatesFromSaga { get; set; }
        public System.DateTime ProcessedAt { get; set; }
        public System.TimeSpan ProcessingTime { get; set; }
        public ServiceControl.Operations.EndpointDetails ReceivingEndpoint { get; set; }
        public ServiceControl.Operations.EndpointDetails SendingEndpoint { get; set; }
        public ServiceControl.Persistence.MessageStatus Status { get; set; }
        public System.DateTime? TimeSent { get; set; }
    }
    public class MessagesViewTransformer : Raven.Client.Indexes.AbstractTransformerCreationTask<ServiceControl.CompositeViews.Messages.MessagesViewTransformer.Input>
    {
        public MessagesViewTransformer() { }
        public class Input
        {
            public Input() { }
            public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
            public string Id { get; set; }
            public System.Collections.Generic.Dictionary<string, object> MessageMetadata { get; set; }
            public System.DateTime ProcessedAt { get; set; }
            public System.Collections.Generic.List<ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt> ProcessingAttempts { get; set; }
            public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
            public string UniqueMessageId { get; set; }
        }
    }
}
namespace ServiceControl.Connection
{
    public interface IPlatformConnectionBuilder
    {
        System.Threading.Tasks.Task<ServiceControl.Connection.PlatformConnectionDetails> BuildPlatformConnection();
    }
    public class PlatformConnectionDetails
    {
        public PlatformConnectionDetails() { }
        public System.Collections.Concurrent.ConcurrentBag<string> Errors { get; }
        public void Add(string key, object value) { }
        public System.Collections.Generic.IDictionary<string, object> ToDictionary() { }
    }
}
namespace ServiceControl.Contracts.CustomChecks
{
    public class CustomCheckFailed : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public CustomCheckFailed() { }
        public string Category { get; set; }
        public string CustomCheckId { get; set; }
        public System.DateTime FailedAt { get; set; }
        public string FailureReason { get; set; }
        public System.Guid Id { get; set; }
        public ServiceControl.Operations.EndpointDetails OriginatingEndpoint { get; set; }
    }
    public class CustomCheckSucceeded
    {
        public CustomCheckSucceeded() { }
        public string Category { get; set; }
        public string CustomCheckId { get; set; }
        public System.Guid Id { get; set; }
        public ServiceControl.Operations.EndpointDetails OriginatingEndpoint { get; set; }
        public System.DateTime SucceededAt { get; set; }
    }
}
namespace ServiceControl.Contracts.EndpointControl
{
    public class EndpointDetected
    {
        public EndpointDetected() { }
        public System.DateTime DetectedAt { get; set; }
        public ServiceControl.Operations.EndpointDetails Endpoint { get; set; }
    }
    public class EndpointStarted
    {
        public EndpointStarted() { }
        public ServiceControl.Operations.EndpointDetails EndpointDetails { get; set; }
        public System.DateTime StartedAt { get; set; }
    }
    public class NewEndpointDetected : NServiceBus.IEvent, NServiceBus.IMessage
    {
        public NewEndpointDetected() { }
        public System.DateTime DetectedAt { get; set; }
        public ServiceControl.Operations.EndpointDetails Endpoint { get; set; }
    }
    public class RegisterNewEndpoint : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RegisterNewEndpoint() { }
        public System.DateTime DetectedAt { get; set; }
        public ServiceControl.Operations.EndpointDetails Endpoint { get; set; }
    }
}
namespace ServiceControl.Contracts.EventLog
{
    public class EventLogItemAdded : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public EventLogItemAdded() { }
        public string Category { get; set; }
        public string Description { get; set; }
        public string Id { get; set; }
        public System.DateTime RaisedAt { get; set; }
        public System.Collections.Generic.ICollection<string> RelatedTo { get; set; }
        public ServiceControl.EventLog.Severity Severity { get; set; }
    }
}
namespace ServiceControl.Contracts.HeartbeatMonitoring
{
    public class EndpointFailedToHeartbeat
    {
        public EndpointFailedToHeartbeat() { }
        public System.DateTime DetectedAt { get; set; }
        public ServiceControl.Operations.EndpointDetails Endpoint { get; set; }
        public System.DateTime LastReceivedAt { get; set; }
    }
    public class EndpointHeartbeatRestored
    {
        public EndpointHeartbeatRestored() { }
        public ServiceControl.Operations.EndpointDetails Endpoint { get; set; }
        public System.DateTime RestoredAt { get; set; }
    }
    public class HeartbeatMonitoringDisabled
    {
        public HeartbeatMonitoringDisabled() { }
        public System.Guid EndpointInstanceId { get; set; }
    }
    public class HeartbeatMonitoringEnabled
    {
        public HeartbeatMonitoringEnabled() { }
        public System.Guid EndpointInstanceId { get; set; }
    }
    public class HeartbeatingEndpointDetected
    {
        public HeartbeatingEndpointDetected() { }
        public System.DateTime DetectedAt { get; set; }
        public ServiceControl.Operations.EndpointDetails Endpoint { get; set; }
    }
}
namespace ServiceControl.Contracts.MessageFailures
{
    public class FailedMessageArchived
    {
        public FailedMessageArchived() { }
        public string FailedMessageId { get; set; }
    }
    public class FailedMessagesUnArchived
    {
        public FailedMessagesUnArchived() { }
        public string[] DocumentIds { get; set; }
        public int MessagesCount { get; set; }
    }
    public class MarkMessageFailureResolvedByRetry : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public MarkMessageFailureResolvedByRetry() { }
        public string[] AlternativeFailedMessageIds { get; set; }
        public string FailedMessageId { get; set; }
    }
    public class MessageFailed : NServiceBus.IMessage, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public MessageFailed() { }
        public string EndpointId { get; set; }
        public string FailedMessageId { get; set; }
        public ServiceControl.Contracts.Operations.FailureDetails FailureDetails { get; set; }
        public bool RepeatedFailure { get; set; }
    }
    public class MessageFailureResolvedByRetry : NServiceBus.IMessage, ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public MessageFailureResolvedByRetry() { }
        public string[] AlternativeFailedMessageIds { get; set; }
        public string FailedMessageId { get; set; }
    }
    public class MessageFailureResolvedManually
    {
        public MessageFailureResolvedManually() { }
        public string FailedMessageId { get; set; }
    }
    public class MessageFailuresUpdated : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public MessageFailuresUpdated() { }
        public int ArchivedTotal { get; set; }
        public System.DateTime RaisedAt { get; set; }
        public int Total { get; set; }
        public int UnresolvedTotal { get; set; }
    }
    public class MessageSubmittedForRetry : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public MessageSubmittedForRetry() { }
        public string FailedMessageId { get; set; }
    }
}
namespace ServiceControl.Contracts.MessageRedirects
{
    public class MessageRedirectChanged
    {
        public MessageRedirectChanged() { }
        public string FromPhysicalAddress { get; set; }
        public System.Guid MessageRedirectId { get; set; }
        public string PreviousToPhysicalAddress { get; set; }
        public string ToPhysicalAddress { get; set; }
    }
    public class MessageRedirectCreated : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public MessageRedirectCreated() { }
        public string FromPhysicalAddress { get; set; }
        public System.Guid MessageRedirectId { get; set; }
        public string ToPhysicalAddress { get; set; }
    }
    public class MessageRedirectRemoved
    {
        public MessageRedirectRemoved() { }
        public string FromPhysicalAddress { get; set; }
        public System.Guid MessageRedirectId { get; set; }
        public string ToPhysicalAddress { get; set; }
    }
}
namespace ServiceControl.Contracts.Operations
{
    public class EndpointHeartbeatReceived
    {
        public EndpointHeartbeatReceived() { }
        public string Endpoint { get; set; }
        public string Machine { get; set; }
        public System.DateTime SentAt { get; set; }
    }
}
namespace ServiceControl.CustomChecks
{
    public class CustomCheckDeleted
    {
        public CustomCheckDeleted() { }
        public System.Guid Id { get; set; }
    }
    public class CustomChecksUpdated : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public CustomChecksUpdated() { }
        public int Failed { get; set; }
        public System.DateTime RaisedAt { get; set; }
    }
}
namespace ServiceControl.EndpointControl.Contracts
{
    public class MonitoringDisabledForEndpoint
    {
        public MonitoringDisabledForEndpoint() { }
        public ServiceControl.Operations.EndpointDetails Endpoint { get; set; }
        public System.Guid EndpointInstanceId { get; set; }
    }
    public class MonitoringEnabledForEndpoint
    {
        public MonitoringEnabledForEndpoint() { }
        public ServiceControl.Operations.EndpointDetails Endpoint { get; set; }
        public System.Guid EndpointInstanceId { get; set; }
    }
}
namespace ServiceControl.EventLog
{
    public class EventLogItem
    {
        public EventLogItem() { }
        public string Category { get; set; }
        public string Description { get; set; }
        public string EventType { get; set; }
        public string Id { get; set; }
        public System.DateTime RaisedAt { get; set; }
        public System.Collections.Generic.List<string> RelatedTo { get; set; }
        public ServiceControl.EventLog.Severity Severity { get; set; }
    }
    public enum Severity
    {
        Critical = 0,
        Error = 1,
        Warning = 2,
        Info = 3,
    }
}
namespace ServiceControl.ExternalIntegrations
{
    public class RemoveVersionInformationBehavior : NServiceBus.Pipeline.Behavior<NServiceBus.Pipeline.IOutgoingPhysicalMessageContext>
    {
        public RemoveVersionInformationBehavior() { }
        public override System.Threading.Tasks.Task Invoke(NServiceBus.Pipeline.IOutgoingPhysicalMessageContext context, System.Func<System.Threading.Tasks.Task> next) { }
    }
}
namespace ServiceControl.Infrastructure.BackgroundTasks
{
    public class AsyncTimer : ServiceControl.Infrastructure.BackgroundTasks.IAsyncTimer
    {
        public AsyncTimer() { }
        public ServiceControl.Infrastructure.BackgroundTasks.TimerJob Schedule(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<ServiceControl.Infrastructure.BackgroundTasks.TimerJobExecutionResult>> callback, System.TimeSpan due, System.TimeSpan interval, System.Action<System.Exception> errorCallback) { }
    }
    public interface IAsyncTimer
    {
        ServiceControl.Infrastructure.BackgroundTasks.TimerJob Schedule(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<ServiceControl.Infrastructure.BackgroundTasks.TimerJobExecutionResult>> callback, System.TimeSpan due, System.TimeSpan interval, System.Action<System.Exception> errorCallback);
    }
    public class TimerJob
    {
        public TimerJob(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<ServiceControl.Infrastructure.BackgroundTasks.TimerJobExecutionResult>> callback, System.TimeSpan due, System.TimeSpan interval, System.Action<System.Exception> errorCallback) { }
        public System.Threading.Tasks.Task Stop() { }
    }
    public enum TimerJobExecutionResult
    {
        ScheduleNextExecution = 0,
        ExecuteImmediately = 1,
        DoNotContinueExecuting = 2,
    }
}
namespace ServiceControl.Infrastructure.RavenDB.Expiration
{
    [System.ComponentModel.Composition.ExportMetadata("Bundle", "customDocumentExpiration")]
    [System.ComponentModel.Composition.InheritedExport(typeof(Raven.Database.Plugins.IStartupTask))]
    public class ExpiredDocumentsCleanerBundle : Raven.Database.Plugins.IStartupTask, System.IDisposable
    {
        public ExpiredDocumentsCleanerBundle() { }
        public void Dispose() { }
        public void Execute(Raven.Database.DocumentDatabase database) { }
    }
    public class ExpiryErrorMessageIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage>
    {
        public ExpiryErrorMessageIndex() { }
    }
    public class ExpiryEventLogItemsIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.EventLog.EventLogItem>
    {
        public ExpiryEventLogItemsIndex() { }
    }
    public class ExpiryProcessedMessageIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageAuditing.ProcessedMessage>
    {
        public ExpiryProcessedMessageIndex() { }
    }
}
namespace ServiceControl.Infrastructure.RavenDB
{
    public interface IDataMigration
    {
        System.Threading.Tasks.Task Migrate(Raven.Client.IDocumentStore store);
    }
}
namespace ServiceControl.Infrastructure.SignalR
{
    public class Envelope
    {
        public Envelope() { }
        public object Message { get; set; }
        public System.Collections.Generic.List<string> Types { get; set; }
    }
    public interface IUserInterfaceEvent { }
}
namespace ServiceControl.MessageFailures.Api
{
    public class EditConfigurationModel
    {
        public EditConfigurationModel() { }
        public bool Enabled { get; set; }
        public string[] LockedHeaders { get; set; }
        public string[] SensitiveHeaders { get; set; }
    }
    public class EditMessageModel
    {
        public EditMessageModel() { }
        public string MessageBody { get; set; }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> MessageHeaders { get; set; }
    }
    public class FailedMessageFacetsIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage>
    {
        public FailedMessageFacetsIndex() { }
    }
    public class FailedMessageView
    {
        public FailedMessageView() { }
        public string EditOf { get; set; }
        public bool Edited { get; set; }
        public ServiceControl.Contracts.Operations.ExceptionDetails Exception { get; set; }
        public string Id { get; set; }
        public bool IsSystemMessage { get; set; }
        public System.DateTime LastModified { get; set; }
        public string MessageId { get; set; }
        public string MessageType { get; set; }
        public int NumberOfProcessingAttempts { get; set; }
        public string QueueAddress { get; set; }
        public ServiceControl.Operations.EndpointDetails ReceivingEndpoint { get; set; }
        public ServiceControl.Operations.EndpointDetails SendingEndpoint { get; set; }
        public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
        public System.DateTime TimeOfFailure { get; set; }
        public System.DateTime? TimeSent { get; set; }
    }
    public class FailedMessageViewIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage>
    {
        public FailedMessageViewIndex() { }
        public class SortAndFilterOptions : ServiceControl.MessageFailures.IHaveStatus
        {
            public SortAndFilterOptions() { }
            public long LastModified { get; set; }
            public string MessageId { get; set; }
            public string MessageType { get; set; }
            public string QueueAddress { get; set; }
            public string ReceivingEndpointName { get; set; }
            public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
            public System.DateTime TimeOfFailure { get; set; }
            public System.DateTime TimeSent { get; set; }
        }
    }
    public class FailedMessageViewTransformer : Raven.Client.Indexes.AbstractTransformerCreationTask<ServiceControl.MessageFailures.FailedMessage>
    {
        public FailedMessageViewTransformer() { }
        public static string Name { get; }
    }
    public class QueueAddressIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage, ServiceControl.MessageFailures.QueueAddress>
    {
        public QueueAddressIndex() { }
    }
}
namespace ServiceControl.MessageFailures.InternalMessages
{
    public class ReclassificationOfErrorMessageComplete
    {
        public ReclassificationOfErrorMessageComplete() { }
        public int NumberofMessageReclassified { get; set; }
    }
}
namespace ServiceControl.MessageFailures
{
    public class QueueAddress
    {
        public QueueAddress() { }
        public int FailedMessageCount { get; set; }
        public string PhysicalAddress { get; set; }
    }
}
namespace ServiceControl.Monitoring
{
    public static class EndpointDetailsExtensions
    {
        public static ServiceControl.Persistence.EndpointInstanceId ToInstanceId(this ServiceControl.Operations.EndpointDetails endpointDetails) { }
    }
    public class EndpointUpdateModel
    {
        public EndpointUpdateModel() { }
        public bool MonitorHeartbeat { get; set; }
    }
    public enum HeartbeatStatus
    {
        Unknown = 0,
        Alive = 1,
        Dead = 2,
    }
}
namespace ServiceControl.Notifications.Api
{
    public class ToggleEmailNotifications
    {
        public ToggleEmailNotifications() { }
        [Newtonsoft.Json.JsonProperty(PropertyName="enabled")]
        public bool Enabled { get; set; }
    }
    public class UpdateEmailNotificationsSettingsRequest
    {
        public UpdateEmailNotificationsSettingsRequest() { }
        [Newtonsoft.Json.JsonProperty(PropertyName="authorization_account")]
        public string AuthorizationAccount { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="authorization_password")]
        public string AuthorizationPassword { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="enable_tls")]
        public bool EnableTLS { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="from")]
        public string From { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="smtp_port")]
        public int SmtpPort { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="smtp_server")]
        public string SmtpServer { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="to")]
        public string To { get; set; }
    }
}
namespace ServiceControl.Notifications.Email
{
    public class EmailThrottlingState
    {
        public EmailThrottlingState() { }
        public System.Threading.CancellationTokenSource CancellationTokenSource { get; }
        public string RetriedMessageId { get; set; }
        public System.Threading.SemaphoreSlim Semaphore { get; }
        public bool IsThrottling() { }
        public void ThrottlingOff() { }
        public void ThrottlingOn() { }
    }
    public class SendEmailNotification : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public SendEmailNotification() { }
        public string Body { get; set; }
        public bool FailureNotification { get; set; }
        public string Subject { get; set; }
    }
    public class SendEmailNotificationHandler : NServiceBus.IHandleMessages<ServiceControl.Notifications.Email.SendEmailNotification>
    {
        public SendEmailNotificationHandler(Raven.Client.IDocumentStore store, ServiceBus.Management.Infrastructure.Settings.Settings settings, ServiceControl.Notifications.Email.EmailThrottlingState throttlingState) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Notifications.Email.SendEmailNotification message, NServiceBus.IMessageHandlerContext context) { }
        public static NServiceBus.RecoverabilityAction RecoverabilityPolicy(NServiceBus.RecoverabilityConfig config, NServiceBus.Transport.ErrorContext context) { }
    }
}
namespace ServiceControl.Notifications
{
    public class EmailNotifications
    {
        public EmailNotifications() { }
        public string AuthenticationAccount { get; set; }
        public string AuthenticationPassword { get; set; }
        public bool EnableTLS { get; set; }
        public bool Enabled { get; set; }
        public string From { get; set; }
        public int? SmtpPort { get; set; }
        public string SmtpServer { get; set; }
        public string To { get; set; }
    }
    public class NotificationsSettings
    {
        public const string SingleDocumentId = "NotificationsSettings/All";
        public NotificationsSettings() { }
        public ServiceControl.Notifications.EmailNotifications Email { get; set; }
        public string Id { get; set; }
    }
}
namespace ServiceControl.Operations
{
    public class FailedAuditImport
    {
        public FailedAuditImport() { }
        public System.Guid Id { get; set; }
        public ServiceControl.Operations.FailedTransportMessage Message { get; set; }
    }
    public class FailedAuditImportIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.Operations.FailedAuditImport>
    {
        public FailedAuditImportIndex() { }
    }
    public class FailedErrorImport
    {
        public FailedErrorImport() { }
        public System.Guid Id { get; set; }
        public ServiceControl.Operations.FailedTransportMessage Message { get; set; }
    }
    public class FailedErrorImportIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.Operations.FailedErrorImport>
    {
        public FailedErrorImportIndex() { }
    }
    public class FailedTransportMessage
    {
        public FailedTransportMessage() { }
        public byte[] Body { get; set; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string Id { get; set; }
    }
}
namespace ServiceControl.Recoverability
{
    public class ArchiveOperationBatchCompleted : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public ArchiveOperationBatchCompleted() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.DateTime Last { get; set; }
        public ServiceControl.Recoverability.ArchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class ArchiveOperationCompleted : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public ArchiveOperationCompleted() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.DateTime CompletionTime { get; set; }
        public string GroupName { get; set; }
        public System.DateTime Last { get; set; }
        public ServiceControl.Recoverability.ArchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class ArchiveOperationFinalizing : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public ArchiveOperationFinalizing() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.DateTime Last { get; set; }
        public ServiceControl.Recoverability.ArchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class ArchiveOperationStarting : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public ArchiveOperationStarting() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public ServiceControl.Recoverability.ArchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public struct ArchiveProgress
    {
        public ArchiveProgress(double roundedPercentage, int totalNumberOfMessages, int numberOfMessagesArchived, int remaining) { }
        public int MessagesRemaining { get; set; }
        public int NumberOfMessagesArchived { get; set; }
        public double Percentage { get; set; }
        public int TotalNumberOfMessages { get; set; }
    }
    public enum ArchiveState
    {
        ArchiveStarted = 0,
        ArchiveProgressing = 1,
        ArchiveFinalizing = 2,
        ArchiveCompleted = 3,
    }
    public enum ArchiveType
    {
        Unknown = 0,
        SingleMessage = 1,
        FailureGroup = 2,
        MultipleMessages = 3,
        AllForEndpoint = 4,
        All = 5,
        ByQueueAddress = 6,
    }
    public class ArchivedGroupsViewIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage, ServiceControl.Recoverability.FailureGroupView>
    {
        public ArchivedGroupsViewIndex() { }
    }
    public struct ClassifiableMessageDetails
    {
        public ClassifiableMessageDetails(ServiceControl.MessageFailures.FailedMessage message) { }
        public ClassifiableMessageDetails(string messageType, ServiceControl.Contracts.Operations.FailureDetails failureDetails, ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt processingAttempt) { }
        public ServiceControl.Contracts.Operations.FailureDetails Details { get; }
        public string MessageType { get; }
        public ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt ProcessingAttempt { get; }
    }
    public class EditAndSend : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public EditAndSend() { }
        public string FailedMessageId { get; set; }
        public string NewBody { get; set; }
        public System.Collections.Generic.Dictionary<string, string> NewHeaders { get; set; }
    }
    public class EndpointNameClassifier : ServiceControl.Recoverability.IFailureClassifier
    {
        public EndpointNameClassifier() { }
        public string Name { get; }
        public string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failureDetails) { }
    }
    public class ExceptionTypeAndStackTraceFailureClassifier : ServiceControl.Recoverability.IFailureClassifier
    {
        public const string Id = "Exception Type and Stack Trace";
        public ExceptionTypeAndStackTraceFailureClassifier() { }
        public string Name { get; }
        public string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failure) { }
        public class StackFrame
        {
            public StackFrame() { }
            public string File { get; set; }
            public string Line { get; set; }
            public string Method { get; set; }
            public string Params { get; set; }
            public string Type { get; set; }
            public string ToMethodIdentifier() { }
        }
    }
    public class FailedMessageGroupArchived : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public FailedMessageGroupArchived() { }
        public string GroupId { get; set; }
        public string GroupName { get; set; }
        public int MessagesCount { get; set; }
    }
    public class FailedMessageGroupBatchArchived : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public FailedMessageGroupBatchArchived() { }
        public string[] FailedMessagesIds { get; set; }
    }
    public class FailedMessageGroupBatchUnarchived : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public FailedMessageGroupBatchUnarchived() { }
        public string[] FailedMessagesIds { get; set; }
    }
    public class FailedMessageGroupUnarchived : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public FailedMessageGroupUnarchived() { }
        public string GroupId { get; set; }
        public string GroupName { get; set; }
        public int MessagesCount { get; set; }
    }
    public class FailedMessages_ByGroup : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage, ServiceControl.Recoverability.FailureGroupMessageView>
    {
        public FailedMessages_ByGroup() { }
    }
    public class FailedMessages_UniqueMessageIdAndTimeOfFailures : Raven.Client.Indexes.AbstractTransformerCreationTask<ServiceControl.MessageFailures.FailedMessage>
    {
        public FailedMessages_UniqueMessageIdAndTimeOfFailures() { }
        public struct Result
        {
            public System.DateTime LatestTimeOfFailure { get; set; }
            public string UniqueMessageId { get; set; }
        }
    }
    public class FailureGroupMessageView : ServiceControl.MessageFailures.IHaveStatus
    {
        public FailureGroupMessageView() { }
        public string FailureGroupId { get; set; }
        public string FailureGroupName { get; set; }
        public string Id { get; set; }
        public long LastModified { get; set; }
        public string MessageId { get; set; }
        public string MessageType { get; set; }
        public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
        public System.DateTime TimeOfFailure { get; set; }
        public System.DateTime TimeSent { get; set; }
    }
    public class FailureGroupView
    {
        public FailureGroupView() { }
        public string Comment { get; set; }
        public int Count { get; set; }
        public System.DateTime First { get; set; }
        public string Id { get; set; }
        public System.DateTime Last { get; set; }
        public string Title { get; set; }
        public string Type { get; set; }
    }
    public class FailureGroupsViewIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.FailedMessage, ServiceControl.Recoverability.FailureGroupView>
    {
        public FailureGroupsViewIndex() { }
    }
    public class GroupCommentIndex : Raven.Client.Indexes.AbstractIndexCreationTask<ServiceControl.MessageFailures.GroupComment>
    {
        public GroupCommentIndex() { }
    }
    public class HistoricRetryOperation
    {
        public HistoricRetryOperation() { }
        public System.DateTime CompletionTime { get; set; }
        public bool Failed { get; set; }
        public int NumberOfMessagesProcessed { get; set; }
        public string Originator { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Persistence.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public interface IFailedMessageEnricher
    {
        System.Collections.Generic.IEnumerable<ServiceControl.MessageFailures.FailedMessage.FailureGroup> Enrich(string messageType, ServiceControl.Contracts.Operations.FailureDetails failureDetails, ServiceControl.MessageFailures.FailedMessage.ProcessingAttempt processingAttempt);
    }
    public interface IFailureClassifier
    {
        string Name { get; }
        string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failureDetails);
    }
    public class MessageFailedInStaging
    {
        public MessageFailedInStaging() { }
        public string UniqueMessageId { get; set; }
    }
    public class MessageTypeFailureClassifier : ServiceControl.Recoverability.IFailureClassifier
    {
        public const string Id = "Message Type";
        public MessageTypeFailureClassifier() { }
        public string Name { get; }
        public string ClassifyFailure(ServiceControl.Recoverability.ClassifiableMessageDetails failureDetails) { }
    }
    public class MessagesSubmittedForRetry
    {
        public MessagesSubmittedForRetry() { }
        public string Context { get; set; }
        public string[] FailedMessageIds { get; set; }
        public int NumberOfFailedMessages { get; set; }
    }
    public class MessagesSubmittedForRetryFailed
    {
        public MessagesSubmittedForRetryFailed() { }
        public string Destination { get; set; }
        public string FailedMessageId { get; set; }
        public string Reason { get; set; }
    }
    public static class OperationProgressCalculator
    {
        public static double CalculateProgress(int totalNumberOfMessages, int numberOfMessagesArchived, ServiceControl.Recoverability.ArchiveState state) { }
        public static double CalculateProgress(int totalNumberOfMessages, int numberOfMessagesPrepared, int numberOfMessagesForwarded, int numberOfMessagesSkipped, ServiceControl.Recoverability.RetryState state) { }
    }
    public class Reclassifier { }
    public class ReclassifyErrorSettings
    {
        public const string IdentifierCase = "ReclassifyErrorSettings/1";
        public ReclassifyErrorSettings() { }
        public string Id { get; set; }
        public bool ReclassificationDone { get; set; }
    }
    public class RetryAllInGroup : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RetryAllInGroup() { }
        public string GroupId { get; set; }
        public System.DateTime? Started { get; set; }
    }
    public class RetryHistory
    {
        public RetryHistory() { }
        public System.Collections.Generic.List<ServiceControl.Recoverability.HistoricRetryOperation> HistoricOperations { get; set; }
        public string Id { get; set; }
        public System.Collections.Generic.List<ServiceControl.Recoverability.UnacknowledgedRetryOperation> UnacknowledgedOperations { get; set; }
        public bool Acknowledge(string requestId, ServiceControl.Persistence.RetryType type) { }
        public void AddToHistory(ServiceControl.Recoverability.HistoricRetryOperation historicOperation, int historyDepth) { }
        public void AddToUnacknowledged(ServiceControl.Recoverability.UnacknowledgedRetryOperation unacknowledgedRetryOperation) { }
        public string GetHistoryOperationsUniqueIdentifier() { }
        public ServiceControl.Recoverability.UnacknowledgedRetryOperation[] GetUnacknowledgedByClassifier(string classifier) { }
        public static ServiceControl.Recoverability.RetryHistory CreateNew() { }
        public static string MakeId() { }
    }
    public class RetryMessagesById : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RetryMessagesById() { }
        public string[] MessageUniqueIds { get; set; }
    }
    public class RetryMessagesByQueueAddress : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RetryMessagesByQueueAddress() { }
        public string QueueAddress { get; set; }
        public ServiceControl.MessageFailures.FailedMessageStatus Status { get; set; }
    }
    public class RetryMessagesForwarded : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryMessagesForwarded() { }
        public bool IsFailed { get; set; }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Persistence.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
        public int TotalNumberOfMessages { get; set; }
    }
    public class RetryOperationCompleted : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryOperationCompleted() { }
        public string Classifier { get; set; }
        public System.DateTime CompletionTime { get; set; }
        public bool Failed { get; set; }
        public System.DateTime Last { get; set; }
        public int NumberOfMessagesProcessed { get; set; }
        public string Originator { get; set; }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Persistence.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class RetryOperationForwarding : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryOperationForwarding() { }
        public bool IsFailed { get; set; }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Persistence.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
        public int TotalNumberOfMessages { get; set; }
    }
    public class RetryOperationPreparing : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryOperationPreparing() { }
        public bool IsFailed { get; set; }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Persistence.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
        public int TotalNumberOfMessages { get; set; }
    }
    public class RetryOperationWaiting : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public RetryOperationWaiting() { }
        public ServiceControl.Recoverability.RetryProgress Progress { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Persistence.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public struct RetryProgress
    {
        public RetryProgress(double percentage, int messagesPrepared, int messagesForwarded, int messagesSkipped, int messagesRemaining) { }
        public int MessagesForwarded { get; set; }
        public int MessagesPrepared { get; set; }
        public int MessagesRemaining { get; set; }
        public int MessagesSkipped { get; set; }
        public double Percentage { get; set; }
    }
    public enum RetryState
    {
        Waiting = 0,
        Preparing = 1,
        Forwarding = 2,
        Completed = 3,
    }
    public class UnacknowledgedRetryOperation
    {
        public UnacknowledgedRetryOperation() { }
        public string Classifier { get; set; }
        public System.DateTime CompletionTime { get; set; }
        public bool Failed { get; set; }
        public System.DateTime Last { get; set; }
        public int NumberOfMessagesProcessed { get; set; }
        public string Originator { get; set; }
        public string RequestId { get; set; }
        public ServiceControl.Persistence.RetryType RetryType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class UnarchiveOperationBatchCompleted : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public UnarchiveOperationBatchCompleted() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.DateTime Last { get; set; }
        public ServiceControl.Recoverability.UnarchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class UnarchiveOperationCompleted : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public UnarchiveOperationCompleted() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.DateTime CompletionTime { get; set; }
        public string GroupName { get; set; }
        public System.DateTime Last { get; set; }
        public ServiceControl.Recoverability.UnarchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class UnarchiveOperationFinalizing : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public UnarchiveOperationFinalizing() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public System.DateTime Last { get; set; }
        public ServiceControl.Recoverability.UnarchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public class UnarchiveOperationStarting : ServiceControl.Infrastructure.SignalR.IUserInterfaceEvent
    {
        public UnarchiveOperationStarting() { }
        public ServiceControl.Recoverability.ArchiveType ArchiveType { get; set; }
        public ServiceControl.Recoverability.UnarchiveProgress Progress { get; set; }
        public string RequestId { get; set; }
        public System.DateTime StartTime { get; set; }
    }
    public struct UnarchiveProgress
    {
        public UnarchiveProgress(double roundedPercentage, int totalNumberOfMessages, int numberOfMessagesUnarchived, int remaining) { }
        public int MessagesRemaining { get; set; }
        public int NumberOfMessagesUnarchived { get; set; }
        public double Percentage { get; set; }
        public int TotalNumberOfMessages { get; set; }
    }
}
namespace ServiceControl.Recoverability.Retrying
{
    public class StoreHistoryHandler
    {
        public StoreHistoryHandler(Raven.Client.IDocumentStore store, ServiceBus.Management.Infrastructure.Settings.Settings settings) { }
        public System.Threading.Tasks.Task Handle(ServiceControl.Recoverability.RetryOperationCompleted message) { }
    }
}
namespace ServiceControl.SagaAudit
{
    public class SagaListIndex : Raven.Client.Indexes.AbstractMultiMapIndexCreationTask<ServiceControl.SagaAudit.SagaListIndex.Result>
    {
        public SagaListIndex() { }
        public class Result
        {
            public Result() { }
            public System.Guid Id { get; set; }
            public string SagaType { get; set; }
            public string Uri { get; set; }
        }
    }
}