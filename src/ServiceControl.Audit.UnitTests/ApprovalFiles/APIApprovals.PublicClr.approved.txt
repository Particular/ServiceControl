[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Audit.AcceptanceTests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Audit.AcceptanceTests.RavenDB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Audit.Persistence.InMemory")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Audit.Persistence.RavenDB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Audit.Persistence.Tests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Audit.Persistence.Tests.RavenDB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Audit.UnitTests")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.Loadtests.Reporter")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ServiceControl.MultiInstance.AcceptanceTests")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.7.2", FrameworkDisplayName=".NET Framework 4.7.2")]
namespace ServiceControl.Audit.Infrastructure.Settings
{
    public class Settings
    {
        public const string DEFAULT_SERVICE_NAME = "Particular.ServiceControl.Audit";
        public const string Disabled = "!disable";
        public Settings(string serviceName, string transportType = null, string persisterType = null) { }
        public string ApiUrl { get; }
        public string AuditLogQueue { get; set; }
        public string AuditQueue { get; set; }
        public System.TimeSpan AuditRetentionPeriod { get; }
        public int DataSpaceRemainingThreshold { get; set; }
        public bool EnableFullTextSearchOnBodies { get; set; }
        public bool ExposeApi { get; set; }
        public bool ForwardAuditMessages { get; set; }
        public string Hostname { get; }
        public int HttpDefaultConnectionLimit { get; set; }
        public bool IngestAuditMessages { get; set; }
        public string LicenseFileText { get; set; }
        public int MaxBodySizeToStore { get; set; }
        public int MaximumConcurrencyLevel { get; set; }
        public System.Func<NServiceBus.Transport.MessageContext, bool> MessageFilter { get; set; }
        public string PersistenceType { get; }
        public int Port { get; set; }
        public bool PrintMetrics { get; }
        public string RootUrl { get; }
        public string ServiceControlQueueAddress { get; set; }
        public string ServiceName { get; }
        public bool SkipQueueCreation { get; set; }
        public System.TimeSpan TimeToRestartAuditIngestionAfterFailure { get; set; }
        public string TransportConnectionString { get; set; }
        public string TransportType { get; }
        public bool ValidateConfiguration { get; }
        public string VirtualDirectory { get; }
        public ServiceControl.Transports.TransportCustomization LoadTransportCustomization() { }
        public static ServiceControl.Audit.Infrastructure.Settings.Settings FromConfiguration(string serviceName) { }
    }
}
namespace ServiceControl.Audit.Recoverability
{
    public class QueueAddress
    {
        public QueueAddress() { }
        public int FailedMessageCount { get; set; }
        public string PhysicalAddress { get; set; }
    }
}
namespace ServiceControl.Contracts.EndpointControl
{
    public class RegisterNewEndpoint : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public RegisterNewEndpoint() { }
        public System.DateTime DetectedAt { get; set; }
        public ServiceControl.Audit.Monitoring.EndpointDetails Endpoint { get; set; }
    }
}
namespace ServiceControl.Contracts.MessageFailures
{
    public class MarkMessageFailureResolvedByRetry : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public MarkMessageFailureResolvedByRetry() { }
        public string[] AlternativeFailedMessageIds { get; set; }
        public string FailedMessageId { get; set; }
    }
}
namespace ServiceControl.EndpointPlugin.Messages.SagaState
{
    public class SagaChangeInitiator : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public SagaChangeInitiator() { }
        public string InitiatingMessageId { get; set; }
        public string Intent { get; set; }
        public bool IsSagaTimeoutMessage { get; set; }
        public string MessageType { get; set; }
        public string OriginatingEndpoint { get; set; }
        public string OriginatingMachine { get; set; }
        public System.DateTime TimeSent { get; set; }
    }
    public class SagaChangeOutput : NServiceBus.ICommand, NServiceBus.IMessage
    {
        public SagaChangeOutput() { }
        public System.DateTime? DeliveryAt { get; set; }
        public System.TimeSpan? DeliveryDelay { get; set; }
        public string Destination { get; set; }
        public string Intent { get; set; }
        public string MessageType { get; set; }
        public string ResultingMessageId { get; set; }
        public System.DateTime TimeSent { get; set; }
    }
    public class SagaUpdatedMessage : NServiceBus.IMessage
    {
        public SagaUpdatedMessage() { }
        public string Endpoint { get; set; }
        public System.DateTime FinishTime { get; set; }
        public ServiceControl.EndpointPlugin.Messages.SagaState.SagaChangeInitiator Initiator { get; set; }
        public bool IsCompleted { get; set; }
        public bool IsNew { get; set; }
        public System.Collections.Generic.List<ServiceControl.EndpointPlugin.Messages.SagaState.SagaChangeOutput> ResultingMessages { get; set; }
        public System.Guid SagaId { get; set; }
        public string SagaState { get; set; }
        public string SagaType { get; set; }
        public System.DateTime StartTime { get; set; }
    }
}
namespace ServiceControl.SagaAudit
{
    public static class InvokedSagasParser
    {
        public static void Parse(System.Collections.Generic.IReadOnlyDictionary<string, string> headers, System.Collections.Generic.IDictionary<string, object> metadata) { }
    }
    public static class SagaSnapshotFactory
    {
        public static ServiceControl.SagaAudit.SagaSnapshot Create(ServiceControl.EndpointPlugin.Messages.SagaState.SagaUpdatedMessage message) { }
    }
}