name: Push container images
on:
  workflow_dispatch:
    inputs:
      version:
        description: Full version of container image to push
        required: true
        type: string
jobs:
  push:
    runs-on: ubuntu-latest
    name: Push
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Validate version
        id: validate
        run: |
          $success = '${{ inputs.version }}' -match '^(?<Major>\d+)\.(?<Minor>\d+)\.(?<Patch>\d+)(-(?<PrereleaseLabel>[\w\-\.]+))?$'
          if ( -not $success)
          {
            throw "Invalid version ${{ inputs.version }}"
            exit 1
          }

          Write-Output "major=$Matches.Major" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf-8 -Append
          Write-Output "minor=$Matches.Minor" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf-8 -Append
          Write-Output "patch=$Matches.Patch" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf-8 -Append
          Write-Output "prerelease=$Matches.Prerelease" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf-8 -Append
          
      - name: Get latest released version
        id: get-latest
        shell: pwsh
        run: |
          $response = Invoke-WebRequest -Uri https://api.github.com/repos/particular/ServiceControl/releases -UseBasicParsing
          $obj = ConvertFrom-Json $response -ErrorAction Stop
          $obj = $obj | ? Draft -eq $false | ? Prerelease -eq $false | Select-Object -ExpandProperty tag_name
          $sortedObj = $obj | Sort { [System.Version]$_ } -Descending
          $latestVersion = [System.Version]($sortedObj | Select -First 1)
          Write-Output "Latest released version = $latestVersion"
          Write-Output "version=$latestVersion" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf-8 -Append
      - name: Summary
        run: |
          Write-Output "Latest version = ${{ steps.get-latest.version }}"
          Write-Output "Current version = ${{ steps.validate.version }}"
          Write-Output "  - Major = ${{ steps.validate.major }}"
          Write-Output "  - Minor = ${{ steps.validate.minor }}"
          Write-Output "  - Patch = ${{ steps.validate.patch }}"
          Write-Output "  - Prerelease = ${{ steps.validate.prerelease }}"
          
