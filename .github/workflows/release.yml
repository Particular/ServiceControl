name: Release
on:
  pull_request:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'
env:
  DOTNET_NOLOGO: true
  # Signals build to create the installer
  RELEASE_WORKFLOW: true
jobs:
  release:
    runs-on: windows-2022 # Code signing requirement https://github.com/NuGet/Home/issues/7939
    outputs:
      semver: ${{ steps.save-version.outputs.semver }}
      majorminorpatch: ${{ steps.save-version.outputs.majorminorpatch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2.1.0
        with:
          dotnet-version: 6.0.x
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Setup Advanced Installer
        run: |
          $version = "18.8.1"
          choco install advanced-installer --version=$version
          & "C:\Program Files (x86)\Caphyon\Advanced Installer $version\bin\x86\AdvancedInstaller.com" /register ${{ secrets.ADVANCED_INSTALLER_LICENSE_KEY }}
      - name: Prepare AIP file
        run: |
          $content = Get-Content -Raw -Path src/Setup/ServiceControl.aip
          $content = $content -replace "replace-tenant-id", "${{ secrets.AZURE_KEY_VAULT_TENANT_ID }}" -replace "replace-app-id", "${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }}" -replace "replace-cert-name", "${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_NAME }}"
          Set-Content src/Setup/ServiceControl.aip $content
      - name: Build
        env:
          AZURE_KEY_VAULT_CLIENT_SECRET: ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }}
        run: msbuild src -p:Configuration=Release -restore -m -verbosity:minimal
      - id: save-version
        name: Save version
        run: |
          echo "::set-output name=semver::${{env.MinVerVersion}}"
          echo "::set-output name=majorminorpatch::${{env.MinVerMajor}}.${{env.MinVerMinor}}.${{env.MinVerPatch}}"
      - name: Sign NuGet packages
        uses: Particular/sign-nuget-packages-action@v1.0.0
        with:
          client-id: ${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_KEY_VAULT_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }}
          certificate-name: ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_NAME }}
      - name: Publish installer
        uses: actions/upload-artifact@v3.1.0
        with:
          name: installer
          path: assets/*
          retention-days: 1
      - name: Publish NuGet packages
        uses: actions/upload-artifact@v3.1.0
        with:
          name: nugets
          path: nugets/*
          retention-days: 1
      - name: Publish zips
        uses: actions/upload-artifact@v3.1.0
        with:
          name: zips
          path: zip/*
          retention-days: 1
      - name: Prepare ServiceControl metadata
        shell: pwsh
        run: |
          #List of Docker image names used to control re-tagging during push to production
          $dockerImageNames = Get-ChildItem -Path src/docker -Filter *.dockerfile |
              Select-Object -Property @{label = 'Name'; expression = {[System.IO.Path]::GetFileNameWithoutExtension($_.FullName)} } |
              Select-object -ExpandProperty Name

          $serviceControlMetadata = @{
              DockerImageNames = $dockerImageNames
          }

          $serviceControlMetadata | ConvertTo-Json | Out-File -Path ServiceControlMetadata.json
      - name: Deploy
        uses: Particular/push-octopus-package-action@v1.0.0
        with:
          octopus-deploy-api-key: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
          additional-metadata-paths: ServiceControlMetadata.json
#  docker:
#    needs: release
#    name: docker-${{ matrix.name }}
#    runs-on: windows-2019
#    strategy:
#      matrix:
#        include:
#          - name: sql-windows
#            filter: '*sqlserver*'
#            transport: SqlServer
#          - name: rabbit-classic-conventional-windows
#            filter: '*rabbitmq.classic.conventional*'
#            transport: RabbitMQ
#          - name: rabbit-classic-direct-windows
#            filter: '*rabbitmq.classic.direct*'
#            transport: RabbitMQ
#          - name: rabbit-quorum-conventional-windows
#            filter: '*rabbitmq.quorum.conventional*'
#            transport: RabbitMQ
#          - name: rabbit-quorum-direct-windows
#            filter: '*rabbitmq.quorum.direct*'
#            transport: RabbitMQ
#          - name: asq-windows
#            filter: '*azurestoragequeues*'
#            transport: ASQ
#            transport-source: AzureStorageQueue
#          - name: sqs-windows
#            filter: '*amazonsqs*'
#            transport: SQS
#            transport-source: AmazonSQS
#          - name: asb-windows
#            filter: '*azureservicebus*'
#            transport: ASBS
#            transport-source: NetStandardAzureServiceBus
#      fail-fast: false
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3.0.2
#      - name: Download zip artifacts
#        uses: actions/download-artifact@v3.0.0
#        with:
#          name: zips
#          path: zip
#      - name: Prepare directory structure
#        shell: pwsh
#        run: |
#          Expand-Archive -Force "zip\Particular.ServiceControl-${{ needs.release.outputs.majorminorpatch }}.zip" -DestinationPath "unzip\Particular.ServiceControl"
#          Expand-Archive -Force "zip\Particular.ServiceControl.Audit-${{ needs.release.outputs.majorminorpatch }}.zip" -DestinationPath "unzip\Particular.ServiceControl.Audit"
#          Expand-Archive -Force "zip\Particular.ServiceControl.Monitoring-${{ needs.release.outputs.majorminorpatch }}.zip" -DestinationPath "unzip\Particular.ServiceControl.Monitoring"
#
#          $transport = "${{ matrix.transport }}"
#          $srcTransport = "${{ matrix.transport-source}}"
#
#          if ( $srcTransport -eq $null -Or $srcTransport -eq "" ) {
#            $srcTransport = $transport
#          }
#      
#          New-Item -ItemType Directory -Force -Path ServiceControl.Transports.$transport/bin/Release/net472
#          Copy-Item -Path "unzip\Particular.ServiceControl\Transports\$srcTransport\*" -Destination "ServiceControl.Transports.$transport\bin\Release\net472" -Recurse
#
#          New-Item -ItemType Directory -Force -Path ServiceControl/bin/Release/net472
#          Copy-Item -Path "unzip\Particular.ServiceControl\ServiceControl\*" -Destination "ServiceControl\bin\Release\net472" -Recurse
#
#          New-Item -ItemType Directory -Force -Path ServiceControl.Audit/bin/Release/net472
#          Copy-Item -Path "unzip\Particular.ServiceControl.Audit\ServiceControl.Audit\*" -Destination "ServiceControl.Audit\bin\Release\net472" -Recurse
#
#          New-Item -ItemType Directory -Force -Path ServiceControl.Monitoring/bin/Release/net472
#          Copy-Item -Path "unzip\Particular.ServiceControl.Monitoring\ServiceControl.Monitoring\*" -Destination "ServiceControl.Monitoring\bin\Release\net472" -Recurse
#      - name: Build dockerfiles
#        shell: pwsh
#        run: |
#          Get-ChildItem -Path .\src\docker\ -Filter "${{ matrix.filter }}" | ForEach-Object {
#              $dockerImageName = $_.Name.SubString(0, $_.Name.Length - ".dockerfile".Length);
#              
#              $dockerbuildcmd = "docker build -t particular/" + $dockerImageName +":${{ needs.release.outputs.semver }}" + " -f .\src\docker\" + $_.Name + " ."
#              Invoke-Expression $dockerbuildcmd.ToLower()
#          }
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2.0.0
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: Diagnostics
#        shell: pwsh
#        run: |
#          # List out the docker images on the system
#          docker images
#      - name: Push Docker images
#        shell: pwsh
#        run: |
#          Get-ChildItem -Path .\src\docker\ -Filter "${{ matrix.filter }}" | ForEach-Object {
#              $dockerImageName = $_.Name.SubString(0, $_.Name.Length - ".dockerfile".Length);
#              
#              $dockerpushcmd = "docker push particular/" + $dockerImageName +":${{ needs.release.outputs.semver }}"
#              echo "Docker Push Command: $dockerpushcmd"
#              Invoke-Expression $dockerpushcmd.ToLower()
#          }
#
