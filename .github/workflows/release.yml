name: Release
on:
  # Eventually - commented out for testing in a PR
  #push:
  #  tags:
  #    - '[0-9]+.[0-9]+.[0-9]+'
  #    - '[0-9]+.[0-9]+.[0-9]+-*'
  pull_request:
env:
  DOTNET_NOLOGO: true
  # Signals build to create the installer
  RELEASE_WORKFLOW: true
jobs:
  release:
    runs-on: windows-2019 # Code signing requirement https://github.com/NuGet/Home/issues/7939
    outputs:
      semver: ${{ steps.save-version.outputs.semver }}
      majorminorpatch: ${{ steps.save-version.outputs.majorminorpatch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Parse repo name
        run: |
          $FullName = "$env:GITHUB_REPOSITORY"
          $Org,$RepoName = $FullName.Split('/')
          echo "PARTICULAR_REPO_NAME=$RepoName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: 5.0.x
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Setup Advanced Installer
        run: |
          $version = "18.8.1"
          choco install advanced-installer --version=$version
          & "C:\Program Files (x86)\Caphyon\Advanced Installer $version\bin\x86\AdvancedInstaller.com" /register ${{ secrets.ADVANCED_INSTALLER_LICENSE_KEY }}
      - name: Install NuGetKeyVaultSignTool
        run: dotnet tool install --global NuGetKeyVaultSignTool
      - name: Prepare AIP file
        run: |
          $content = Get-Content -Raw -Path src/Setup/ServiceControl.aip
          $content = $content -replace "replace-tenant-id", "${{ secrets.AZURE_KEY_VAULT_TENANT_ID }}" -replace "replace-app-id", "${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }}" -replace "replace-cert-name", "${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_NAME }}"
          Set-Content src/Setup/ServiceControl.aip $content
      - name: Build
        env:
          AZURE_KEY_VAULT_CLIENT_SECRET: ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }}
        run: msbuild src -p:Configuration=Release -restore -m -verbosity:minimal
      - id: save-version
        name: Save GitVersion_SemVer version
        run: |
          echo "::set-output name=semver::${{env.GitVersion_SemVer}}"
          echo "::set-output name=majorminorpatch::${{env.GitVersion_MajorMinorPatch}}"
      - name: Sign NuGet Packages
        run: |
          NuGetKeyVaultSignTool sign nugets\*.nupkg `
          --file-digest sha256 `
          --timestamp-rfc3161 http://timestamp.digicert.com `
          --timestamp-digest sha256 `
          --azure-key-vault-url https://particularcodesigning.vault.azure.net `
          --azure-key-vault-client-id ${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }} `
          --azure-key-vault-tenant-id ${{ secrets.AZURE_KEY_VAULT_TENANT_ID }} `
          --azure-key-vault-client-secret ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }} `
          --azure-key-vault-certificate ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_NAME }}
      - name: Publish installer
        uses: actions/upload-artifact@v2.2.4
        with:
          name: installer
          path: assets/*
          retention-days: 1
      - name: Publish NuGet packages
        uses: actions/upload-artifact@v2.2.4
        with:
          name: nugets
          path: nugets/*
          retention-days: 1
      - name: Publish zips
        uses: actions/upload-artifact@v2.2.4
        with:
          name: zips
          path: zip/*
          retention-days: 1
      - name: Install Octopus CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1.1.8
        with:
          version: latest
      - name: Create Octopus Package
        run: |
          # Creating the expected file layout for the Octopus package, including intermediate directories
          mkdir -p packaging/content
          cp assets\* .\packaging\content

          # Octopus expects NuGet packages to have an extra .nzip extension for NuGet, .czip for Chocolatey
          $nugets = Get-ChildItem -Path "./nugets/*.nupkg"
          foreach ($file in $nugets) {
            cp $file "./packaging/content/$($file.Name).nzip"
          }

          # Octopus Deploy scripts need an executable file to recreate this metadata
          @"
          `$Branch = "${{env.GitVersion_BranchName}}"
          `$Version = "${{env.GitVersion_LegacySemVer}}"
          `$Product = "${{env.PARTICULAR_REPO_NAME}}"
          `$Major = "${{env.GitVersion_Major}}"
          `$Minor = "${{env.GitVersion_Minor}}"
          `$Commit = "${{env.GitVersion_Sha}}"
          "@ > packaging/Metadata.ps1
          
          # Create the Octopus package
          octo pack --id="${{env.PARTICULAR_REPO_NAME}}.Deploy" --version="${{env.GitVersion_SemVer}}" --format="nupkg" --basePath="packaging" --outFolder="octopus-package"
        shell: pwsh
      - name: Publish Octopus Package Artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: octopus-package
          path: octopus-package/*
          retention-days: 1
      #- name: Push package to Octopus Deploy
      #  uses: OctopusDeploy/push-package-action@v1.1.1
      #  with:
      #    server: https://deploy.particular.net
      #    api_key: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
      #    packages: octopus-package/${{env.PARTICULAR_REPO_NAME}}.Deploy.${{env.GitVersion_SemVer}}.nupkg
      #- name: Create Octopus Deploy release
      #  uses: OctopusDeploy/create-release-action@v1.1.1
      #  with:
      #    server: https://deploy.particular.net
      #    api_key: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
      #    project: ${{env.PARTICULAR_REPO_NAME}}
      #    release_number: ${{env.GitVersion_SemVer}}
      #    package_version: ${{env.GitVersion_SemVer}}
      #    package: "GitReleaseManager:0.11.0"
  docker:
    needs: release
    name: docker-${{ matrix.name }}
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          - name: sql-windows
            filter: '*sqlserver*'
            transport: SqlServer
          - name: rabbit-conventional-windows
            filter: '*rabbitmq.conventional*'
            transport: RabbitMQ
          - name: rabbit-direct-windows
            filter: '*rabbitmq.direct*'
            transport: RabbitMQ
          - name: asq-windows
            filter: '*azurestoragequeues*'
            transport: ASQ
            transport-source: AzureStorageQueue
          - name: sqs-windows
            filter: '*amazonsqs*'
            transport: SQS
            transport-source: AmazonSQS
          - name: asb-windows
            filter: '*azureservicebus*'
            transport: ASBS
            transport-source: NetStandardAzureServiceBus
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
      - name: Download zip artifacts
        uses: actions/download-artifact@v2.0.10
        with:
          name: zips
          path: zip
      - name: Temp ls -R
        run: ls -R ./zip
      - name: Prepare directory structure
        shell: pwsh
        run: |
          Expand-Archive -Force "zip\Particular.ServiceControl-${{ needs.release.outputs.majorminorpatch }}.zip" -DestinationPath "unzip\Particular.ServiceControl"
          Expand-Archive -Force "zip\Particular.ServiceControl.Audit-${{ needs.release.outputs.majorminorpatch }}.zip" -DestinationPath "unzip\Particular.ServiceControl.Audit"
          Expand-Archive -Force "zip\Particular.ServiceControl.Monitoring-${{ needs.release.outputs.majorminorpatch }}.zip" -DestinationPath "unzip\Particular.ServiceControl.Monitoring"

          $transport = "${{ matrix.transport }}"
          $srcTransport = "${{ matrix.transport-source}}"

          if ( $srcTransport -eq $null -Or $srcTransport -eq "" ) {
            $srcTransport = $transport
          }
      
          New-Item -ItemType Directory -Force -Path ServiceControl.Transports.$transport/bin/Release/net472
          Copy-Item -Path "unzip\Particular.ServiceControl\Transports\$transport\*" -Destination "ServiceControl.Transports.$transport\bin\Release\net472" -Recurse

          New-Item -ItemType Directory -Force -Path ServiceControl/bin/Release/net472
          Copy-Item -Path "unzip\Particular.ServiceControl\ServiceControl\*" -Destination "ServiceControl\bin\Release\net472" -Recurse

          New-Item -ItemType Directory -Force -Path ServiceControl.Audit/bin/Release/net472
          Copy-Item -Path "unzip\Particular.ServiceControl.Audit\ServiceControl.Audit\*" -Destination "ServiceControl.Audit\bin\Release\net472" -Recurse

          New-Item -ItemType Directory -Force -Path ServiceControl.Monitoring/bin/Release/net472
          Copy-Item -Path "unzip\Particular.ServiceControl.Monitoring\ServiceControl.Monitoring\*" -Destination "ServiceControl.Monitoring\bin\Release\net472" -Recurse
      - name: Build dockerfiles
        shell: pwsh
        run: |
          Get-ChildItem -Path .\src\docker\ -Filter "${{ matrix.filter }}" | ForEach-Object {
              $dockerImageName = $_.Name.SubString(0, $_.Name.Length - ".dockerfile".Length);
              
              $dockerbuildcmd = "docker build -t particular/" + $dockerImageName +":${{ needs.release.outputs.semver }}" + " -f .\src\docker\" + $_.Name + " ."
              Invoke-Expression $dockerbuildcmd.ToLower()
          }
      #- name: Login to Docker Hub
      #  uses: docker/login-action@v1.10.0
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Docker images
        shell: pwsh
        run: |
          Get-ChildItem -Path .\src\docker\ -Filter "${{ matrix.filter }}" | ForEach-Object {
              $dockerImageName = $_.Name.SubString(0, $_.Name.Length - ".dockerfile".Length);
              
              $dockerpushcmd = "docker push particular/" + $dockerImageName +":${{ needs.release.outputs.semver }}"
              echo "Docker Push Command: $dockerpushcmd"
              # Invoke-Expression $dockerpushcmd.ToLower()
          }
      - name: Diagnostics
        shell: pwsh
        run: |
          # List out the docker images on the system
          docker images