name: Release
on:
  push:
    branches:
      - master
      - release-*
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'
  pull_request:
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  windows:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: windows-2022
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.0.1
        with:
          dotnet-version: 8.0.x
      - name: Download RavenDB Server
        shell: pwsh
        run: ./tools/download-ravendb-server.ps1
      - name: Build
        run: dotnet build src --configuration Release -graph --property:WindowsSelfContained=true
      - name: Validate build version
        if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ./.github/actions/validate-version
        with:
          version: ${{ env.MinVerVersion }}
      - name: Build ServiceControl Management
        run: dotnet publish src\ServiceControl.Config\ServiceControl.Config.csproj --no-build --output assets --property:WindowsSelfContained=true
      - name: Create PowerShell module catalog
        run: New-FileCatalog -Path deploy\PowerShellModules\Particular.ServiceControl.Management -CatalogFilePath deploy\PowerShellModules\Particular.ServiceControl.Management\Particular.ServiceControl.Management.cat -CatalogVersion 2.0
      - name: Install AzureSignTool
        run: dotnet tool install --global azuresigntool
      - name: Sign ServiceControl Management EXE
        run: |
          AzureSignTool sign `
          --file-digest sha256 `
          --timestamp-rfc3161 http://timestamp.digicert.com `
          --azure-key-vault-url https://particularcodesigning.vault.azure.net `
          --azure-key-vault-client-id ${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }} `
          --azure-key-vault-tenant-id ${{ secrets.AZURE_KEY_VAULT_TENANT_ID }} `
          --azure-key-vault-client-secret ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }} `
          --azure-key-vault-certificate ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_NAME }} `
          assets\Particular.ServiceControl.exe
      - name: Rename ServiceControl Management EXE
        run: Rename-Item -Path assets\Particular.ServiceControl.exe -NewName "Particular.ServiceControl-${{ env.MinVerVersion }}.exe"
        shell: pwsh
      - name: Sign PowerShell module
        run: |
          AzureSignTool sign `
          --file-digest sha256 `
          --timestamp-rfc3161 http://timestamp.digicert.com `
          --azure-key-vault-url https://particularcodesigning.vault.azure.net `
          --azure-key-vault-client-id ${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }} `
          --azure-key-vault-tenant-id ${{ secrets.AZURE_KEY_VAULT_TENANT_ID }} `
          --azure-key-vault-client-secret ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }} `
          --azure-key-vault-certificate ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_NAME }} `
          deploy\PowerShellModules\Particular.ServiceControl.Management\Particular.ServiceControl.Management.cat
      - name: Zip PowerShell module
        run: |
          New-Item assets\PowerShellModules -ItemType Directory
          Compress-Archive -Path deploy\PowerShellModules\Particular.ServiceControl.Management\* -DestinationPath assets\PowerShellModules\Particular.ServiceControl.Management.zip
      - name: Publish assets
        uses: actions/upload-artifact@v4.4.0
        with:
          name: assets
          path: assets/*
          retention-days: 1
      - name: Publish zips
        uses: actions/upload-artifact@v4.4.0
        with:
          name: zips
          path: zip/*
          retention-days: 1
      - name: Build PlatformSample package
        run: |
          Remove-Item deploy\Particular.ServiceControl* -recurse
          dotnet clean src --configuration Release --property:WindowsSelfContained=true
          dotnet build src\Particular.PlatformSample.ServiceControl\Particular.PlatformSample.ServiceControl.csproj --configuration Release -graph
        shell: pwsh
      - name: Sign NuGet packages
        uses: Particular/sign-nuget-packages-action@v1.0.0
        with:
          client-id: ${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_KEY_VAULT_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }}
          certificate-name: ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE_NAME }}
      - name: Publish NuGet packages
        uses: actions/upload-artifact@v4.4.0
        with:
          name: nugets
          path: nugets/*
          retention-days: 1
      - name : Verify release artifact counts
        shell: pwsh
        run: |
          $assetsCount = (Get-ChildItem -Recurse -File assets).Count
          $nugetsCount =  (Get-ChildItem -Recurse -File nugets).Count
          $zipCount = (Get-ChildItem -Recurse -File zip).Count

          $expectedAssetsCount = 2 # SCMU & PowerShell module
          $expectedNugetsCount = 1 # PlatformSample
          $expectedZipCount = 5    # ServiceControl, Audit, & Monitoring + Transports & RavenDBServer

          if ($assetsCount -ne $expectedAssetsCount)
          {
              Write-Host Assets: Expected $expectedAssetsCount but found $assetsCount
              exit -1
          }

          if ($nugetsCount -ne $expectedNugetsCount)
          {
              Write-Host Nugets: Expected $expectedNugetsCount but found $nugetsCount
              exit -1
          }

          if ($expectedZipCount -ne $zipCount)
          {
              Write-Host Zips: Expected $expectedZipCount but found $zipCount
              exit -1
          }
      - name: Deploy
        if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
        # Does not follow standard practice of targeting explicit versions because configuration is tightly coupled to Octopus Deploy configuration
        uses: Particular/push-octopus-package-action@main
        with:
          octopus-deploy-api-key: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
  containers:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-22.04
    name: container-${{ matrix.name }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        include:
          - name: servicecontrol
            project: ServiceControl
            description: ServiceControl error instance
          - name: servicecontrol-audit
            project: ServiceControl.Audit
            description: ServiceControl audit instance
          - name: servicecontrol-monitoring
            project: ServiceControl.Monitoring
            description: ServiceControl monitoring instance
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
      - name: Install MinVer CLI
        run: dotnet tool install --global minver-cli
      - name: Determine versions
        shell: pwsh
        run: |
          # Read settings from Custom.Build.props
          [xml]$xml = Get-Content ./src/Custom.Build.props
          $minMajorMinor = $xml.selectNodes('/Project/PropertyGroup/MinVerMinimumMajorMinor').InnerText
          $autoIncrement = $xml.selectNodes('/Project/PropertyGroup/MinVerAutoIncrement').InnerText
          echo "MinVerMinimumMajorMinor=$minMajorMinor, MinVerAutoIncrement=$autoIncrement"
          if (-not ($minMajorMinor -and $autoIncrement)) {
            throw "Missing MinVer settings in Custom.Build.props"
          }

          # Execute MinVer
          echo "MinVerVersion=$(minver --minimum-major-minor $minMajorMinor --auto-increment $autoIncrement)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Validate build version
        if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ./.github/actions/validate-version
        with:
          version: ${{ env.MinVerVersion }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1
      - name: Log in to GitHub container registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build & inspect image
        env:
          TAG_NAME: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || env.MinVerVersion }}
        run: |
          docker buildx build --push --tag ghcr.io/particular/${{ matrix.name }}:${{ env.TAG_NAME }} \
              --file src/${{ matrix.project }}/Dockerfile \
              --build-arg VERSION=${{ env.MinVerVersion }} \
              --annotation "index:org.opencontainers.image.title=${{ matrix.name }}" \
              --annotation "index:org.opencontainers.image.description=${{ matrix.description }}" \
              --annotation "index:org.opencontainers.image.created=$(date '+%FT%TZ')" \
              --annotation "index:org.opencontainers.image.revision=${{ github.sha }}" \
              --annotation "index:org.opencontainers.image.authors=Particular Software" \
              --annotation "index:org.opencontainers.image.vendor=Particular Software" \
              --annotation "index:org.opencontainers.image.version=${{ env.MinVerVersion }}" \
              --annotation "index:org.opencontainers.image.source=https://github.com/${{ github.repository }}/tree/${{ github.sha }}" \
              --annotation "index:org.opencontainers.image.url=https://hub.docker.com/r/particular/${{ matrix.name }}" \
              --annotation "index:org.opencontainers.image.documentation=https://docs.particular.net/servicecontrol/" \
              --annotation "index:org.opencontainers.image.base.name=mcr.microsoft.com/dotnet/aspnet:8.0" \
              --platform linux/arm64,linux/amd64 .
          docker buildx imagetools inspect ghcr.io/particular/${{ matrix.name }}:${{ env.TAG_NAME }}
  db-containers:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-22.04
    name: db-containers
    defaults:
      run:
        shell: bash
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
      - name: Install MinVer CLI
        run: dotnet tool install --global minver-cli
      - name: Determine versions
        shell: pwsh
        run: |
          # Read settings from Custom.Build.props
          [xml]$xml = Get-Content ./src/Custom.Build.props
          $minMajorMinor = $xml.selectNodes('/Project/PropertyGroup/MinVerMinimumMajorMinor').InnerText
          $autoIncrement = $xml.selectNodes('/Project/PropertyGroup/MinVerAutoIncrement').InnerText
          echo "MinVerMinimumMajorMinor=$minMajorMinor, MinVerAutoIncrement=$autoIncrement"
          if (-not ($minMajorMinor -and $autoIncrement)) {
            throw "Missing MinVer settings in Custom.Build.props"
          }

          # Execute MinVer
          echo "MinVerVersion=$(minver --minimum-major-minor $minMajorMinor --auto-increment $autoIncrement)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Validate build version
        if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ./.github/actions/validate-version
        with:
          version: ${{ env.MinVerVersion }}
      - name: Log in to GitHub container registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build images
        env:
          TAG_NAME: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || env.MinVerVersion }}
        shell: pwsh
        run: |
          Write-Output "Determining RavenDB version from Directory.Packages.props file"
          [xml]$packagesFile = Get-Content src/Directory.Packages.props
          $RavenVersion = $packagesFile.selectNodes("//Project/ItemGroup/PackageVersion[@Include='RavenDB.Embedded']").Version

          if (-not $RavenVersion) { throw "Unable to determine RavenDB server version from Directory.Packages.props" }

          Write-Output "Determining container variants to build"
          $containers = cat src/ServiceControl.RavenDB/containers.json | ConvertFrom-Json
          $containers | ForEach-Object -Process {
            $FULLTAG="${{ env.TAG_NAME }}-$($_.tag)"
            $BASETAG="$($RavenVersion)-ubuntu.22.04-$($_.tag)"
            Write-Output "::group::Building $FULLTAG for architecture $($_.arch) from $BASETAG"
            docker build -t ghcr.io/particular/servicecontrol-ravendb:$FULLTAG --file src/ServiceControl.RavenDB/Dockerfile --build-arg VERSION=${{ env.MinVerVersion }} --build-arg BASETAG=$BASETAG --platform linux/$($_.arch) .
            Write-Output "::endgroup::"
          }
      - name: List local images
        run: docker images
      - name: Push images to GitHub Container registry
        run: docker image push --all-tags ghcr.io/particular/servicecontrol-ravendb
      - name: Create multi-arch manifest
        env:
          TAG_NAME: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || env.MinVerVersion }}
        shell: pwsh
        run: |
          $manifestCreate = "docker manifest create ghcr.io/particular/servicecontrol-ravendb:${{ env.TAG_NAME }}"
          $containers = cat src/ServiceControl.RavenDB/containers.json | ConvertFrom-Json
          $containers | ForEach-Object -Process {
            $manifestCreate += " --amend ghcr.io/particular/servicecontrol-ravendb:${{ env.TAG_NAME }}-$($_.tag)"
          }
          Invoke-Expression $manifestCreate
          docker buildx imagetools inspect ghcr.io/particular/servicecontrol-ravendb:${{ env.TAG_NAME }}
          docker manifest push ghcr.io/particular/servicecontrol-ravendb:${{ env.TAG_NAME }}
  container-test:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: container-test-${{ matrix.name}}
    needs: [ 'containers', 'db-containers' ]
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: rabbit
            transport: RabbitMQ.QuorumConventionalRouting
            connection-string: 'host=transport'
          - name: mssql
            transport: SQLServer
            connection-string: 'Server=transport;Database=master;User=sa;Password=ServiceControl1!;Encrypt=False;'
          - name: asb
            transport: NetStandardAzureServiceBus
          - name: asq
            transport: AzureStorageQueue
          - name: sqs
            transport: AmazonSQS
            connection-string: 'AccessKeyId=demo;SecretAccessKey=demo;Region=us-east-1'
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
      - name: Install MinVer CLI
        run: dotnet tool install --global minver-cli
      - name: Determine versions
        shell: pwsh
        run: |
          # Read settings from Custom.Build.props
          [xml]$xml = Get-Content ./src/Custom.Build.props
          $minMajorMinor = $xml.selectNodes('/Project/PropertyGroup/MinVerMinimumMajorMinor').InnerText
          $autoIncrement = $xml.selectNodes('/Project/PropertyGroup/MinVerAutoIncrement').InnerText
          echo "MinVerMinimumMajorMinor=$minMajorMinor, MinVerAutoIncrement=$autoIncrement"
          if (-not ($minMajorMinor -and $autoIncrement)) {
            throw "Missing MinVer settings in Custom.Build.props"
          }

          # Execute MinVer
          echo "MinVerVersion=$(minver --minimum-major-minor $minMajorMinor --auto-increment $autoIncrement)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Validate build version
        if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ./.github/actions/validate-version
        with:
          version: ${{ env.MinVerVersion }}
      - name: Log in to GitHub container registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Azure Login
        if: ${{ matrix.name == 'asb' || matrix.name == 'asq' }}
        uses: azure/login@v2.1.1
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup Azure Service Bus
        if: ${{ matrix.name == 'asb' }}
        uses: Particular/setup-azureservicebus-action@v2.0.0
        with:
          connection-string-name: ConnectionString
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: ServiceControlContainerTest
      - name: Setup Azure Storage
        if: ${{ matrix.name == 'asq' }}
        uses: Particular/setup-azurestorage-action@v2.0.0
        with:
          connection-string-name: ConnectionString
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: ServiceControlContainerTest
      - name: Run Docker Compose
        shell: bash
        run: |
          echo 'Creating .env file'
          cd src/compose-test
          echo 'SERVICECONTROL_TAG=${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || env.MinVerVersion }}' > .env
          echo 'TRANSPORTTYPE=${{ matrix.transport }}' >> .env
          echo 'CONNECTIONSTRING="${{ matrix.connection-string || env.ConnectionString }}"' >> .env
          echo 'AWS_ENDPOINT_URL=http://transport:4566' >> .env
          cat .env
          echo ''
          echo '--------------------'

          echo 'Adding ${{matrix.name}} transport configuration to compose.yml'
          echo '' >> compose.yml
          echo '' >> compose.yml
          cat ${{ matrix.name }}.yml >> compose.yml
          cat compose.yml
          echo ''
          echo '--------------------'

          echo 'Starting services...'
          docker compose up -d
          echo 'Docker compose complete'
      - name: Wait for container health
        shell: pwsh
        run: |
          echo "Waiting up to 60 seconds for containers to become healthy"
          for ($i=0; $i -le 60; $i++) {
            $numHealthy = (docker ps -f health=healthy | Measure-Object -Line).Lines - 1
            echo "Currently $numHealthy healthy containers"
            if ($numHealthy -eq 5) {
                break;
            }
            sleep 1
          }
      - name: Inspect transport container
        run: docker inspect service-platform-transport-1
      - name: Primary instance logs
        run: docker logs service-platform-servicecontrol-1
      - name: Error instance logs
        run: docker logs service-platform-servicecontrol-audit-1
      - name: Monitoring instance logs
        run: docker logs service-platform-servicecontrol-monitoring-1
      - name: Query running containers
        shell: pwsh
        run: |
          docker ps --all

          $return = 0
          # Subtract 1 for headers
          $numHealthy = (docker ps -f health=healthy | Measure-Object -Line).Lines - 1

          # Should be 1 for transport + 1 for DB + 3 instances = 5
          echo "Found $numHealthy healthy containers out of 5"
          if ($numHealthy -ne 5) {
            $return = 1
          }

          cd src/compose-test
          docker compose down
          exit $return
