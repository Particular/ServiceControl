on:
  workflow_call:
permissions:
  packages: write
jobs:
  db-container:
    runs-on: ubuntu-latest
    name: db-container
    defaults:
      run:
        shell: bash
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.3.1
        with:
          global-json-file: global.json
          dotnet-version: 8.0.x
      - name: Run MinVer
        uses: Particular/run-minver-action@v1.0.0
      - name: Validate build version
        if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ./.github/actions/validate-version
        with:
          version: ${{ env.MinVerVersion }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Log in to GitHub container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Docker arm64 emulation
        run: docker run --privileged --rm tonistiigi/binfmt --install arm64
      - name: Build images
        env:
          TAG_NAME: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || env.MinVerVersion }}
        shell: pwsh
        run: |
          Write-Output "Determining RavenDB version from Directory.Packages.props file"
          [xml]$packagesFile = Get-Content src/Directory.Packages.props
          $RavenVersion = $packagesFile.selectNodes("//Project/ItemGroup/PackageVersion[@Include='RavenDB.Embedded']").Version

          if (-not $RavenVersion) { throw "Unable to determine RavenDB server version from Directory.Packages.props" }

          Write-Output "Determining container variants to build"
          $containers = cat src/ServiceControl.RavenDB/containers.json | ConvertFrom-Json
          $containers | ForEach-Object -Process {
            $FULLTAG="${{ env.TAG_NAME }}-$($_.tag)"
            $BASETAG="$($RavenVersion)-ubuntu.22.04-$($_.tag)"
            Write-Output "::group::Building $FULLTAG for architecture $($_.arch) from $BASETAG"
            docker build -t ghcr.io/particular/servicecontrol-ravendb:$FULLTAG --file src/ServiceControl.RavenDB/Dockerfile --build-arg VERSION=${{ env.MinVerVersion }} --build-arg BASETAG=$BASETAG --platform linux/$($_.arch) .
            Write-Output "::endgroup::"
          }
      - name: List local images
        run: docker images
      - name: Push images to GitHub Container registry
        run: docker image push --all-tags ghcr.io/particular/servicecontrol-ravendb
      - name: Create multi-arch manifest
        env:
          TAG_NAME: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || env.MinVerVersion }}
        shell: pwsh
        run: |
          $manifestCreate = "docker manifest create ghcr.io/particular/servicecontrol-ravendb:${{ env.TAG_NAME }}"
          $containers = cat src/ServiceControl.RavenDB/containers.json | ConvertFrom-Json
          $containers | ForEach-Object -Process {
            $manifestCreate += " --amend ghcr.io/particular/servicecontrol-ravendb:${{ env.TAG_NAME }}-$($_.tag)"
          }
          Invoke-Expression $manifestCreate
          docker buildx imagetools inspect ghcr.io/particular/servicecontrol-ravendb:${{ env.TAG_NAME }}
          docker manifest push ghcr.io/particular/servicecontrol-ravendb:${{ env.TAG_NAME }}