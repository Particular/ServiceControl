# See /src/container-integration-test/README.md
on:
  workflow_call:
jobs:
  container-test:
    runs-on: ubuntu-latest
    name: ${{ matrix.name }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: rabbit
            transport: RabbitMQ.QuorumConventionalRouting
            connection-string: 'host=rabbit'
            compose-cmd: docker compose -f servicecontrol.yml -f rabbit.yml up -d
            expected-healthy-containers: 5
          - name: mssql
            transport: SQLServer
            connection-string: 'Server=mssql;Database=master;User=sa;Password=ServiceControl1!;Encrypt=False;'
            compose-cmd: docker compose -f servicecontrol.yml -f mssql.yml up -d
            expected-healthy-containers: 5
          - name: postgresql
            transport: PostgreSQL
            connection-string: 'Host=postgres;Port=5432;Database=postgres;User ID=postgres;Password=ServiceControl1!;'
            compose-cmd: docker compose -f servicecontrol.yml -f postgres.yml up -d
            expected-healthy-containers: 5
          - name: asb
            transport: NetStandardAzureServiceBus
            compose-cmd: docker compose -f servicecontrol.yml up -d
            expected-healthy-containers: 4
          - name: asq
            transport: AzureStorageQueue
            compose-cmd: docker compose -f servicecontrol.yml up -d
            expected-healthy-containers: 4
          - name: sqs
            transport: AmazonSQS
            connection-string: 'AccessKeyId=demo;SecretAccessKey=demo;Region=us-east-1'
            compose-cmd: docker compose -f servicecontrol.yml -f sqs.yml up -d
            expected-healthy-containers: 5
    env:
      CONNECTIONSTRING: ${{ matrix.connection-string }}
      TRANSPORTTYPE: ${{ matrix.transport }}
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.3.1
        with:
          global-json-file: global.json
          dotnet-version: 8.0.x
      - name: Run MinVer
        uses: Particular/run-minver-action@v1.0.0
      - name: Log in to GitHub container registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Azure Login
        if: ${{ matrix.name == 'asb' || matrix.name == 'asq' }}
        uses: azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup Azure Service Bus
        if: ${{ matrix.name == 'asb' }}
        uses: Particular/setup-azureservicebus-action@v2.0.0
        with:
          connection-string-name: CONNECTIONSTRING
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: ServiceControlContainerTest
      - name: Setup Azure Storage
        if: ${{ matrix.name == 'asq' }}
        uses: Particular/setup-azurestorage-action@v2.0.0
        with:
          connection-string-name: CONNECTIONSTRING
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: ServiceControlContainerTest
      - name: Run Docker Compose
        shell: pwsh
        env:
          SERVICECONTROL_TAG: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || env.MinVerVersion }}
        run: |
          cd src/container-integration-test
          echo 'Starting services...'
          ${{ matrix.compose-cmd }}
          echo 'Docker compose complete'
      - name: Evaluate container health
        id: evaluate
        shell: pwsh
        run: |
          echo "Waiting for containers to become healthy"
          $numHealthy = 0
          for ($i=0; $i -le 20; $i++) {
            $numHealthy = (docker ps -f health=healthy --format json | ConvertFrom-Json).Count
            echo "Currently $numHealthy healthy containers out of ${{matrix.expected-healthy-containers}} expected"
            if ($numHealthy -eq ${{matrix.expected-healthy-containers}}) {
                break;
            }
            sleep 5
          }
          Write-Output "healthy-containers=$numHealthy" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf-8 -Append
      - name: Dump Docker container list
        run: docker ps --all
      - name: Dump Primary instance logs
        run: docker logs service-platform-servicecontrol-1
      - name: Dump Audit instance logs
        run: docker logs service-platform-servicecontrol-audit-1
      - name: Dump Monitoring instance logs
        run: docker logs service-platform-servicecontrol-monitoring-1
      - name: Return status
        shell: pwsh
        run: |
          $numHealthy = ${{ steps.evaluate.outputs.healthy-containers }}
          echo "Found $numHealthy healthy containers out of ${{matrix.expected-healthy-containers}} expected"
          if ($numHealthy -ne ${{matrix.expected-healthy-containers}}) {
            exit 1
          }