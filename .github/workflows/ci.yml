name: CI
on:
  push:
    branches:
      - master
      - release-*
  pull_request:
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    name: ${{ matrix.os-name }}-${{ matrix.test-category }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, ubuntu-22.04]
        test-category: [ Default, SqlServer, AzureServiceBus, RabbitMQ, AzureStorageQueues, MSMQ, SQS, PrimaryRavenAcceptance, PrimaryRavenPersistence ]
        include:
          - os: windows-2022
            os-name: Windows
          - os: ubuntu-22.04
            os-name: Linux
        exclude:
          - os: ubuntu-22.04
            test-category: MSMQ
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.0.1
        with:
          dotnet-version: 8.0.x
      - name: Download RavenDB Server
        shell: pwsh
        run: ./tools/download-ravendb-server.ps1
      - name: Build
        run: dotnet build src --configuration Release -graph
      - name: Zip PowerShell module
        shell: pwsh
        run: |
          New-Item assets\PowerShellModules -ItemType Directory
          Compress-Archive -Path deploy\PowerShellModules\Particular.ServiceControl.Management\* -DestinationPath assets\PowerShellModules\Particular.ServiceControl.Management.zip
      - name: Upload assets
        uses: actions/upload-artifact@v4.4.0
        if: matrix.test-category == 'Default'
        with:
          name: ${{ matrix.os-name }}-assets
          path: |
            nugets/
            zip/
            assets/
          retention-days: 1
      - name: Smoke test PowerShell module import
        if: matrix.os-name == 'Windows'
        shell: pwsh
        run: Import-Module ./deploy/PowerShellModules/Particular.ServiceControl.Management
      - name: Azure login
        uses: azure/login@v2.1.1
        if: matrix.test-category == 'AzureServiceBus' || matrix.test-category == 'AzureStorageQueues' || matrix.test-category == 'RabbitMQ'
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup SQL Server
        uses: Particular/install-sql-server-action@v1.2.0
        if: matrix.test-category == 'SqlServer'
        with:
          connection-string-env-var: ServiceControl_TransportTests_SQL_ConnectionString
          catalog: nservicebus
      - name: Setup RabbitMQ
        uses: Particular/setup-rabbitmq-action@v1.7.0
        if: matrix.test-category == 'RabbitMQ'
        with:
          connection-string-name: ServiceControl_TransportTests_RabbitMQ_ConnectionString
          tag: ServiceControl
          registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
          registry-password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup Azure Service Bus
        uses: Particular/setup-azureservicebus-action@v2.0.0
        if: matrix.test-category == 'AzureServiceBus'
        with:
          connection-string-name: ServiceControl_TransportTests_ASBS_ConnectionString
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: ServiceControl
      - name: Setup Azure Storage Queues
        uses: Particular/setup-azurestorage-action@v2.0.0
        if: matrix.test-category == 'AzureStorageQueues'
        with:
          connection-string-name: ServiceControl_TransportTests_ASQ_ConnectionString
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: ServiceControl
      - name: Setup SQS environment variables
        if: matrix.test-category == 'SQS'
        shell: pwsh
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

          # Cleanup of queues starting with `GHA-` handled by https://github.com/Particular/NServiceBus.AmazonSQS/blob/master/.github/workflows/tests-cleanup.yml
          $connectString = "AccessKeyId=${{ secrets.AWS_ACCESS_KEY_ID }};SecretAccessKey=${{ secrets.AWS_SECRET_ACCESS_KEY }};Region=${{ secrets.AWS_REGION }};QueueNamePrefix=GHA-${{ github.run_id }}"
          echo "ServiceControl_TransportTests_SQS_ConnectionString=$connectString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Run tests
        uses: Particular/run-tests-action@v1.7.0
        env:
          ServiceControl_TESTS_FILTER: ${{ matrix.test-category }}
          PARTICULARSOFTWARE_LICENSE: ${{ secrets.LICENSETEXT }}
          AZURE_ACI_CREDENTIALS: ${{ secrets.AZURE_ACI_CREDENTIALS }}

  windows-installers:
    if: ${{ github.actor != 'dependabot[bot]' }}
    uses: ./.github/workflows/build-windows.yml
    secrets: inherit
  containers:
    if: ${{ github.actor != 'dependabot[bot]' }}
    uses: ./.github/workflows/build-containers.yml
    secrets: inherit
  db-container:
    if: ${{ github.actor != 'dependabot[bot]' }}
    uses: ./.github/workflows/build-db-container.yml
    secrets: inherit

  container-test:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: container-test-${{ matrix.name}}
    needs: [ 'containers', 'db-container' ]
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: rabbit
            transport: RabbitMQ.QuorumConventionalRouting
            connection-string: 'host=transport'
            transport-compose-file: rabbit.yml
          - name: mssql
            transport: SQLServer
            connection-string: 'Server=transport;Database=master;User=sa;Password=ServiceControl1!;Encrypt=False;'
            transport-compose-file: mssql.yml
          - name: asb
            transport: NetStandardAzureServiceBus
            transport-compose-file: rabbit.yml
          - name: asq
            transport: AzureStorageQueue
          - name: sqs
            transport: AmazonSQS
            connection-string: 'AccessKeyId=demo;SecretAccessKey=demo;Region=us-east-1'
            transport-compose-file: sqs.yml
    env:
      CONNECTIONSTRING: ${{ matrix.connection-string }}
      TRANSPORTTYPE: ${{ matrix.transport }}
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0
      - name: Run MinVer
        uses: Particular/run-minver-action@v1.0.0
      - name: Validate build version
        if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
        uses: ./.github/actions/validate-version
        with:
          version: ${{ env.MinVerVersion }}
      - name: Log in to GitHub container registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Azure Login
        if: ${{ matrix.name == 'asb' || matrix.name == 'asq' }}
        uses: azure/login@v2.1.1
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup Azure Service Bus
        if: ${{ matrix.name == 'asb' }}
        uses: Particular/setup-azureservicebus-action@v2.0.0
        with:
          connection-string-name: CONNECTIONSTRING
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: ServiceControlContainerTest
      - name: Setup Azure Storage
        if: ${{ matrix.name == 'asq' }}
        uses: Particular/setup-azurestorage-action@v2.0.0
        with:
          connection-string-name: CONNECTIONSTRING
          azure-credentials: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          tag: ServiceControlContainerTest
      - name: Run Docker Compose
        shell: bash
        env:
          SERVICECONTROL_TAG: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || env.MinVerVersion }}
        run: |
          cd src/compose-test
          echo 'Starting services...'
          docker compose -f compose.yml -f ${{ matrix.transport-compose-file || 'fake-transport-container.yml' }} up -d
          echo 'Docker compose complete'
      - name: Wait for container health
        shell: pwsh
        run: |
          echo "Waiting up to 60 seconds for containers to become healthy"
          for ($i=0; $i -le 60; $i++) {
            $numHealthy = (docker ps -f health=healthy | Measure-Object -Line).Lines - 1
            echo "Currently $numHealthy healthy containers"
            if ($numHealthy -eq 5) {
                break;
            }
            sleep 1
          }
      - name: Inspect transport container
        run: docker inspect service-platform-transport-1
      - name: Primary instance logs
        run: docker logs service-platform-servicecontrol-1
      - name: Error instance logs
        run: docker logs service-platform-servicecontrol-audit-1
      - name: Monitoring instance logs
        run: docker logs service-platform-servicecontrol-monitoring-1
      - name: Query running containers
        shell: pwsh
        run: |
          docker ps --all

          $return = 0
          # Subtract 1 for headers
          $numHealthy = (docker ps -f health=healthy | Measure-Object -Line).Lines - 1

          # Should be 1 for transport + 1 for DB + 3 instances = 5
          echo "Found $numHealthy healthy containers out of 5"
          if ($numHealthy -ne 5) {
            $return = 1
          }

          cd src/compose-test
          docker compose down
          exit $return
