name: CI
on:
  push:
    branches:
      - master
      - release-*
  pull_request:
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: windows-2022
    strategy:
      matrix:
        include:
          - name: LearningTransport
            transport: LearningTransport
            customization: ConfigureEndpointLearningTransport
          - name: Msmq
            transport: Msmq
            customization: ConfigureEndpointMsmqTransport
            upload: true
          - name: SqlServer
            transport: SqlServer
            customization: ConfigureEndpointSqlServerTransport
          - name: RabbitMQ-Conventional
            transport: RabbitMQ
            customization: ConfigureEndpointRabbitMQConventionalRoutingTransport
          - name: RabbitMQ-Direct
            transport: RabbitMQ
            customization: ConfigureEndpointRabbitMQDirectRoutingTransport
          - name: AzureServiceBusNetStandard
            transport: AzureServiceBusNetStandard
            customization: ConfigureEndpointAzureServiceBusNetStandardTransport
          - name: AzureServiceBus-ForwardingTopology
            transport: AzureServiceBus
            customization: ConfigureEndpointAzureServiceBusForwardingTopologyTransport
          - name: AzureServiceBus-EndpointTopology
            transport: AzureServiceBus
            customization: ConfigureEndpointAzureServiceBusEndpointTopologyTransport
          - name: AzureStorageQueues
            transport: AzureStorageQueues
            customization: ConfigureEndpointAzureStorageQueueTransport
          - name: SQS
            transport: SQS
            customization: ConfigureEndpointSQSTransport
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2.0.0
        with:
          dotnet-version: 6.0.x
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Build
        run: msbuild src -p:Configuration=Release -restore -m -verbosity:minimal
      - name: Upload packages
        if: matrix.upload == true
        uses: actions/upload-artifact@v3.0.0
        with:
          name: assets
          path: |
            nugets/
            zip/
            assets/
          retention-days: 1
      - name: Azure login
        uses: azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup SQL Server
        if: matrix.transport == 'SqlServer'
        uses: Particular/install-sql-server-action@v1.0.0
        with:
          connection-string-env-var: ServiceControl.AcceptanceTests.ConnectionString
          catalog: nservicebus
      - name: Setup RabbitMQ
        if: matrix.transport == 'RabbitMQ'
        id: setup-rabbitmq
        shell: pwsh
        run: |
          # Retrieve the Azure region in which this workflow is running. This region should be used to create addtional resources.
          $hostInfo = curl -H Metadata:true "169.254.169.254/metadata/instance?api-version=2017-08-01" | ConvertFrom-Json
          $region = $hostInfo.compute.location

          $hostname = "psw-rabbitmq-$(Get-Random)"
          echo "::set-output name=hostname::$hostname"
          echo "Creating RabbitMQ container $hostname in $region (This can take a while.)"
          $jsonResult = az container create --image rabbitmq:3-management --name $hostname --location $region --dns-name-label $hostname --resource-group GitHubActions-RG --cpu 4 --memory 16 --ports 5672 15672 --ip-address public
          if(!$jsonResult)
          {
            Write-Output "Failed to create RabbitMQ container"
            exit 1;
          }
          $details = $jsonResult | ConvertFrom-Json
          if (!$details.ipAddress) {
            Write-Output "Failed to create RabbitMQ container $hostname in $region"
            Write-Output $jsonResult
            exit 1;
          }
          $ip=$details.ipAddress.ip
          echo "::add-mask::$ip"
          echo "Tagging container image"
          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"
          $ignore = az tag create --resource-id $details.id --tags Package=ServiceControl RunnerOS=${{ runner.os }} $dateTag
          echo "ServiceControl.AcceptanceTests.ConnectionString=host=$ip" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

          $uri = "http://" + $ip + ":15672/api/health/checks/virtual-hosts"
          $tries = 0
          do
          {
            $response = curl $uri -u guest:guest | ConvertFrom-Json
            $tries++
            if(!$response.status)
            {
              Write-Output "No response, retrying..."
              Start-Sleep -m 5000
            }
          } until (($response.status) -or ($tries -ge 10))
          if($response.status -ne "ok")
          {
            Write-Output "Failed to connect after 10 attempts";
            exit 1
          }
      - name: Setup Azure Service Bus
        if: matrix.transport == 'AzureServiceBus' || matrix.transport == 'AzureServiceBusNetStandard'
        uses: Particular/setup-azureservicebus-action@v1.0.0
        with:
          connection-string-name: ServiceControl.AcceptanceTests.ConnectionString
          tag: ServiceControl

      - name: Setup Azure Storage Queues
        if: matrix.transport == 'AzureStorageQueues'
        uses: Particular/setup-azurestorage-action@v1.0.0
        with:
          connection-string-name: ServiceControl.AcceptanceTests.ConnectionString
          tag: ServiceControl
      - name: Setup SQS environment variables
        if: matrix.Transport == 'SQS'
        shell: pwsh
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

          $connectString = "AccessKeyId=${{ secrets.AWS_ACCESS_KEY_ID }};SecretAccessKey=${{ secrets.AWS_SECRET_ACCESS_KEY }};Region=${{ secrets.AWS_REGION }};QueueNamePrefix=GHA-${{ github.run_id }}"
          echo "ServiceControl.AcceptanceTests.ConnectionString=$connectString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Run tests
        uses: Particular/run-tests-action@v1.3.0
        env:
          ServiceControl.AcceptanceTests.Transport: ${{ matrix.transport }}
          ServiceControl.AcceptanceTests.TransportCustomization: ${{ matrix.customization }}
          ServiceControl/LicenseText: ${{ secrets.LICENSETEXT }}
          ServiceControl.Audit/LicenseText: ${{ secrets.LICENSETEXT }}
          Monitoring/LicenseText: ${{ secrets.LICENSETEXT }}

      - name: Teardown infrastructure
        if: ${{ always() }}
        shell: pwsh
        run: |
          if ('${{ matrix.transport }}' -eq 'RabbitMQ') {
            $ignore = az container delete --resource-group GitHubActions-RG --name ${{ steps.setup-rabbitmq.outputs.hostname }} --yes
          }